/* Generated by Cython 0.21dev on Fri Jan  2 18:45:35 2015 */

#define PY_SSIZE_T_CLEAN
#ifndef CYTHON_USE_PYLONG_INTERNALS
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 0
#else
#include "pyconfig.h"
#ifdef PYLONG_BITS_IN_DIGIT
#define CYTHON_USE_PYLONG_INTERNALS 1
#else
#define CYTHON_USE_PYLONG_INTERNALS 0
#endif
#endif
#endif
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_21dev"
#include <stddef.h> /* For offsetof */
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#define __Pyx_PyIndex_Check PyIndex_Check
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos) \
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_CHECKTYPES 0
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#if PY_MAJOR_VERSION >= 3
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#if PY_VERSION_HEX < 0x030400a1 && !defined(Py_TPFLAGS_HAVE_FINALIZE)
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ? \
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ? \
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#define __Pyx_PyString_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj) || \
                                         PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#endif
#define __Pyx_GetAttrString(o,n)   PyObject_GetAttrString((o),(n))
#define __Pyx_SetAttrString(o,n,a) PyObject_SetAttrString((o),(n),(a))
#define __Pyx_DelAttrString(o,n)   PyObject_DelAttrString((o),(n))
#if PY_VERSION_HEX < 0x02050000
  #define __Pyx_NAMESTR(n) ((char *)(n))
  #define __Pyx_DOCSTR(n)  ((char *)(n))
#else
  #define __Pyx_NAMESTR(n) (n)
  #define __Pyx_DOCSTR(n)  (n)
#endif
#ifndef CYTHON_INLINE
  #if defined(__GNUC__)
    #define CYTHON_INLINE __inline__
  #elif defined(_MSC_VER)
    #define CYTHON_INLINE __inline
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_INLINE inline
  #else
    #define CYTHON_INLINE
  #endif
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  /* Initialize NaN. The sign is irrelevant, an exponent with all bits 1 and
   a nonzero mantissa means NaN. If the first bit in the mantissa is 1, it is
   a quiet NaN. */
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif
#ifdef __cplusplus
template<typename T>
void __Pyx_call_destructor(T* x) {
    x->~T();
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#if defined(WIN32) || defined(MS_WINDOWS)
#define _USE_MATH_DEFINES
#endif
#include <math.h>
#define __PYX_HAVE__czelta
#define __PYX_HAVE_API__czelta
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "station.h"
#include "event_reader.h"
#include "event.h"
#include "coincidence.h"
#include "common_func.h"
#include "libnova.h"
#include "stdio.h"
#include "stdlib.h"
#include "numpy/arrayobject.h"
#include "numpy/ufuncobject.h"
#include "math.h"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry; /*proto*/

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 0
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING ""
#define __Pyx_PyObject_FromString __Pyx_PyBytes_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (    \
    (sizeof(type) < sizeof(Py_ssize_t))  ||             \
    (sizeof(type) > sizeof(Py_ssize_t) &&               \
          likely(v < (type)PY_SSIZE_T_MAX ||            \
                 v == (type)PY_SSIZE_T_MAX)  &&         \
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||       \
                                v == (type)PY_SSIZE_T_MIN)))  ||  \
    (sizeof(type) == sizeof(Py_ssize_t) &&              \
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||        \
                               v == (type)PY_SSIZE_T_MAX)))  )
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromUString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromUString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromUString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromUString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromUString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_Owned_Py_None(b) (Py_INCREF(Py_None), Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? (Py_INCREF(Py_True), Py_True) : (Py_INCREF(Py_False), Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;

#if !defined(CYTHON_CCOMPLEX)
  #if defined(__cplusplus)
    #define CYTHON_CCOMPLEX 1
  #elif defined(_Complex_I)
    #define CYTHON_CCOMPLEX 1
  #else
    #define CYTHON_CCOMPLEX 0
  #endif
#endif
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #include <complex>
  #else
    #include <complex.h>
  #endif
#endif
#if CYTHON_CCOMPLEX && !defined(__cplusplus) && defined(__sun__) && defined(__GNUC__)
  #undef _Complex_I
  #define _Complex_I 1.0fj
#endif


static const char *__pyx_f[] = {
  "station.pxi",
  "czelta.pyx",
  "coincidence.pxi",
  "event_reader.pxi",
  "my_analysis.pxi",
  "event.pxi",
  "__init__.pxd",
  "stringsource",
  "stringsource",
  "stringsource",
  "type.pxd",
};
#define IS_UNSIGNED(type) (((type) -1) > 0)
struct __Pyx_StructField_;
#define __PYX_BUF_FLAGS_PACKED_STRUCT (1 << 0)
typedef struct {
  const char* name; /* for error messages only */
  struct __Pyx_StructField_* fields;
  size_t size;     /* sizeof(type) */
  size_t arraysize[8]; /* length of array in each dimension */
  int ndim;
  char typegroup; /* _R_eal, _C_omplex, Signed _I_nt, _U_nsigned int, _S_truct, _P_ointer, _O_bject, c_H_ar */
  char is_unsigned;
  int flags;
} __Pyx_TypeInfo;
typedef struct __Pyx_StructField_ {
  __Pyx_TypeInfo* type;
  const char* name;
  size_t offset;
} __Pyx_StructField;
typedef struct {
  __Pyx_StructField* field;
  size_t parent_offset;
} __Pyx_BufFmt_StackElem;
typedef struct {
  __Pyx_StructField root;
  __Pyx_BufFmt_StackElem* head;
  size_t fmt_offset;
  size_t new_count, enc_count;
  size_t struct_alignment;
  int is_complex;
  char enc_type;
  char new_packmode;
  char enc_packmode;
  char is_valid_array;
} __Pyx_BufFmt_Context;


/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":723
 * # in Cython to enable them only on the right systems.
 * 
 * ctypedef npy_int8       int8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 */
typedef npy_int8 __pyx_t_5numpy_int8_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":724
 * 
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t
 */
typedef npy_int16 __pyx_t_5numpy_int16_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":725
 * ctypedef npy_int8       int8_t
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_int64      int64_t
 * #ctypedef npy_int96      int96_t
 */
typedef npy_int32 __pyx_t_5numpy_int32_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":726
 * ctypedef npy_int16      int16_t
 * ctypedef npy_int32      int32_t
 * ctypedef npy_int64      int64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_int96      int96_t
 * #ctypedef npy_int128     int128_t
 */
typedef npy_int64 __pyx_t_5numpy_int64_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":730
 * #ctypedef npy_int128     int128_t
 * 
 * ctypedef npy_uint8      uint8_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 */
typedef npy_uint8 __pyx_t_5numpy_uint8_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":731
 * 
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t
 */
typedef npy_uint16 __pyx_t_5numpy_uint16_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":732
 * ctypedef npy_uint8      uint8_t
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uint64     uint64_t
 * #ctypedef npy_uint96     uint96_t
 */
typedef npy_uint32 __pyx_t_5numpy_uint32_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":733
 * ctypedef npy_uint16     uint16_t
 * ctypedef npy_uint32     uint32_t
 * ctypedef npy_uint64     uint64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_uint96     uint96_t
 * #ctypedef npy_uint128    uint128_t
 */
typedef npy_uint64 __pyx_t_5numpy_uint64_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":737
 * #ctypedef npy_uint128    uint128_t
 * 
 * ctypedef npy_float32    float32_t             # <<<<<<<<<<<<<<
 * ctypedef npy_float64    float64_t
 * #ctypedef npy_float80    float80_t
 */
typedef npy_float32 __pyx_t_5numpy_float32_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":738
 * 
 * ctypedef npy_float32    float32_t
 * ctypedef npy_float64    float64_t             # <<<<<<<<<<<<<<
 * #ctypedef npy_float80    float80_t
 * #ctypedef npy_float128   float128_t
 */
typedef npy_float64 __pyx_t_5numpy_float64_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":747
 * # The int types are mapped a bit surprising --
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t
 */
typedef npy_long __pyx_t_5numpy_int_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":748
 * # numpy.int corresponds to 'l' and numpy.long to 'q'
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longlong   longlong_t
 * 
 */
typedef npy_longlong __pyx_t_5numpy_long_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":749
 * ctypedef npy_long       int_t
 * ctypedef npy_longlong   long_t
 * ctypedef npy_longlong   longlong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_ulong      uint_t
 */
typedef npy_longlong __pyx_t_5numpy_longlong_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":751
 * ctypedef npy_longlong   longlong_t
 * 
 * ctypedef npy_ulong      uint_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t
 */
typedef npy_ulong __pyx_t_5numpy_uint_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":752
 * 
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t             # <<<<<<<<<<<<<<
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 */
typedef npy_ulonglong __pyx_t_5numpy_ulong_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":753
 * ctypedef npy_ulong      uint_t
 * ctypedef npy_ulonglong  ulong_t
 * ctypedef npy_ulonglong  ulonglong_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_intp       intp_t
 */
typedef npy_ulonglong __pyx_t_5numpy_ulonglong_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":755
 * ctypedef npy_ulonglong  ulonglong_t
 * 
 * ctypedef npy_intp       intp_t             # <<<<<<<<<<<<<<
 * ctypedef npy_uintp      uintp_t
 * 
 */
typedef npy_intp __pyx_t_5numpy_intp_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":756
 * 
 * ctypedef npy_intp       intp_t
 * ctypedef npy_uintp      uintp_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_double     float_t
 */
typedef npy_uintp __pyx_t_5numpy_uintp_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":758
 * ctypedef npy_uintp      uintp_t
 * 
 * ctypedef npy_double     float_t             # <<<<<<<<<<<<<<
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t
 */
typedef npy_double __pyx_t_5numpy_float_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":759
 * 
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t             # <<<<<<<<<<<<<<
 * ctypedef npy_longdouble longdouble_t
 * 
 */
typedef npy_double __pyx_t_5numpy_double_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":760
 * ctypedef npy_double     float_t
 * ctypedef npy_double     double_t
 * ctypedef npy_longdouble longdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cfloat      cfloat_t
 */
typedef npy_longdouble __pyx_t_5numpy_longdouble_t;
#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< float > __pyx_t_float_complex;
  #else
    typedef float _Complex __pyx_t_float_complex;
  #endif
#else
    typedef struct { float real, imag; } __pyx_t_float_complex;
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    typedef ::std::complex< double > __pyx_t_double_complex;
  #else
    typedef double _Complex __pyx_t_double_complex;
  #endif
#else
    typedef struct { double real, imag; } __pyx_t_double_complex;
#endif


/*--- Type declarations ---*/
struct __pyx_obj_6czelta_station;
struct __pyx_obj_6czelta_event;
struct __pyx_obj_6czelta_coincidence;
struct __pyx_obj_6czelta_event_reader;
struct __pyx_obj_6czelta_event_reader_runs;
struct __pyx_obj_6czelta_event_reader_run;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":762
 * ctypedef npy_longdouble longdouble_t
 * 
 * ctypedef npy_cfloat      cfloat_t             # <<<<<<<<<<<<<<
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t
 */
typedef npy_cfloat __pyx_t_5numpy_cfloat_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":763
 * 
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t             # <<<<<<<<<<<<<<
 * ctypedef npy_clongdouble clongdouble_t
 * 
 */
typedef npy_cdouble __pyx_t_5numpy_cdouble_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":764
 * ctypedef npy_cfloat      cfloat_t
 * ctypedef npy_cdouble     cdouble_t
 * ctypedef npy_clongdouble clongdouble_t             # <<<<<<<<<<<<<<
 * 
 * ctypedef npy_cdouble     complex_t
 */
typedef npy_clongdouble __pyx_t_5numpy_clongdouble_t;

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":766
 * ctypedef npy_clongdouble clongdouble_t
 * 
 * ctypedef npy_cdouble     complex_t             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 */
typedef npy_cdouble __pyx_t_5numpy_complex_t;
struct __pyx_opt_args_6czelta_12event_reader_save;
struct __pyx_opt_args_6czelta_12event_reader_number_of_events;

/* "czelta.pxd":35
 * 
 * 
 * ctypedef Station* p_Station             # <<<<<<<<<<<<<<
 * cdef extern from "station.h" namespace "Station" nogil:
 *     void addStation(Station)
 */
typedef Station *__pyx_t_6czelta_p_Station;

/* "czelta.pxd":224
 *     cpdef runs(self)
 *     cpdef load(self, path_to_file)
 *     cpdef save(self, path_to_file, bint x_events = ?)             # <<<<<<<<<<<<<<
 *     cpdef int number_of_events(self, int run = ?)
 *     cpdef int number_of_runs(self)
 */
struct __pyx_opt_args_6czelta_12event_reader_save {
  int __pyx_n;
  int x_events;
};

/* "czelta.pxd":225
 *     cpdef load(self, path_to_file)
 *     cpdef save(self, path_to_file, bint x_events = ?)
 *     cpdef int number_of_events(self, int run = ?)             # <<<<<<<<<<<<<<
 *     cpdef int number_of_runs(self)
 *     cpdef int measure_length(self)
 */
struct __pyx_opt_args_6czelta_12event_reader_number_of_events {
  int __pyx_n;
  int run;
};

/* "czelta.pxd":176
 * cpdef int date_to_timestamp(date)
 * 
 * cdef class station:             # <<<<<<<<<<<<<<
 *     cdef Station* st
 *     #property id
 */
struct __pyx_obj_6czelta_station {
  PyObject_HEAD
  struct __pyx_vtabstruct_6czelta_station *__pyx_vtab;
  Station *st;
};


/* "czelta.pxd":188
 * 
 * 
 * cdef class event:             # <<<<<<<<<<<<<<
 *     cdef Event e
 *     cdef void set(self, Event e)
 */
struct __pyx_obj_6czelta_event {
  PyObject_HEAD
  struct __pyx_vtabstruct_6czelta_event *__pyx_vtab;
  Event e;
};


/* "czelta.pxd":205
 *     cpdef set_station(self, station_id)
 * 
 * cdef class coincidence:             # <<<<<<<<<<<<<<
 *     cdef Coincidence c
 *     cdef int i
 */
struct __pyx_obj_6czelta_coincidence {
  PyObject_HEAD
  Coincidence c;
  int i;
};


/* "czelta.pxd":218
 *     #property overlap_measeure_time (total measure time)
 * 
 * cdef class event_reader:             # <<<<<<<<<<<<<<
 *     cdef EventReader er
 *     cdef int i
 */
struct __pyx_obj_6czelta_event_reader {
  PyObject_HEAD
  struct __pyx_vtabstruct_6czelta_event_reader *__pyx_vtab;
  EventReader er;
  int i;
};


/* "czelta.pxd":248
 * cdef bint _filter_func(Event& e)
 * 
 * cdef class event_reader_runs:             # <<<<<<<<<<<<<<
 *     cdef event_reader er
 *     cdef int i
 */
struct __pyx_obj_6czelta_event_reader_runs {
  PyObject_HEAD
  struct __pyx_obj_6czelta_event_reader *er;
  int i;
};


/* "czelta.pxd":253
 * 
 * 
 * cdef class event_reader_run:             # <<<<<<<<<<<<<<
 *     cdef event_reader er
 *     cdef int _run_id
 */
struct __pyx_obj_6czelta_event_reader_run {
  PyObject_HEAD
  struct __pyx_vtabstruct_6czelta_event_reader_run *__pyx_vtab;
  struct __pyx_obj_6czelta_event_reader *er;
  int _run_id;
  int i;
};



/* "/home/martin/Plocha/czelta-python/station.pxi":1
 * cdef class station:             # <<<<<<<<<<<<<<
 *     "Class for working with station data. On import it tries to load config_data.JSON (in python lib path and after failture in local directory."
 * 
 */

struct __pyx_vtabstruct_6czelta_station {
  PyObject *(*get_corrections)(struct __pyx_obj_6czelta_station *, int __pyx_skip_dispatch);
  PyObject *(*distance_to)(struct __pyx_obj_6czelta_station *, struct __pyx_obj_6czelta_station *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6czelta_station *__pyx_vtabptr_6czelta_station;


struct __pyx_vtabstruct_6czelta_event {
  void (*set)(struct __pyx_obj_6czelta_event *, Event);
  PyObject *(*set_station)(struct __pyx_obj_6czelta_event *, PyObject *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6czelta_event *__pyx_vtabptr_6czelta_event;


struct __pyx_vtabstruct_6czelta_event_reader {
  PyObject *(*run)(struct __pyx_obj_6czelta_event_reader *, int, int __pyx_skip_dispatch);
  PyObject *(*runs)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  PyObject *(*load)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch);
  PyObject *(*save)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6czelta_12event_reader_save *__pyx_optional_args);
  int (*number_of_events)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch, struct __pyx_opt_args_6czelta_12event_reader_number_of_events *__pyx_optional_args);
  int (*number_of_runs)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  int (*measure_length)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  Event (*c_item)(struct __pyx_obj_6czelta_event_reader *, int);
  struct __pyx_obj_6czelta_event *(*item)(struct __pyx_obj_6czelta_event_reader *, int, int __pyx_skip_dispatch);
  int (*measure_time)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  int (*flux)(struct __pyx_obj_6czelta_event_reader *, int, int, int __pyx_skip_dispatch);
  struct __pyx_obj_6czelta_station *(*get_station)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  PyObject *(*set_station)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch);
  int (*filter)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch);
  int (*filter_calibrations)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  int (*filter_maximum_TDC)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  int (*filter_maximum_ADC)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
  int (*filter_minimum_ADC)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6czelta_event_reader *__pyx_vtabptr_6czelta_event_reader;


/* "/home/martin/Plocha/czelta-python/event_reader.pxi":287
 * 
 * 
 * cdef class event_reader_run:             # <<<<<<<<<<<<<<
 *     def __init__(self, event_reader reader, int run_id):
 *         self.er = reader
 */

struct __pyx_vtabstruct_6czelta_event_reader_run {
  int (*run_id)(struct __pyx_obj_6czelta_event_reader_run *, int __pyx_skip_dispatch);
  int (*begin_index)(struct __pyx_obj_6czelta_event_reader_run *, int __pyx_skip_dispatch);
  int (*end_index)(struct __pyx_obj_6czelta_event_reader_run *, int __pyx_skip_dispatch);
};
static struct __pyx_vtabstruct_6czelta_event_reader_run *__pyx_vtabptr_6czelta_event_reader_run;
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname); /*proto*/
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          if (acquire_gil) { \
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure(); \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
              PyGILState_Release(__pyx_gilstate_save); \
          } else { \
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__); \
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil) \
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext() \
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif /* CYTHON_REFNANNY */
#define __Pyx_XDECREF_SET(r, v) do {                            \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_XDECREF(tmp);                              \
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {                             \
        PyObject *tmp = (PyObject *) r;                         \
        r = v; __Pyx_DECREF(tmp);                               \
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name); /*proto*/

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw); /*proto*/
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb); /*proto*/
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback); /*proto*/

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name); /*proto*/

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[], \
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args, \
    const char* function_name); /*proto*/

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found); /*proto*/

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause); /*proto*/

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static PyObject* __Pyx_PyObject_CallMethodTuple(PyObject* obj, PyObject* method_name, PyObject* args) {
    PyObject *method, *result = NULL;
    if (unlikely(!args)) return NULL;
    method = __Pyx_PyObject_GetAttrStr(obj, method_name);
    if (unlikely(!method)) goto bad;
    result = __Pyx_PyObject_Call(method, args, NULL);
    Py_DECREF(method);
bad:
    Py_DECREF(args);
    return result;
}
#define __Pyx_PyObject_CallMethod3(obj, name, arg1, arg2, arg3) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(3, arg1, arg2, arg3))
#define __Pyx_PyObject_CallMethod2(obj, name, arg1, arg2) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(2, arg1, arg2))
#define __Pyx_PyObject_CallMethod1(obj, name, arg1) \
    __Pyx_PyObject_CallMethodTuple(obj, name, PyTuple_Pack(1, arg1))
#define __Pyx_PyObject_CallMethod0(obj, name) \
    __Pyx_PyObject_CallMethodTuple(obj, name, (Py_INCREF(__pyx_empty_tuple), __pyx_empty_tuple))

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x); /*proto*/

static CYTHON_INLINE int __Pyx_PySequence_Contains(PyObject* item, PyObject* seq, int eq) {
    int result = PySequence_Contains(seq, item);
    return unlikely(result < 0) ? result : (result == (eq == Py_EQ));
}

#define __Pyx_GetItemInt(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Fast(o, (Py_ssize_t)i, is_list, wraparound, boundscheck) : \
    (is_list ? (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL) : \
               __Pyx_GetItemInt_Generic(o, to_py_func(i))))
#define __Pyx_GetItemInt_List(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_List_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "list index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
#define __Pyx_GetItemInt_Tuple(o, i, type, is_signed, to_py_func, is_list, wraparound, boundscheck) \
    (__Pyx_fits_Py_ssize_t(i, type, is_signed) ? \
    __Pyx_GetItemInt_Tuple_Fast(o, (Py_ssize_t)i, wraparound, boundscheck) : \
    (PyErr_SetString(PyExc_IndexError, "tuple index out of range"), (PyObject*)NULL))
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j);
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb); /*proto*/
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb); /*proto*/

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb); /*proto*/

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed); /*proto*/

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals); /*proto*/

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** py_start, PyObject** py_stop, PyObject** py_slice,
        int has_cstart, int has_cstop, int wraparound);

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type); /*proto*/

#if CYTHON_COMPILING_IN_CPYTHON
#define __Pyx_PyObject_DelAttrStr(o,n) __Pyx_PyObject_SetAttrStr(o,n,NULL)
static CYTHON_INLINE int __Pyx_PyObject_SetAttrStr(PyObject* obj, PyObject* attr_name, PyObject* value) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_setattro))
        return tp->tp_setattro(obj, attr_name, value);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_setattr))
        return tp->tp_setattr(obj, PyString_AS_STRING(attr_name), value);
#endif
    return PyObject_SetAttr(obj, attr_name, value);
}
#else
#define __Pyx_PyObject_DelAttrStr(o,n)   PyObject_DelAttr(o,n)
#define __Pyx_PyObject_SetAttrStr(o,n,v) PyObject_SetAttr(o,n,v)
#endif

static double __Pyx__PyObject_AsDouble(PyObject* obj); /* proto */
#if CYTHON_COMPILING_IN_PYPY
#define __Pyx_PyObject_AsDouble(obj) \
(likely(PyFloat_CheckExact(obj)) ? PyFloat_AS_DOUBLE(obj) : \
 likely(PyInt_CheckExact(obj)) ? \
 PyFloat_AsDouble(obj) : __Pyx__PyObject_AsDouble(obj))
#else
#define __Pyx_PyObject_AsDouble(obj) \
((likely(PyFloat_CheckExact(obj))) ? \
 PyFloat_AS_DOUBLE(obj) : __Pyx__PyObject_AsDouble(obj))
#endif

#ifndef __PYX_FORCE_INIT_THREADS
  #define __PYX_FORCE_INIT_THREADS 0
#endif

#if PY_MAJOR_VERSION >= 3
static PyObject *__Pyx_PyDict_GetItem(PyObject *d, PyObject* key) {
    PyObject *value;
    value = PyDict_GetItemWithError(d, key);
    if (unlikely(!value)) {
        if (!PyErr_Occurred()) {
            PyObject* args = PyTuple_Pack(1, key);
            if (likely(args))
                PyErr_SetObject(PyExc_KeyError, args);
            Py_XDECREF(args);
        }
        return NULL;
    }
    Py_INCREF(value);
    return value;
}
#else
    #define __Pyx_PyDict_GetItem(d, key) PyObject_GetItem(d, key)
#endif

static CYTHON_INLINE long __Pyx_div_long(long, long); /* proto */

#define UNARY_NEG_WOULD_OVERFLOW(x)            (((x) < 0) & ((unsigned long)(x) == 0-(unsigned long)(x)))

static CYTHON_INLINE int  __Pyx_GetBufferAndValidate(Py_buffer* buf, PyObject* obj,
    __Pyx_TypeInfo* dtype, int flags, int nd, int cast, __Pyx_BufFmt_StackElem* stack);
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info);

static CYTHON_INLINE int __Pyx_div_int(int, int); /* proto */

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname);

#define __Pyx_BufPtrStrided2d(type, buf, i0, s0, i1, s1) (type)((char*)buf + i0 * s0 + i1 * s1)
static CYTHON_INLINE long __Pyx_mod_long(long, long); /* proto */

static void __Pyx_RaiseBufferIndexError(int axis); /*proto*/

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type);

#define __Pyx_CyFunction_USED 1
#include <structmember.h>
#define __Pyx_CYFUNCTION_STATICMETHOD  0x01
#define __Pyx_CYFUNCTION_CLASSMETHOD   0x02
#define __Pyx_CYFUNCTION_CCLASS        0x04
#define __Pyx_CyFunction_GetClosure(f) \
    (((__pyx_CyFunctionObject *) (f))->func_closure)
#define __Pyx_CyFunction_GetClassObj(f) \
    (((__pyx_CyFunctionObject *) (f))->func_classobj)
#define __Pyx_CyFunction_Defaults(type, f) \
    ((type *)(((__pyx_CyFunctionObject *) (f))->defaults))
#define __Pyx_CyFunction_SetDefaultsGetter(f, g) \
    ((__pyx_CyFunctionObject *) (f))->defaults_getter = (g)
typedef struct {
    PyCFunctionObject func;
    PyObject *func_dict;
    PyObject *func_weakreflist;
    PyObject *func_name;
    PyObject *func_qualname;
    PyObject *func_doc;
    PyObject *func_globals;
    PyObject *func_code;
    PyObject *func_closure;
    PyObject *func_classobj; /* No-args super() class cell */
    void *defaults;
    int defaults_pyobjects;
    int flags;
    PyObject *defaults_tuple;   /* Const defaults tuple */
    PyObject *defaults_kwdict;  /* Const kwonly defaults dict */
    PyObject *(*defaults_getter)(PyObject *);
    PyObject *func_annotations; /* function annotations dict */
} __pyx_CyFunctionObject;
static PyTypeObject *__pyx_CyFunctionType = 0;
#define __Pyx_CyFunction_NewEx(ml, flags, qualname, self, module, globals, code) \
    __Pyx_CyFunction_New(__pyx_CyFunctionType, ml, flags, qualname, self, module, globals, code)
static PyObject *__Pyx_CyFunction_New(PyTypeObject *, PyMethodDef *ml,
                                      int flags, PyObject* qualname,
                                      PyObject *self,
                                      PyObject *module, PyObject *globals,
                                      PyObject* code);
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *m,
                                                         size_t size,
                                                         int pyobjects);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *m,
                                                            PyObject *tuple);
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *m,
                                                             PyObject *dict);
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *m,
                                                              PyObject *dict);
static int __Pyx_CyFunction_init(void);

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected);

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index);

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable); /*proto*/

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name); /*proto*/

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name); /*proto*/

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases);

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name, PyObject *qualname,
                                           PyObject *mkw, PyObject *modname, PyObject *doc); /*proto*/
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases, PyObject *dict,
                                      PyObject *mkw, int calculate_metaclass, int allow_py2_metaclass); /*proto*/

#include <new>

typedef struct {
  Py_ssize_t shape, strides, suboffsets;
} __Pyx_Buf_DimInfo;
typedef struct {
  size_t refcount;
  Py_buffer pybuffer;
} __Pyx_Buffer;
typedef struct {
  __Pyx_Buffer *rcbuffer;
  char *data;
  __Pyx_Buf_DimInfo diminfo[8];
} __Pyx_LocalBuf_ND;

#if PY_MAJOR_VERSION < 3
    static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags);
    static void __Pyx_ReleaseBuffer(Py_buffer *view);
#else
    #define __Pyx_GetBuffer PyObject_GetBuffer
    #define __Pyx_ReleaseBuffer PyBuffer_Release
#endif


static Py_ssize_t __Pyx_zeros[] = {0, 0, 0, 0, 0, 0, 0, 0};
static Py_ssize_t __Pyx_minusones[] = {-1, -1, -1, -1, -1, -1, -1, -1};

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level); /*proto*/

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *);

static int __Pyx_Print(PyObject*, PyObject *, int); /*proto*/
#if CYTHON_COMPILING_IN_PYPY || PY_MAJOR_VERSION >= 3
static PyObject* __pyx_print = 0;
static PyObject* __pyx_print_kwargs = 0;
#endif

static int __Pyx_PrintOne(PyObject* stream, PyObject *o); /*proto*/

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    #define __Pyx_CREAL(z) ((z).real())
    #define __Pyx_CIMAG(z) ((z).imag())
  #else
    #define __Pyx_CREAL(z) (__real__(z))
    #define __Pyx_CIMAG(z) (__imag__(z))
  #endif
#else
    #define __Pyx_CREAL(z) ((z).real)
    #define __Pyx_CIMAG(z) ((z).imag)
#endif
#if (defined(_WIN32) || defined(__clang__)) && defined(__cplusplus) && CYTHON_CCOMPLEX
    #define __Pyx_SET_CREAL(z,x) ((z).real(x))
    #define __Pyx_SET_CIMAG(z,y) ((z).imag(y))
#else
    #define __Pyx_SET_CREAL(z,x) __Pyx_CREAL(z) = (x)
    #define __Pyx_SET_CIMAG(z,y) __Pyx_CIMAG(z) = (y)
#endif

static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float, float);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eqf(a, b)   ((a)==(b))
    #define __Pyx_c_sumf(a, b)  ((a)+(b))
    #define __Pyx_c_difff(a, b) ((a)-(b))
    #define __Pyx_c_prodf(a, b) ((a)*(b))
    #define __Pyx_c_quotf(a, b) ((a)/(b))
    #define __Pyx_c_negf(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zerof(z) ((z)==(float)0)
    #define __Pyx_c_conjf(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_absf(z)     (::std::abs(z))
        #define __Pyx_c_powf(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zerof(z) ((z)==0)
    #define __Pyx_c_conjf(z)    (conjf(z))
    #if 1
        #define __Pyx_c_absf(z)     (cabsf(z))
        #define __Pyx_c_powf(a, b)  (cpowf(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex, __pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex);
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex);
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex);
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex);
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex, __pyx_t_float_complex);
    #endif
#endif

static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double, double);

#if CYTHON_CCOMPLEX
    #define __Pyx_c_eq(a, b)   ((a)==(b))
    #define __Pyx_c_sum(a, b)  ((a)+(b))
    #define __Pyx_c_diff(a, b) ((a)-(b))
    #define __Pyx_c_prod(a, b) ((a)*(b))
    #define __Pyx_c_quot(a, b) ((a)/(b))
    #define __Pyx_c_neg(a)     (-(a))
  #ifdef __cplusplus
    #define __Pyx_c_is_zero(z) ((z)==(double)0)
    #define __Pyx_c_conj(z)    (::std::conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (::std::abs(z))
        #define __Pyx_c_pow(a, b)  (::std::pow(a, b))
    #endif
  #else
    #define __Pyx_c_is_zero(z) ((z)==0)
    #define __Pyx_c_conj(z)    (conj(z))
    #if 1
        #define __Pyx_c_abs(z)     (cabs(z))
        #define __Pyx_c_pow(a, b)  (cpow(a, b))
    #endif
 #endif
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex, __pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex);
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex);
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex);
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex);
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex, __pyx_t_double_complex);
    #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig); /*proto*/

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig); /*proto*/

#if !defined(__Pyx_PyIdentifier_FromString)
#if PY_MAJOR_VERSION < 3
  #define __Pyx_PyIdentifier_FromString(s) PyString_FromString(s)
#else
  #define __Pyx_PyIdentifier_FromString(s) PyUnicode_FromString(s)
#endif
#endif

static PyObject *__Pyx_ImportModule(const char *name); /*proto*/

static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name, size_t size, int strict);  /*proto*/

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename); /*proto*/

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t); /*proto*/


/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'cpython.buffer' */

/* Module declarations from 'cpython.ref' */

/* Module declarations from 'libc.stdio' */

/* Module declarations from 'cpython.object' */

/* Module declarations from '__builtin__' */

/* Module declarations from 'cpython.type' */
static PyTypeObject *__pyx_ptype_7cpython_4type_type = 0;

/* Module declarations from 'libc.stdlib' */

/* Module declarations from 'numpy' */

/* Module declarations from 'numpy' */
static PyTypeObject *__pyx_ptype_5numpy_dtype = 0;
static PyTypeObject *__pyx_ptype_5numpy_flatiter = 0;
static PyTypeObject *__pyx_ptype_5numpy_broadcast = 0;
static PyTypeObject *__pyx_ptype_5numpy_ndarray = 0;
static PyTypeObject *__pyx_ptype_5numpy_ufunc = 0;
static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *, char *, char *, int *); /*proto*/

/* Module declarations from 'libc.math' */

/* Module declarations from 'cython' */

/* Module declarations from 'czelta' */
static PyTypeObject *__pyx_ptype_6czelta_station = 0;
static PyTypeObject *__pyx_ptype_6czelta_event = 0;
static PyTypeObject *__pyx_ptype_6czelta_coincidence = 0;
static PyTypeObject *__pyx_ptype_6czelta_event_reader = 0;
static PyTypeObject *__pyx_ptype_6czelta_event_reader_runs = 0;
static PyTypeObject *__pyx_ptype_6czelta_event_reader_run = 0;
static struct __pyx_obj_6czelta_event *__pyx_v_6czelta__filter_func_event = 0;
static PyObject *__pyx_v_6czelta__filter_func_object = 0;
static int __pyx_f_6czelta_date_to_timestamp(PyObject *, int __pyx_skip_dispatch); /*proto*/
static int __pyx_f_6czelta__filter_func(Event &); /*proto*/
static double __pyx_f_6czelta_delta_dir(float, float, float, float); /*proto*/
static std::string __pyx_convert_string_from_py_(PyObject *); /*proto*/
static PyObject *__pyx_convert_string_to_py_(const std::string &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double> &); /*proto*/
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_double_t = { "double_t", NULL, sizeof(__pyx_t_5numpy_double_t), { 0 }, 0, 'R', 0, 0 };
static __Pyx_TypeInfo __Pyx_TypeInfo_nn___pyx_t_5numpy_int_t = { "int_t", NULL, sizeof(__pyx_t_5numpy_int_t), { 0 }, 0, IS_UNSIGNED(__pyx_t_5numpy_int_t) ? 'U' : 'I', IS_UNSIGNED(__pyx_t_5numpy_int_t), 0 };
#define __Pyx_MODULE_NAME "czelta"
int __pyx_module_is_main_czelta = 0;

/* Implementation of 'czelta' */
static PyObject *__pyx_builtin_staticmethod;
static PyObject *__pyx_builtin_open;
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static PyObject *__pyx_builtin_Warning;
static PyObject *__pyx_builtin_TypeError;
static PyObject *__pyx_builtin_StopIteration;
static PyObject *__pyx_builtin_AttributeError;
static PyObject *__pyx_builtin_IndexError;
static PyObject *__pyx_builtin_NotImplementedError;
static PyObject *__pyx_builtin_IOError;
static PyObject *__pyx_builtin_ValueError;
static PyObject *__pyx_builtin_sum;
static PyObject *__pyx_pf_6czelta_date_to_timestamp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d); /* proto */
static int __pyx_pf_6czelta_7station___init__(struct __pyx_obj_6czelta_station *__pyx_v_self, PyObject *__pyx_v_station); /* proto */
static PyObject *__pyx_pf_6czelta_7station_2id___get__(struct __pyx_obj_6czelta_station *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_7station_4name___get__(struct __pyx_obj_6czelta_station *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_7station_17detector_position___get__(struct __pyx_obj_6czelta_station *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_7station_12gps_position___get__(struct __pyx_obj_6czelta_station *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_7station_2distance_to(struct __pyx_obj_6czelta_station *__pyx_v_self, struct __pyx_obj_6czelta_station *__pyx_v_other_station); /* proto */
static PyObject *__pyx_pf_6czelta_7station_4get_corrections(struct __pyx_obj_6czelta_station *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_7station_6load(PyObject *__pyx_v_file); /* proto */
static PyObject *__pyx_pf_6czelta_7station_8get_stations(); /* proto */
static int __pyx_pf_6czelta_5event___init__(CYTHON_UNUSED struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_2__str__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_9timestamp___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_8datetime___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_17time_since_second___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_3ADC___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_3TDC___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_13TDC_corrected___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_14temps_detector___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_10temp_crate___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_11calibration___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_12AH_direction___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_13RAD_direction___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_7station___get__(struct __pyx_obj_6czelta_event *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_5event_4set_station(struct __pyx_obj_6czelta_event *__pyx_v_self, PyObject *__pyx_v_station_id); /* proto */
static int __pyx_pf_6czelta_11coincidence___init__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self, PyObject *__pyx_v_event_readers, float __pyx_v_max_difference, int __pyx_v_save_events, PyObject *__pyx_v_stations); /* proto */
static Py_ssize_t __pyx_pf_6czelta_11coincidence_2__len__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_4__getitem__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_6__iter__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_8__next__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_5delta___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_8stations___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_6events___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_14max_difference___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_22number_of_coincidences___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_14expected_value___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_6chance___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_20overlap_measure_time___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_21overlap_normal_events___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_11coincidence_26overlap_calibration_events___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self); /* proto */
static int __pyx_pf_6czelta_12event_reader___init__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path); /* proto */
static Py_ssize_t __pyx_pf_6czelta_12event_reader_2__len__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_4__getitem__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_6__iter__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_8__next__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_10run(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_run_id); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_12runs(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_14load(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path_to_file); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_16save(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path_to_file, int __pyx_v_x_events); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_18get_station(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_20flux(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v__from, int __pyx_v_to); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_22set_station(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_st); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_24number_of_events(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_run); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_26number_of_runs(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_28measure_length(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_30item(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_i); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_32measure_time(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_34filter(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_filter_func); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_36filter_calibrations(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_38filter_maximum_TDC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_40filter_maximum_ADC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_12event_reader_42filter_minimum_ADC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self); /* proto */
static int __pyx_pf_6czelta_17event_reader_runs___init__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self, struct __pyx_obj_6czelta_event_reader *__pyx_v_reader); /* proto */
static PyObject *__pyx_pf_6czelta_17event_reader_runs_2__str__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_17event_reader_runs_4__iter__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_17event_reader_runs_6__next__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6czelta_17event_reader_runs_8__len__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_17event_reader_runs_10__getitem__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static int __pyx_pf_6czelta_16event_reader_run___init__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, struct __pyx_obj_6czelta_event_reader *__pyx_v_reader, int __pyx_v_run_id); /* proto */
static PyObject *__pyx_pf_6czelta_16event_reader_run_2__iter__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_16event_reader_run_4__next__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self); /* proto */
static Py_ssize_t __pyx_pf_6czelta_16event_reader_run_6__len__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_16event_reader_run_8__getitem__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, PyObject *__pyx_v_i); /* proto */
static PyObject *__pyx_pf_6czelta_16event_reader_run_10run_id(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_16event_reader_run_12begin_index(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_16event_reader_run_14end_index(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_9MeteoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_begin); /* proto */
static PyObject *__pyx_pf_6czelta_9MeteoData_2__iter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_9MeteoData_4__next__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_9MeteoData_6next(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_9MeteoData_8loadfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_6czelta_2mapa_smeru(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_citlivost, PyObject *__pyx_v_f, PyObject *__pyx_v_path, int __pyx_v_scale, float __pyx_v_mm, float __pyx_v_b); /* proto */
static PyObject *__pyx_pf_6czelta_10moon_check_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e); /* proto */
static PyObject *__pyx_pf_6czelta_4moon_check(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED double __pyx_v_citlivost, PyObject *__pyx_v_path, PyObject *__pyx_v_filter); /* proto */
static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /* proto */
static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info); /* proto */
static PyObject *__pyx_tp_new_6czelta_station(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6czelta_event(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6czelta_coincidence(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6czelta_event_reader(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6czelta_event_reader_runs(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_6czelta_event_reader_run(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static char __pyx_k_B[] = "B";
static char __pyx_k_D[] = "D";
static char __pyx_k_F[] = "\033[F";
static char __pyx_k_H[] = "H";
static char __pyx_k_I[] = "I";
static char __pyx_k_K[] = "\033[K";
static char __pyx_k_L[] = "L";
static char __pyx_k_O[] = "O";
static char __pyx_k_Q[] = "Q";
static char __pyx_k_b[] = "b";
static char __pyx_k_d[] = "d";
static char __pyx_k_e[] = "e";
static char __pyx_k_f[] = "f";
static char __pyx_k_g[] = "g";
static char __pyx_k_h[] = "h";
static char __pyx_k_i[] = "i";
static char __pyx_k_j[] = "j";
static char __pyx_k_k[] = "k";
static char __pyx_k_l[] = "l";
static char __pyx_k_m[] = "m";
static char __pyx_k_q[] = "q";
static char __pyx_k_s[] = "s";
static char __pyx_k_t[] = "t";
static char __pyx_k_x[] = "x";
static char __pyx_k_y[] = "y";
static char __pyx_k_ID[] = "ID";
static char __pyx_k_JD[] = "JD";
static char __pyx_k_RA[] = "RA";
static char __pyx_k_Zd[] = "Zd";
static char __pyx_k_Zf[] = "Zf";
static char __pyx_k_Zg[] = "Zg";
static char __pyx_k__4[] = "";
static char __pyx_k__6[] = "~";
static char __pyx_k_dt[] = "dt";
static char __pyx_k_er[] = "er";
static char __pyx_k_id[] = "id";
static char __pyx_k_me[] = "me";
static char __pyx_k_mm[] = "mm";
static char __pyx_k_mt[] = "mt";
static char __pyx_k_np[] = "np";
static char __pyx_k_ob[] = "ob";
static char __pyx_k_os[] = "os";
static char __pyx_k_st[] = "st";
static char __pyx_k_to[] = "to";
static char __pyx_k_x2[] = "x2";
static char __pyx_k_xx[] = "xx";
static char __pyx_k_y2[] = "y2";
static char __pyx_k_y4[] = "y4";
static char __pyx_k_yy[] = "yy";
static char __pyx_k_0_1[] = "0.1";
static char __pyx_k__15[] = " ";
static char __pyx_k_all[] = "__all__";
static char __pyx_k_cfg[] = "cfg";
static char __pyx_k_dat[] = ".dat";
static char __pyx_k_day[] = "day";
static char __pyx_k_dir[] = "dir";
static char __pyx_k_doc[] = "__doc__";
static char __pyx_k_dy2[] = "dy2";
static char __pyx_k_end[] = "end";
static char __pyx_k_i_i[] = "%i/%i";
static char __pyx_k_int[] = "int";
static char __pyx_k_pos[] = "pos";
static char __pyx_k_rtn[] = "rtn";
static char __pyx_k_run[] = "run";
static char __pyx_k_sep[] = "sep";
static char __pyx_k_sts[] = "sts";
static char __pyx_k_sum[] = "sum";
static char __pyx_k_sys[] = "sys";
static char __pyx_k_tdc[] = "tdc";
static char __pyx_k_txt[] = ".txt";
static char __pyx_k_data[] = "data";
static char __pyx_k_file[] = "file";
static char __pyx_k_flux[] = "flux";
static char __pyx_k_from[] = "from";
static char __pyx_k_hour[] = "hour";
static char __pyx_k_init[] = "__init__";
static char __pyx_k_item[] = "item";
static char __pyx_k_iter[] = "__iter__";
static char __pyx_k_json[] = "json";
static char __pyx_k_line[] = "line";
static char __pyx_k_load[] = "load";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_moon[] = "moon";
static char __pyx_k_name[] = "name";
static char __pyx_k_next[] = "next";
static char __pyx_k_null[] = "null";
static char __pyx_k_open[] = "open";
static char __pyx_k_path[] = "path";
static char __pyx_k_runs[] = "runs";
static char __pyx_k_save[] = "save";
static char __pyx_k_self[] = "self";
static char __pyx_k_sqrt[] = "sqrt";
static char __pyx_k_step[] = "step";
static char __pyx_k_stop[] = "stop";
static char __pyx_k_temp[] = "temp";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_time[] = "time";
static char __pyx_k_vals[] = "vals";
static char __pyx_k_year[] = "year";
static char __pyx_k_begin[] = "begin";
static char __pyx_k_close[] = "close";
static char __pyx_k_dtype[] = "dtype";
static char __pyx_k_e_dir[] = "e_dir";
static char __pyx_k_event[] = "event";
static char __pyx_k_index[] = "index";
static char __pyx_k_lower[] = "lower";
static char __pyx_k_meteo[] = "meteo";
static char __pyx_k_month[] = "month";
static char __pyx_k_numpy[] = "numpy";
static char __pyx_k_print[] = "print";
static char __pyx_k_pylab[] = "pylab";
static char __pyx_k_range[] = "range";
static char __pyx_k_ratio[] = "ratio";
static char __pyx_k_scale[] = "scale";
static char __pyx_k_split[] = "split";
static char __pyx_k_start[] = "start";
static char __pyx_k_times[] = "times";
static char __pyx_k_write[] = "write";
static char __pyx_k_zenit[] = "zenit";
static char __pyx_k_zeros[] = "zeros";
static char __pyx_k_append[] = "append";
static char __pyx_k_author[] = "__author__";
static char __pyx_k_czelta[] = "czelta";
static char __pyx_k_decode[] = "decode";
static char __pyx_k_deltas[] = "deltas";
static char __pyx_k_double[] = "double";
static char __pyx_k_encode[] = "encode";
static char __pyx_k_extent[] = "extent";
static char __pyx_k_filter[] = "filter";
static char __pyx_k_flux_s[] = "flux_s";
static char __pyx_k_fluxes[] = "fluxes";
static char __pyx_k_from_2[] = "_from";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_length[] = "length";
static char __pyx_k_minute[] = "minute";
static char __pyx_k_module[] = "__module__";
static char __pyx_k_name_2[] = ", name: ";
static char __pyx_k_next_2[] = "__next__";
static char __pyx_k_reader[] = "reader";
static char __pyx_k_result[] = "result";
static char __pyx_k_run_id[] = "run_id";
static char __pyx_k_second[] = "second";
static char __pyx_k_source[] = "source";
static char __pyx_k_stdout[] = "stdout";
static char __pyx_k_IOError[] = "IOError";
static char __pyx_k_Warning[] = "Warning";
static char __pyx_k_flux_tm[] = "flux_tm";
static char __pyx_k_os_path[] = "os.path";
static char __pyx_k_prepare[] = "__prepare__";
static char __pyx_k_st_name[] = "st_name";
static char __pyx_k_station[] = "station";
static char __pyx_k_version[] = "__version__";
static char __pyx_k_avg_flux[] = "avg_flux";
static char __pyx_k_datetime[] = "datetime";
static char __pyx_k_expected[] = "expected";
static char __pyx_k_flux_sum[] = "flux_sum";
static char __pyx_k_from_cor[] = "from_cor";
static char __pyx_k_loadfile[] = "loadfile";
static char __pyx_k_maxdelta[] = "maxdelta";
static char __pyx_k_opava_mg[] = "opava_mg";
static char __pyx_k_opava_su[] = "opava_su";
static char __pyx_k_pressure[] = "pressure";
static char __pyx_k_pyx_capi[] = "__pyx_capi__";
static char __pyx_k_qualname[] = "__qualname__";
static char __pyx_k_stations[] = "stations";
static char __pyx_k_x_events[] = "x_events";
static char __pyx_k_MeteoData[] = "MeteoData";
static char __pyx_k_TypeError[] = "TypeError";
static char __pyx_k_citlivost[] = "citlivost";
static char __pyx_k_distutils[] = "distutils";
static char __pyx_k_end_index[] = "end_index";
static char __pyx_k_file_iter[] = "file_iter";
static char __pyx_k_file_year[] = "file_year";
static char __pyx_k_flux_tm_l[] = "flux_tm_l";
static char __pyx_k_measuredt[] = "measuredt";
static char __pyx_k_metaclass[] = "__metaclass__";
static char __pyx_k_print_exc[] = "print_exc";
static char __pyx_k_sysconfig[] = "sysconfig";
static char __pyx_k_timestamp[] = "timestamp";
static char __pyx_k_traceback[] = "traceback";
static char __pyx_k_IndexError[] = "IndexError";
static char __pyx_k_ValueError[] = "ValueError";
static char __pyx_k_correction[] = "correction";
static char __pyx_k_data_error[] = "data_error";
static char __pyx_k_expanduser[] = "expanduser";
static char __pyx_k_file_month[] = "file_month";
static char __pyx_k_mapa_smeru[] = "mapa_smeru";
static char __pyx_k_moon_check[] = "moon_check";
static char __pyx_k_opava_zsbn[] = "opava_zsbn";
static char __pyx_k_praha_utef[] = "praha_utef";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_timestamps[] = "timestamps";
static char __pyx_k_GPSposition[] = "GPSposition";
static char __pyx_k_begin_index[] = "begin_index";
static char __pyx_k_coincidence[] = "coincidence";
static char __pyx_k_distance_to[] = "distance_to";
static char __pyx_k_flux_length[] = "flux_length";
static char __pyx_k_get_station[] = "get_station";
static char __pyx_k_relative_az[] = "relative_az";
static char __pyx_k_s_i_02i_txt[] = "%s%i-%02i.txt";
static char __pyx_k_save_events[] = "save_events";
static char __pyx_k_set_station[] = "set_station";
static char __pyx_k_AH_direction[] = "AH_direction";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_detectorsPos[] = "detectorsPos";
static char __pyx_k_event_reader[] = "event_reader";
static char __pyx_k_get_stations[] = "get_stations";
static char __pyx_k_gps_position[] = "gps_position";
static char __pyx_k_measure_time[] = "measure_time";
static char __pyx_k_pardubice_gd[] = "pardubice_gd";
static char __pyx_k_path_to_file[] = "path_to_file";
static char __pyx_k_pressure_cor[] = "pressure_cor";
static char __pyx_k_relative_alt[] = "relative_alt";
static char __pyx_k_result_error[] = "result_error";
static char __pyx_k_result_sigma[] = "result_sigma";
static char __pyx_k_source_error[] = "source_error";
static char __pyx_k_staticmethod[] = "staticmethod";
static char __pyx_k_RAD_direction[] = "RAD_direction";
static char __pyx_k_StopIteration[] = "StopIteration";
static char __pyx_k_TDCCorrection[] = "TDCCorrection";
static char __pyx_k_event_readers[] = "event_readers";
static char __pyx_k_multiplyarray[] = "multiplyarray";
static char __pyx_k_AttributeError[] = "AttributeError";
static char __pyx_k_Get_all_events[] = "Get all events.";
static char __pyx_k_MeteoData_next[] = "MeteoData.next";
static char __pyx_k_expected_error[] = "expected_error";
static char __pyx_k_get_python_lib[] = "get_python_lib";
static char __pyx_k_max_difference[] = "max_difference";
static char __pyx_k_measure_length[] = "measure_length";
static char __pyx_k_number_of_runs[] = "number_of_runs";
static char __pyx_k_pardubice_spse[] = "pardubice_spse";
static char __pyx_k_get_corrections[] = "get_corrections";
static char __pyx_k_system_encoding[] = "system_encoding";
static char __pyx_k_MeteoData___init[] = "MeteoData.__init__";
static char __pyx_k_MeteoData___iter[] = "MeteoData.__iter__";
static char __pyx_k_MeteoData___next[] = "MeteoData.__next__";
static char __pyx_k_can_t_write_file[] = "can't write file: ";
static char __pyx_k_config_data_JSON[] = "config_data.JSON";
static char __pyx_k_number_of_events[] = "number_of_events";
static char __pyx_k_utcfromtimestamp[] = "utcfromtimestamp";
static char __pyx_k_date_to_timestamp[] = "date_to_timestamp";
static char __pyx_k_filter_func_event[] = "_filter_func_event";
static char __pyx_k_MeteoData_loadfile[] = "MeteoData.loadfile";
static char __pyx_k_filter_func_object[] = "_filter_func_object";
static char __pyx_k_filter_maximum_ADC[] = "filter_maximum_ADC";
static char __pyx_k_filter_maximum_TDC[] = "filter_maximum_TDC";
static char __pyx_k_filter_minimum_ADC[] = "filter_minimum_ADC";
static char __pyx_k_NotImplementedError[] = "NotImplementedError";
static char __pyx_k_distutils_sysconfig[] = "distutils.sysconfig";
static char __pyx_k_filter_calibrations[] = "filter_calibrations";
static char __pyx_k_moon_check_locals_f[] = "moon_check.<locals>.f";
static char __pyx_k_getfilesystemencoding[] = "getfilesystemencoding";
static char __pyx_k_step_can_t_be_defined[] = "step can't be defined";
static char __pyx_k_Unknown_type_of_station[] = "Unknown type of station";
static char __pyx_k_can_t_open_or_read_file[] = "can't open or read file: ";
static char __pyx_k_data_pardubice_spse_dat[] = "~/data/pardubice_spse.dat";
static char __pyx_k_ndarray_is_not_C_contiguous[] = "ndarray is not C contiguous";
static char __pyx_k_Total_time_of_overlap_measure[] = "Total time of overlap measure.";
static char __pyx_k_Get_number_of_coincidences_same[] = "Get number of coincidences, same effetct have ``len(coincidence)''.";
static char __pyx_k_Number_of_calibration_events_on[] = "Number of calibration events on invidual stations.";
static char __pyx_k_Return_3_temps_of_each_detector[] = "Return 3 temps of each detector in time of event.";
static char __pyx_k_Return_position_of_detectors_in[] = "Return position of detectors in format ``(x1, y1, x2, y2)`` where ``x1`` and ``y1`` are relative position of detector 1 to detector 0. ``x2`` and ``y2`` are relative position of detector 2 to detector 0. All values are in metres.";
static char __pyx_k_Return_station_id_probably_same[] = "Return `station id`, probably same as on czelta website.";
static char __pyx_k_Returns_GPS_position_of_station[] = "Returns GPS position of station. Return ``(latitude, longitude)`` or ``None`` if gps_position is not defined.";
static char __pyx_k_czelta_event_reader_runs_object[] = "<czelta.event_reader_runs object with %i runs from event_reader: %s>";
static char __pyx_k_home_martin_Plocha_czelta_pytho[] = "/home/martin/Plocha/czelta-python/my_analysis.pxi";
static char __pyx_k_home_martin_data_Meteodata_Opav[] = "/home/martin/data/Meteodata/Opava/Meteodata_LKMT_";
static char __pyx_k_home_martin_data_Meteodata_Pard[] = "/home/martin/data/Meteodata/Pardubice/Meteodata_LKPD_";
static char __pyx_k_home_martin_data_Meteodata_Prah[] = "/home/martin/data/Meteodata/Praha/Meteodata_LKPR_";
static char __pyx_k_path_must_be_a_file_with_txt_or[] = "path must be a file with .txt or .dat";
static char __pyx_k_unknown_dtype_code_in_numpy_pxd[] = "unknown dtype code in numpy.pxd (%d)";
static char __pyx_k_Calibration_events_are_events_ac[] = "Calibration events are events actived by LED diod in each detectors.";
static char __pyx_k_Chance_of_finding_len_coincidenc[] = "Chance of finding ``len(coincidence)`` based on ``expected_value``.";
static char __pyx_k_Format_string_allocated_too_shor[] = "Format string allocated too short, see comment in numpy.pxd";
static char __pyx_k_Get_stations_used_to_calculate_d[] = "Get stations used to calculate direction of triple-coincidence.";
static char __pyx_k_Martin_Quarda_hinogary_gmail_com[] = "Martin Quarda <hinogary@gmail.com>";
static char __pyx_k_Non_native_byte_order_not_suppor[] = "Non-native byte order not supported";
static char __pyx_k_Number_of_normal_events_on_invid[] = "Number of normal events on invidual stations.";
static char __pyx_k_Number_of_random_coincidences_ex[] = "Number of random coincidences expected.";
static char __pyx_k_Relative_energy_absorbed_in_each[] = "Relative energy absorbed in each detector. Probably not comparable along different stations. Minimum value is 0 and Maximum is 2047. If it is 2047 it shloud be more.";
static char __pyx_k_Relative_time_of_activation_each[] = "Relative time of activation each detector. TDC*25/1e12 = sec. Format: ``(TDC0, TDC1, TDC2)``.";
static char __pyx_k_Return_Temperature_in_crate_in_t[] = "Return Temperature in crate in time of event.";
static char __pyx_k_Return_all_deltas_of_coincidence[] = "Return all deltas of coincidences.";
static char __pyx_k_Return_code_name_of_station_Exam[] = "Return code name of station. Example: ``'praha_utef'``, ``'pardubice_gd'`` or similar.";
static char __pyx_k_Return_horizon_azimuth_direction[] = "Return ``(horizon, azimuth)`` direction of shower. Azimuth is from south clockwise. Both values are in Degres. Must have loaded info about stations and set station for ``event``/``event_reader``";
static char __pyx_k_Return_python_datetime_http_docs[] = "Return python `datetime <http://docs.python.org/2/library/datetime.html>`_ object. All times with Czelta is in UTC.";
static char __pyx_k_Return_right_ascension_declinati[] = "Return ``(right ascension, declination)`` direction of shower in Degrees. Must have loaded info about stations and set station for ``event``/``event_reader``";
static char __pyx_k_Return_time_elapsed_since_last_s[] = "Return time elapsed since last second (0-0.999999... sec).";
static char __pyx_k_Return_used_limit_between_coinci[] = "Return used limit between coincidences.";
static char __pyx_k_Station_can_t_be_added_bad_forma[] = "Station can't be added, bad format of JSON, id: ";
static char __pyx_k_Station_not_exist_have_you_loade[] = "Station not exist, have you loaded config file?";
static char __pyx_k_You_have_calculated_coincidences[] = "You have calculated coincidences without events";
static char __pyx_k_function_must_have_one_parameter[] = "function must have one parameter (czelta.event)";
static char __pyx_k_ndarray_is_not_Fortran_contiguou[] = "ndarray is not Fortran contiguous";
static char __pyx_k_timestamp_of_event_fastest_way_t[] = "timestamp of event, fastest way to get time of event.";
static char __pyx_k_home_martin_Plocha_czelta_pytho_2[] = "/home/martin/Plocha/czelta-python/station.pxi";
static char __pyx_k_Format_string_allocated_too_shor_2[] = "Format string allocated too short.";
static char __pyx_k_Relative_time_of_activation_each_2[] = "Relative time of activation each detector. Corrected and can be used to calculate diraction. Correction options are in `config_data.JSON`. TDC*25/1e12 = sec.";
static PyObject *__pyx_kp_s_0_1;
static PyObject *__pyx_n_s_AH_direction;
static PyObject *__pyx_n_s_AttributeError;
static PyObject *__pyx_n_s_D;
static PyObject *__pyx_kp_s_F;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor;
static PyObject *__pyx_kp_u_Format_string_allocated_too_shor_2;
static PyObject *__pyx_n_s_GPSposition;
static PyObject *__pyx_n_s_ID;
static PyObject *__pyx_n_s_IOError;
static PyObject *__pyx_n_s_IndexError;
static PyObject *__pyx_n_s_JD;
static PyObject *__pyx_kp_s_K;
static PyObject *__pyx_kp_s_Martin_Quarda_hinogary_gmail_com;
static PyObject *__pyx_n_s_MeteoData;
static PyObject *__pyx_n_s_MeteoData___init;
static PyObject *__pyx_n_s_MeteoData___iter;
static PyObject *__pyx_n_s_MeteoData___next;
static PyObject *__pyx_n_s_MeteoData_loadfile;
static PyObject *__pyx_n_s_MeteoData_next;
static PyObject *__pyx_kp_u_Non_native_byte_order_not_suppor;
static PyObject *__pyx_n_s_NotImplementedError;
static PyObject *__pyx_n_s_RA;
static PyObject *__pyx_n_s_RAD_direction;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_kp_s_Station_can_t_be_added_bad_forma;
static PyObject *__pyx_kp_s_Station_not_exist_have_you_loade;
static PyObject *__pyx_n_s_StopIteration;
static PyObject *__pyx_n_s_TDCCorrection;
static PyObject *__pyx_n_s_TypeError;
static PyObject *__pyx_kp_s_Unknown_type_of_station;
static PyObject *__pyx_n_s_ValueError;
static PyObject *__pyx_n_s_Warning;
static PyObject *__pyx_kp_s_You_have_calculated_coincidences;
static PyObject *__pyx_kp_s__15;
static PyObject *__pyx_kp_s__4;
static PyObject *__pyx_kp_s__6;
static PyObject *__pyx_n_s_all;
static PyObject *__pyx_n_s_append;
static PyObject *__pyx_n_s_author;
static PyObject *__pyx_n_s_avg_flux;
static PyObject *__pyx_n_s_b;
static PyObject *__pyx_n_s_begin;
static PyObject *__pyx_n_s_begin_index;
static PyObject *__pyx_kp_s_can_t_open_or_read_file;
static PyObject *__pyx_kp_s_can_t_write_file;
static PyObject *__pyx_n_s_cfg;
static PyObject *__pyx_n_s_citlivost;
static PyObject *__pyx_n_s_close;
static PyObject *__pyx_n_s_coincidence;
static PyObject *__pyx_kp_s_config_data_JSON;
static PyObject *__pyx_n_s_correction;
static PyObject *__pyx_n_s_czelta;
static PyObject *__pyx_kp_s_czelta_event_reader_runs_object;
static PyObject *__pyx_n_s_d;
static PyObject *__pyx_kp_b_dat;
static PyObject *__pyx_n_s_data;
static PyObject *__pyx_n_s_data_error;
static PyObject *__pyx_kp_s_data_pardubice_spse_dat;
static PyObject *__pyx_n_s_date_to_timestamp;
static PyObject *__pyx_n_s_datetime;
static PyObject *__pyx_n_s_day;
static PyObject *__pyx_n_s_decode;
static PyObject *__pyx_n_s_deltas;
static PyObject *__pyx_n_s_detectorsPos;
static PyObject *__pyx_n_s_dir;
static PyObject *__pyx_n_s_distance_to;
static PyObject *__pyx_n_s_distutils;
static PyObject *__pyx_n_s_distutils_sysconfig;
static PyObject *__pyx_n_s_doc;
static PyObject *__pyx_n_s_double;
static PyObject *__pyx_n_s_dt;
static PyObject *__pyx_n_s_dtype;
static PyObject *__pyx_n_s_dy2;
static PyObject *__pyx_n_s_e;
static PyObject *__pyx_n_s_e_dir;
static PyObject *__pyx_n_s_encode;
static PyObject *__pyx_n_s_end;
static PyObject *__pyx_n_s_end_index;
static PyObject *__pyx_n_s_er;
static PyObject *__pyx_n_s_event;
static PyObject *__pyx_n_s_event_reader;
static PyObject *__pyx_n_s_event_readers;
static PyObject *__pyx_n_s_expanduser;
static PyObject *__pyx_n_s_expected;
static PyObject *__pyx_n_s_expected_error;
static PyObject *__pyx_n_s_extent;
static PyObject *__pyx_n_s_f;
static PyObject *__pyx_n_s_file;
static PyObject *__pyx_n_s_file_iter;
static PyObject *__pyx_n_s_file_month;
static PyObject *__pyx_n_s_file_year;
static PyObject *__pyx_n_s_filter;
static PyObject *__pyx_n_s_filter_calibrations;
static PyObject *__pyx_n_s_filter_func_event;
static PyObject *__pyx_n_s_filter_func_object;
static PyObject *__pyx_n_s_filter_maximum_ADC;
static PyObject *__pyx_n_s_filter_maximum_TDC;
static PyObject *__pyx_n_s_filter_minimum_ADC;
static PyObject *__pyx_n_s_flux;
static PyObject *__pyx_n_s_flux_length;
static PyObject *__pyx_n_s_flux_s;
static PyObject *__pyx_n_s_flux_sum;
static PyObject *__pyx_n_s_flux_tm;
static PyObject *__pyx_n_s_flux_tm_l;
static PyObject *__pyx_n_s_fluxes;
static PyObject *__pyx_n_s_from;
static PyObject *__pyx_n_s_from_2;
static PyObject *__pyx_n_s_from_cor;
static PyObject *__pyx_kp_s_function_must_have_one_parameter;
static PyObject *__pyx_n_s_g;
static PyObject *__pyx_n_s_get_corrections;
static PyObject *__pyx_n_s_get_python_lib;
static PyObject *__pyx_n_s_get_station;
static PyObject *__pyx_n_s_get_stations;
static PyObject *__pyx_n_s_getfilesystemencoding;
static PyObject *__pyx_n_s_gps_position;
static PyObject *__pyx_n_s_h;
static PyObject *__pyx_kp_s_home_martin_Plocha_czelta_pytho;
static PyObject *__pyx_kp_s_home_martin_Plocha_czelta_pytho_2;
static PyObject *__pyx_kp_s_home_martin_data_Meteodata_Opav;
static PyObject *__pyx_kp_s_home_martin_data_Meteodata_Pard;
static PyObject *__pyx_kp_s_home_martin_data_Meteodata_Prah;
static PyObject *__pyx_n_s_hour;
static PyObject *__pyx_n_s_i;
static PyObject *__pyx_kp_s_i_i;
static PyObject *__pyx_n_s_id;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_index;
static PyObject *__pyx_n_s_init;
static PyObject *__pyx_n_s_int;
static PyObject *__pyx_n_s_item;
static PyObject *__pyx_n_s_iter;
static PyObject *__pyx_n_s_j;
static PyObject *__pyx_n_s_json;
static PyObject *__pyx_n_s_k;
static PyObject *__pyx_n_s_length;
static PyObject *__pyx_n_s_line;
static PyObject *__pyx_n_s_load;
static PyObject *__pyx_n_s_loadfile;
static PyObject *__pyx_n_s_lower;
static PyObject *__pyx_n_s_m;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_mapa_smeru;
static PyObject *__pyx_n_s_max_difference;
static PyObject *__pyx_n_s_maxdelta;
static PyObject *__pyx_n_s_me;
static PyObject *__pyx_n_s_measure_length;
static PyObject *__pyx_n_s_measure_time;
static PyObject *__pyx_n_s_measuredt;
static PyObject *__pyx_n_s_metaclass;
static PyObject *__pyx_n_s_meteo;
static PyObject *__pyx_n_s_minute;
static PyObject *__pyx_n_s_mm;
static PyObject *__pyx_n_s_module;
static PyObject *__pyx_n_s_month;
static PyObject *__pyx_n_s_moon;
static PyObject *__pyx_n_s_moon_check;
static PyObject *__pyx_n_s_moon_check_locals_f;
static PyObject *__pyx_n_s_mt;
static PyObject *__pyx_n_s_multiplyarray;
static PyObject *__pyx_n_s_name;
static PyObject *__pyx_kp_s_name_2;
static PyObject *__pyx_kp_u_ndarray_is_not_C_contiguous;
static PyObject *__pyx_kp_u_ndarray_is_not_Fortran_contiguou;
static PyObject *__pyx_n_s_next;
static PyObject *__pyx_n_s_next_2;
static PyObject *__pyx_n_s_np;
static PyObject *__pyx_n_s_null;
static PyObject *__pyx_n_s_number_of_events;
static PyObject *__pyx_n_s_number_of_runs;
static PyObject *__pyx_n_s_numpy;
static PyObject *__pyx_n_s_ob;
static PyObject *__pyx_n_s_opava_mg;
static PyObject *__pyx_n_s_opava_su;
static PyObject *__pyx_n_s_opava_zsbn;
static PyObject *__pyx_n_s_open;
static PyObject *__pyx_n_s_os;
static PyObject *__pyx_n_s_os_path;
static PyObject *__pyx_n_s_pardubice_gd;
static PyObject *__pyx_n_s_pardubice_spse;
static PyObject *__pyx_n_s_path;
static PyObject *__pyx_kp_s_path_must_be_a_file_with_txt_or;
static PyObject *__pyx_n_s_path_to_file;
static PyObject *__pyx_n_s_pos;
static PyObject *__pyx_n_s_praha_utef;
static PyObject *__pyx_n_s_prepare;
static PyObject *__pyx_n_s_pressure;
static PyObject *__pyx_n_s_pressure_cor;
static PyObject *__pyx_n_s_print;
static PyObject *__pyx_n_s_print_exc;
static PyObject *__pyx_n_s_pylab;
static PyObject *__pyx_n_s_pyx_capi;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qualname;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_ratio;
static PyObject *__pyx_n_s_reader;
static PyObject *__pyx_n_s_relative_alt;
static PyObject *__pyx_n_s_relative_az;
static PyObject *__pyx_n_s_result;
static PyObject *__pyx_n_s_result_error;
static PyObject *__pyx_n_s_result_sigma;
static PyObject *__pyx_n_s_rtn;
static PyObject *__pyx_n_s_run;
static PyObject *__pyx_n_s_run_id;
static PyObject *__pyx_n_s_runs;
static PyObject *__pyx_n_s_s;
static PyObject *__pyx_kp_s_s_i_02i_txt;
static PyObject *__pyx_n_s_save;
static PyObject *__pyx_n_s_save_events;
static PyObject *__pyx_n_s_scale;
static PyObject *__pyx_n_s_second;
static PyObject *__pyx_n_s_self;
static PyObject *__pyx_n_s_sep;
static PyObject *__pyx_n_s_set_station;
static PyObject *__pyx_n_s_source;
static PyObject *__pyx_n_s_source_error;
static PyObject *__pyx_n_s_split;
static PyObject *__pyx_n_s_sqrt;
static PyObject *__pyx_n_s_st;
static PyObject *__pyx_n_s_st_name;
static PyObject *__pyx_n_s_start;
static PyObject *__pyx_n_s_staticmethod;
static PyObject *__pyx_n_s_station;
static PyObject *__pyx_n_s_stations;
static PyObject *__pyx_n_s_stdout;
static PyObject *__pyx_n_s_step;
static PyObject *__pyx_kp_s_step_can_t_be_defined;
static PyObject *__pyx_n_s_stop;
static PyObject *__pyx_n_s_sts;
static PyObject *__pyx_n_s_sum;
static PyObject *__pyx_n_s_sys;
static PyObject *__pyx_n_s_sysconfig;
static PyObject *__pyx_n_s_system_encoding;
static PyObject *__pyx_n_s_t;
static PyObject *__pyx_n_s_tdc;
static PyObject *__pyx_n_s_temp;
static PyObject *__pyx_n_s_test;
static PyObject *__pyx_n_s_time;
static PyObject *__pyx_n_s_times;
static PyObject *__pyx_n_s_timestamp;
static PyObject *__pyx_n_s_timestamps;
static PyObject *__pyx_n_s_to;
static PyObject *__pyx_n_s_traceback;
static PyObject *__pyx_kp_b_txt;
static PyObject *__pyx_kp_u_unknown_dtype_code_in_numpy_pxd;
static PyObject *__pyx_n_s_utcfromtimestamp;
static PyObject *__pyx_n_s_vals;
static PyObject *__pyx_n_s_version;
static PyObject *__pyx_n_s_write;
static PyObject *__pyx_n_s_x;
static PyObject *__pyx_n_s_x2;
static PyObject *__pyx_n_s_x_events;
static PyObject *__pyx_n_s_xx;
static PyObject *__pyx_n_s_y;
static PyObject *__pyx_n_s_y2;
static PyObject *__pyx_n_s_y4;
static PyObject *__pyx_n_s_year;
static PyObject *__pyx_n_s_yy;
static PyObject *__pyx_n_s_zenit;
static PyObject *__pyx_n_s_zeros;
static PyObject *__pyx_int_0;
static PyObject *__pyx_int_1;
static PyObject *__pyx_int_12;
static PyObject *__pyx_int_40;
static PyObject *__pyx_int_60;
static PyObject *__pyx_int_90;
static PyObject *__pyx_int_180;
static PyObject *__pyx_int_181;
static PyObject *__pyx_int_360;
static PyObject *__pyx_int_1800;
static PyObject *__pyx_int_3600;
static PyObject *__pyx_int_86400;
static PyObject *__pyx_int_neg_1;
static PyObject *__pyx_int_neg_4;
static PyObject *__pyx_int_neg_90;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_slice__8;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__3;
static PyObject *__pyx_tuple__5;
static PyObject *__pyx_tuple__7;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_slice__10;
static PyObject *__pyx_slice__11;
static PyObject *__pyx_tuple__12;
static PyObject *__pyx_tuple__13;
static PyObject *__pyx_tuple__14;
static PyObject *__pyx_tuple__16;
static PyObject *__pyx_tuple__17;
static PyObject *__pyx_tuple__18;
static PyObject *__pyx_tuple__19;
static PyObject *__pyx_tuple__20;
static PyObject *__pyx_tuple__21;
static PyObject *__pyx_tuple__23;
static PyObject *__pyx_tuple__24;
static PyObject *__pyx_tuple__25;
static PyObject *__pyx_tuple__26;
static PyObject *__pyx_tuple__27;
static PyObject *__pyx_tuple__28;
static PyObject *__pyx_tuple__29;
static PyObject *__pyx_tuple__30;
static PyObject *__pyx_tuple__31;
static PyObject *__pyx_tuple__32;
static PyObject *__pyx_tuple__33;
static PyObject *__pyx_tuple__34;
static PyObject *__pyx_tuple__35;
static PyObject *__pyx_tuple__37;
static PyObject *__pyx_tuple__39;
static PyObject *__pyx_tuple__40;
static PyObject *__pyx_tuple__42;
static PyObject *__pyx_tuple__44;
static PyObject *__pyx_tuple__46;
static PyObject *__pyx_tuple__48;
static PyObject *__pyx_tuple__50;
static PyObject *__pyx_tuple__52;
static PyObject *__pyx_codeobj__22;
static PyObject *__pyx_codeobj__36;
static PyObject *__pyx_codeobj__38;
static PyObject *__pyx_codeobj__41;
static PyObject *__pyx_codeobj__43;
static PyObject *__pyx_codeobj__45;
static PyObject *__pyx_codeobj__47;
static PyObject *__pyx_codeobj__49;
static PyObject *__pyx_codeobj__51;
static PyObject *__pyx_codeobj__53;

/* "czelta.pyx":15
 * system_encoding = sys.getfilesystemencoding()
 * 
 * cpdef int date_to_timestamp(d):             # <<<<<<<<<<<<<<
 *     "Convert string or datetime object to timestamp. Example date: '27.4.2013 17:44:53'. Datetime is interpreted as UTC."
 *     if type(d)==datetime.datetime:
 */

static PyObject *__pyx_pw_6czelta_1date_to_timestamp(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static int __pyx_f_6czelta_date_to_timestamp(PyObject *__pyx_v_d, CYTHON_UNUSED int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  PyObject *__pyx_t_10 = NULL;
  std::string __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("date_to_timestamp", 0);

  /* "czelta.pyx":17
 * cpdef int date_to_timestamp(d):
 *     "Convert string or datetime object to timestamp. Example date: '27.4.2013 17:44:53'. Datetime is interpreted as UTC."
 *     if type(d)==datetime.datetime:             # <<<<<<<<<<<<<<
 *         return date(d.year, d.month, d.day, d.hour, d.minute, d.second)
 *     else:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_d)), __pyx_t_2, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_3) {

    /* "czelta.pyx":18
 *     "Convert string or datetime object to timestamp. Example date: '27.4.2013 17:44:53'. Datetime is interpreted as UTC."
 *     if type(d)==datetime.datetime:
 *         return date(d.year, d.month, d.day, d.hour, d.minute, d.second)             # <<<<<<<<<<<<<<
 *     else:
 *         return char_date((<string>d.encode(system_encoding)).c_str())
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_year); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_month); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_day); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_hour); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_minute); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_8 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_8 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_second); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_r = date(__pyx_t_4, __pyx_t_5, __pyx_t_6, __pyx_t_7, __pyx_t_8, __pyx_t_9);
    goto __pyx_L0;
  }
  /*else*/ {

    /* "czelta.pyx":20
 *         return date(d.year, d.month, d.day, d.hour, d.minute, d.second)
 *     else:
 *         return char_date((<string>d.encode(system_encoding)).c_str())             # <<<<<<<<<<<<<<
 * 
 * include "station.pxi"
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_d, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __pyx_t_11 = __pyx_convert_string_from_py_(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_r = char_date(((std::string)__pyx_t_11).c_str());
    goto __pyx_L0;
  }

  /* "czelta.pyx":15
 * system_encoding = sys.getfilesystemencoding()
 * 
 * cpdef int date_to_timestamp(d):             # <<<<<<<<<<<<<<
 *     "Convert string or datetime object to timestamp. Example date: '27.4.2013 17:44:53'. Datetime is interpreted as UTC."
 *     if type(d)==datetime.datetime:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_WriteUnraisable("czelta.date_to_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_1date_to_timestamp(PyObject *__pyx_self, PyObject *__pyx_v_d); /*proto*/
static char __pyx_doc_6czelta_date_to_timestamp[] = "Convert string or datetime object to timestamp. Example date: '27.4.2013 17:44:53'. Datetime is interpreted as UTC.";
static PyObject *__pyx_pw_6czelta_1date_to_timestamp(PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("date_to_timestamp (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_date_to_timestamp(__pyx_self, ((PyObject *)__pyx_v_d));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_date_to_timestamp(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("date_to_timestamp", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_f_6czelta_date_to_timestamp(__pyx_v_d, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.date_to_timestamp", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":4
 *     "Class for working with station data. On import it tries to load config_data.JSON (in python lib path and after failture in local directory."
 * 
 *     def __init__(self, station):             # <<<<<<<<<<<<<<
 *         if type(station)==int:
 *             self.st = &getStation(<int>station)
 */

/* Python wrapper */
static int __pyx_pw_6czelta_7station_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6czelta_7station_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_station = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_station,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_station)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_station = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.station.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_7station___init__(((struct __pyx_obj_6czelta_station *)__pyx_v_self), __pyx_v_station);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6czelta_7station___init__(struct __pyx_obj_6czelta_station *__pyx_v_self, PyObject *__pyx_v_station) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  std::string __pyx_t_6;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":5
 * 
 *     def __init__(self, station):
 *         if type(station)==int:             # <<<<<<<<<<<<<<
 *             self.st = &getStation(<int>station)
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_station)), ((PyObject *)((PyObject*)(&PyInt_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/station.pxi":6
 *     def __init__(self, station):
 *         if type(station)==int:
 *             self.st = &getStation(<int>station)             # <<<<<<<<<<<<<<
 *         else:
 *             self.st = &getStation(<string>station.encode(system_encoding))
 */
    __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_station); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_self->st = (&Station::getStation(((int)__pyx_t_3)));
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/station.pxi":8
 *             self.st = &getStation(<int>station)
 *         else:
 *             self.st = &getStation(<string>station.encode(system_encoding))             # <<<<<<<<<<<<<<
 *         if self.st.id()==0:
 *             raise RuntimeError("Station not exist, have you loaded config file?")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_station, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_6 = __pyx_convert_string_from_py_(__pyx_t_4); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_v_self->st = (&Station::getStation(((std::string)__pyx_t_6)));
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/station.pxi":9
 *         else:
 *             self.st = &getStation(<string>station.encode(system_encoding))
 *         if self.st.id()==0:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Station not exist, have you loaded config file?")
 * 
 */
  __pyx_t_2 = ((__pyx_v_self->st->id() == 0) != 0);
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/station.pxi":10
 *             self.st = &getStation(<string>station.encode(system_encoding))
 *         if self.st.id()==0:
 *             raise RuntimeError("Station not exist, have you loaded config file?")             # <<<<<<<<<<<<<<
 * 
 *     property id:
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":4
 *     "Class for working with station data. On import it tries to load config_data.JSON (in python lib path and after failture in local directory."
 * 
 *     def __init__(self, station):             # <<<<<<<<<<<<<<
 *         if type(station)==int:
 *             self.st = &getStation(<int>station)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("czelta.station.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":14
 *     property id:
 *         "Return `station id`, probably same as on czelta website."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.st.id()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_2id_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_7station_2id_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_7station_2id___get__(((struct __pyx_obj_6czelta_station *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_2id___get__(struct __pyx_obj_6czelta_station *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":15
 *         "Return `station id`, probably same as on czelta website."
 *         def __get__(self):
 *             return self.st.id()             # <<<<<<<<<<<<<<
 * 
 *     property name:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->st->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":14
 *     property id:
 *         "Return `station id`, probably same as on czelta website."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.st.id()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.station.id.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":19
 *     property name:
 *         "Return code name of station. Example: ``\'praha_utef\'``, ``\'pardubice_gd\'`` or similar."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return str((<char*>self.st.name()).decode(system_encoding))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_4name_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_7station_4name_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_7station_4name___get__(((struct __pyx_obj_6czelta_station *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_4name___get__(struct __pyx_obj_6czelta_station *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":20
 *         "Return code name of station. Example: ``\'praha_utef\'``, ``\'pardubice_gd\'`` or similar."
 *         def __get__(self):
 *             return str((<char*>self.st.name()).decode(system_encoding))             # <<<<<<<<<<<<<<
 * 
 *     property detector_position:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromString(((char *)__pyx_v_self->st->name())); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":19
 *     property name:
 *         "Return code name of station. Example: ``\'praha_utef\'``, ``\'pardubice_gd\'`` or similar."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return str((<char*>self.st.name()).decode(system_encoding))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.station.name.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":24
 *     property detector_position:
 *         "Return position of detectors in format ``(x1, y1, x2, y2)`` where ``x1`` and ``y1`` are relative position of detector 1 to detector 0. ``x2`` and ``y2`` are relative position of detector 2 to detector 0. All values are in metres."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float* dp = self.st.detectorPosition()
 *             return (dp[0], dp[1], dp[2], dp[3])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_17detector_position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_7station_17detector_position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_7station_17detector_position___get__(((struct __pyx_obj_6czelta_station *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_17detector_position___get__(struct __pyx_obj_6czelta_station *__pyx_v_self) {
  float *__pyx_v_dp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":25
 *         "Return position of detectors in format ``(x1, y1, x2, y2)`` where ``x1`` and ``y1`` are relative position of detector 1 to detector 0. ``x2`` and ``y2`` are relative position of detector 2 to detector 0. All values are in metres."
 *         def __get__(self):
 *             cdef float* dp = self.st.detectorPosition()             # <<<<<<<<<<<<<<
 *             return (dp[0], dp[1], dp[2], dp[3])
 * 
 */
  __pyx_v_dp = __pyx_v_self->st->detectorPosition();

  /* "/home/martin/Plocha/czelta-python/station.pxi":26
 *         def __get__(self):
 *             cdef float* dp = self.st.detectorPosition()
 *             return (dp[0], dp[1], dp[2], dp[3])             # <<<<<<<<<<<<<<
 * 
 *     property gps_position:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_dp[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_dp[1])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_dp[2])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_dp[3])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyTuple_New(4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_4 = 0;
  __pyx_r = __pyx_t_5;
  __pyx_t_5 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":24
 *     property detector_position:
 *         "Return position of detectors in format ``(x1, y1, x2, y2)`` where ``x1`` and ``y1`` are relative position of detector 1 to detector 0. ``x2`` and ``y2`` are relative position of detector 2 to detector 0. All values are in metres."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float* dp = self.st.detectorPosition()
 *             return (dp[0], dp[1], dp[2], dp[3])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("czelta.station.detector_position.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":30
 *     property gps_position:
 *         "Returns GPS position of station. Return ``(latitude, longitude)`` or ``None`` if gps_position is not defined."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double* gp = self.st.GPSPosition()
 *             if gp[0]==0 and gp[1]==0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_12gps_position_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_7station_12gps_position_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_7station_12gps_position___get__(((struct __pyx_obj_6czelta_station *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_12gps_position___get__(struct __pyx_obj_6czelta_station *__pyx_v_self) {
  double *__pyx_v_gp;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":31
 *         "Returns GPS position of station. Return ``(latitude, longitude)`` or ``None`` if gps_position is not defined."
 *         def __get__(self):
 *             cdef double* gp = self.st.GPSPosition()             # <<<<<<<<<<<<<<
 *             if gp[0]==0 and gp[1]==0:
 *                 return None
 */
  __pyx_v_gp = __pyx_v_self->st->GPSPosition();

  /* "/home/martin/Plocha/czelta-python/station.pxi":32
 *         def __get__(self):
 *             cdef double* gp = self.st.GPSPosition()
 *             if gp[0]==0 and gp[1]==0:             # <<<<<<<<<<<<<<
 *                 return None
 *             return (gp[0], gp[1], gp[2])
 */
  __pyx_t_1 = (((__pyx_v_gp[0]) == 0.0) != 0);
  if (__pyx_t_1) {
    __pyx_t_2 = (((__pyx_v_gp[1]) == 0.0) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/station.pxi":33
 *             cdef double* gp = self.st.GPSPosition()
 *             if gp[0]==0 and gp[1]==0:
 *                 return None             # <<<<<<<<<<<<<<
 *             return (gp[0], gp[1], gp[2])
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":34
 *             if gp[0]==0 and gp[1]==0:
 *                 return None
 *             return (gp[0], gp[1], gp[2])             # <<<<<<<<<<<<<<
 * 
 *     cpdef distance_to(self, station other_station):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_4 = PyFloat_FromDouble((__pyx_v_gp[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = PyFloat_FromDouble((__pyx_v_gp[1])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_6 = PyFloat_FromDouble((__pyx_v_gp[2])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_6);
  __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
  __Pyx_GIVEREF(__pyx_t_6);
  __pyx_t_4 = 0;
  __pyx_t_5 = 0;
  __pyx_t_6 = 0;
  __pyx_r = __pyx_t_7;
  __pyx_t_7 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":30
 *     property gps_position:
 *         "Returns GPS position of station. Return ``(latitude, longitude)`` or ``None`` if gps_position is not defined."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef double* gp = self.st.GPSPosition()
 *             if gp[0]==0 and gp[1]==0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("czelta.station.gps_position.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":36
 *             return (gp[0], gp[1], gp[2])
 * 
 *     cpdef distance_to(self, station other_station):             # <<<<<<<<<<<<<<
 *         "Calculate distance to other station using haversine method. The return number is in kilometres."
 *         cdef double distance = self.st.distanceTo(other_station.st[0])
 */

static PyObject *__pyx_pw_6czelta_7station_3distance_to(PyObject *__pyx_v_self, PyObject *__pyx_v_other_station); /*proto*/
static PyObject *__pyx_f_6czelta_7station_distance_to(struct __pyx_obj_6czelta_station *__pyx_v_self, struct __pyx_obj_6czelta_station *__pyx_v_other_station, int __pyx_skip_dispatch) {
  double __pyx_v_distance;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance_to", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_distance_to); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_7station_3distance_to)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(((PyObject *)__pyx_v_other_station));
      PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_other_station));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_other_station));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":38
 *     cpdef distance_to(self, station other_station):
 *         "Calculate distance to other station using haversine method. The return number is in kilometres."
 *         cdef double distance = self.st.distanceTo(other_station.st[0])             # <<<<<<<<<<<<<<
 *         if distance==0:
 *             return None
 */
  __pyx_v_distance = __pyx_v_self->st->distanceTo((__pyx_v_other_station->st[0]));

  /* "/home/martin/Plocha/czelta-python/station.pxi":39
 *         "Calculate distance to other station using haversine method. The return number is in kilometres."
 *         cdef double distance = self.st.distanceTo(other_station.st[0])
 *         if distance==0:             # <<<<<<<<<<<<<<
 *             return None
 *         else:
 */
  __pyx_t_4 = ((__pyx_v_distance == 0.0) != 0);
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/station.pxi":40
 *         cdef double distance = self.st.distanceTo(other_station.st[0])
 *         if distance==0:
 *             return None             # <<<<<<<<<<<<<<
 *         else:
 *             return distance
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/station.pxi":42
 *             return None
 *         else:
 *             return distance             # <<<<<<<<<<<<<<
 * 
 *     cpdef get_corrections(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_1 = PyFloat_FromDouble(__pyx_v_distance); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_r = __pyx_t_1;
    __pyx_t_1 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":36
 *             return (gp[0], gp[1], gp[2])
 * 
 *     cpdef distance_to(self, station other_station):             # <<<<<<<<<<<<<<
 *         "Calculate distance to other station using haversine method. The return number is in kilometres."
 *         cdef double distance = self.st.distanceTo(other_station.st[0])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.station.distance_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_3distance_to(PyObject *__pyx_v_self, PyObject *__pyx_v_other_station); /*proto*/
static char __pyx_doc_6czelta_7station_2distance_to[] = "Calculate distance to other station using haversine method. The return number is in kilometres.";
static PyObject *__pyx_pw_6czelta_7station_3distance_to(PyObject *__pyx_v_self, PyObject *__pyx_v_other_station) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("distance_to (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_other_station), __pyx_ptype_6czelta_station, 1, "other_station", 0))) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6czelta_7station_2distance_to(((struct __pyx_obj_6czelta_station *)__pyx_v_self), ((struct __pyx_obj_6czelta_station *)__pyx_v_other_station));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_2distance_to(struct __pyx_obj_6czelta_station *__pyx_v_self, struct __pyx_obj_6czelta_station *__pyx_v_other_station) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("distance_to", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_station *)__pyx_v_self->__pyx_vtab)->distance_to(__pyx_v_self, __pyx_v_other_station, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.station.distance_to", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":44
 *             return distance
 * 
 *     cpdef get_corrections(self):             # <<<<<<<<<<<<<<
 *         cdef object corrections = []
 *         cdef int i
 */

static PyObject *__pyx_pw_6czelta_7station_5get_corrections(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_6czelta_7station_get_corrections(struct __pyx_obj_6czelta_station *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_v_corrections = 0;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_corrections", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_corrections); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_7station_5get_corrections)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":45
 * 
 *     cpdef get_corrections(self):
 *         cdef object corrections = []             # <<<<<<<<<<<<<<
 *         cdef int i
 *         for i in range(self.st.TDCCorrections_size()):
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_corrections = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":47
 *         cdef object corrections = []
 *         cdef int i
 *         for i in range(self.st.TDCCorrections_size()):             # <<<<<<<<<<<<<<
 *             corrections.append(self.st.TDCCorrections()[i]._from)
 *         return corrections
 */
  __pyx_t_3 = __pyx_v_self->st->TDCCorrections_size();
  for (__pyx_t_4 = 0; __pyx_t_4 < __pyx_t_3; __pyx_t_4+=1) {
    __pyx_v_i = __pyx_t_4;

    /* "/home/martin/Plocha/czelta-python/station.pxi":48
 *         cdef int i
 *         for i in range(self.st.TDCCorrections_size()):
 *             corrections.append(self.st.TDCCorrections()[i]._from)             # <<<<<<<<<<<<<<
 *         return corrections
 * 
 */
    __pyx_t_1 = __Pyx_PyInt_From_int((__pyx_v_self->st->TDCCorrections()[__pyx_v_i])._from); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyObject_Append(__pyx_v_corrections, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":49
 *         for i in range(self.st.TDCCorrections_size()):
 *             corrections.append(self.st.TDCCorrections()[i]._from)
 *         return corrections             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_corrections);
  __pyx_r = __pyx_v_corrections;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":44
 *             return distance
 * 
 *     cpdef get_corrections(self):             # <<<<<<<<<<<<<<
 *         cdef object corrections = []
 *         cdef int i
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.station.get_corrections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_corrections);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_5get_corrections(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_7station_5get_corrections(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_corrections (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_7station_4get_corrections(((struct __pyx_obj_6czelta_station *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_4get_corrections(struct __pyx_obj_6czelta_station *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_corrections", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_station *)__pyx_v_self->__pyx_vtab)->get_corrections(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.station.get_corrections", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":52
 * 
 *     @staticmethod
 *     def load(file = None):             # <<<<<<<<<<<<<<
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 *         cdef Station st
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_7load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6czelta_7station_6load[] = "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``.";
static PyMethodDef __pyx_mdef_6czelta_7station_7load = {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_6czelta_7station_7load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6czelta_7station_6load)};
static PyObject *__pyx_pw_6czelta_7station_7load(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_file = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_file,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_file);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "load") < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_file = values[0];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("load", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.station.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_7station_6load(__pyx_v_file);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_6load(PyObject *__pyx_v_file) {
  Station __pyx_v_st;
  PyObject *__pyx_v_pos = 0;
  PyObject *__pyx_v_cfg = NULL;
  PyObject *__pyx_v_station = NULL;
  PyObject *__pyx_v_st_name = NULL;
  PyObject *__pyx_v_correction = NULL;
  PyObject *__pyx_v_tdc = NULL;
  PyObject *__pyx_v_from_cor = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  Station __pyx_t_11;
  PyObject *__pyx_t_12 = NULL;
  char *__pyx_t_13;
  Py_ssize_t __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  double __pyx_t_17;
  double __pyx_t_18;
  double __pyx_t_19;
  double __pyx_t_20;
  float __pyx_t_21;
  float __pyx_t_22;
  float __pyx_t_23;
  float __pyx_t_24;
  PyObject *(*__pyx_t_25)(PyObject *);
  short __pyx_t_26;
  short __pyx_t_27;
  short __pyx_t_28;
  PyObject *__pyx_t_29 = NULL;
  std::string __pyx_t_30;
  PyObject *__pyx_t_31 = NULL;
  PyObject *__pyx_t_32 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_INCREF(__pyx_v_file);

  /* "/home/martin/Plocha/czelta-python/station.pxi":56
 *         cdef Station st
 *         cdef object pos
 *         if file==None:             # <<<<<<<<<<<<<<
 *             file = open("config_data.JSON")
 *         cfg = json.load(file)
 */
  __pyx_t_1 = PyObject_RichCompare(__pyx_v_file, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/station.pxi":57
 *         cdef object pos
 *         if file==None:
 *             file = open("config_data.JSON")             # <<<<<<<<<<<<<<
 *         cfg = json.load(file)
 *         file.close()
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF_SET(__pyx_v_file, __pyx_t_1);
    __pyx_t_1 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/station.pxi":58
 *         if file==None:
 *             file = open("config_data.JSON")
 *         cfg = json.load(file)             # <<<<<<<<<<<<<<
 *         file.close()
 *         for station in cfg['stations']:
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_json); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_load); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_file);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_file);
  __Pyx_GIVEREF(__pyx_v_file);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_1, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_cfg = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":59
 *             file = open("config_data.JSON")
 *         cfg = json.load(file)
 *         file.close()             # <<<<<<<<<<<<<<
 *         for station in cfg['stations']:
 *             try:
 */
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_file, __pyx_n_s_close); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":60
 *         cfg = json.load(file)
 *         file.close()
 *         for station in cfg['stations']:             # <<<<<<<<<<<<<<
 *             try:
 *                 st = Station(int(station['ID']))
 */
  __pyx_t_1 = PyObject_GetItem(__pyx_v_cfg, __pyx_n_s_stations); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_4 = __pyx_t_1; __Pyx_INCREF(__pyx_t_4); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_4 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = Py_TYPE(__pyx_t_4)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_4)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_4)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_4, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_4, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_4);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_station, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/station.pxi":61
 *         file.close()
 *         for station in cfg['stations']:
 *             try:             # <<<<<<<<<<<<<<
 *                 st = Station(int(station['ID']))
 *                 st_name = station['name'].encode(system_encoding)
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_7, &__pyx_t_8, &__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_7);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      /*try:*/ {

        /* "/home/martin/Plocha/czelta-python/station.pxi":62
 *         for station in cfg['stations']:
 *             try:
 *                 st = Station(int(station['ID']))             # <<<<<<<<<<<<<<
 *                 st_name = station['name'].encode(system_encoding)
 *                 st.setName(st_name)
 */
        __pyx_t_1 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_ID); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = PyNumber_Int(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        try {
          __pyx_t_11 = Station(__pyx_t_10);
        } catch(...) {
          __Pyx_CppExn2PyErr();
          {__pyx_filename = __pyx_f[0]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        }
        __pyx_v_st = __pyx_t_11;

        /* "/home/martin/Plocha/czelta-python/station.pxi":63
 *             try:
 *                 st = Station(int(station['ID']))
 *                 st_name = station['name'].encode(system_encoding)             # <<<<<<<<<<<<<<
 *                 st.setName(st_name)
 *                 if 'GPSposition' in station and len(station['GPSposition'])>=2:
 */
        __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_name); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_12);
        PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_12, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF_SET(__pyx_v_st_name, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "/home/martin/Plocha/czelta-python/station.pxi":64
 *                 st = Station(int(station['ID']))
 *                 st_name = station['name'].encode(system_encoding)
 *                 st.setName(st_name)             # <<<<<<<<<<<<<<
 *                 if 'GPSposition' in station and len(station['GPSposition'])>=2:
 *                     pos = station['GPSposition']
 */
        __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_st_name); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        __pyx_v_st.setName(__pyx_t_13);

        /* "/home/martin/Plocha/czelta-python/station.pxi":65
 *                 st_name = station['name'].encode(system_encoding)
 *                 st.setName(st_name)
 *                 if 'GPSposition' in station and len(station['GPSposition'])>=2:             # <<<<<<<<<<<<<<
 *                     pos = station['GPSposition']
 *                     st.setGPSPosition(pos[0],pos[1],pos[2] if len(pos)>2 else 0)
 */
        __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_n_s_GPSposition, __pyx_v_station, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        if ((__pyx_t_2 != 0)) {
          __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_GPSposition); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_15 = ((__pyx_t_14 >= 2) != 0);
          __pyx_t_16 = __pyx_t_15;
        } else {
          __pyx_t_16 = (__pyx_t_2 != 0);
        }
        if (__pyx_t_16) {

          /* "/home/martin/Plocha/czelta-python/station.pxi":66
 *                 st.setName(st_name)
 *                 if 'GPSposition' in station and len(station['GPSposition'])>=2:
 *                     pos = station['GPSposition']             # <<<<<<<<<<<<<<
 *                     st.setGPSPosition(pos[0],pos[1],pos[2] if len(pos)>2 else 0)
 *                 if 'detectorsPos' in station and len(station['detectorsPos'])==4:
 */
          __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_GPSposition); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_XDECREF_SET(__pyx_v_pos, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "/home/martin/Plocha/czelta-python/station.pxi":67
 *                 if 'GPSposition' in station and len(station['GPSposition'])>=2:
 *                     pos = station['GPSposition']
 *                     st.setGPSPosition(pos[0],pos[1],pos[2] if len(pos)>2 else 0)             # <<<<<<<<<<<<<<
 *                 if 'detectorsPos' in station and len(station['detectorsPos'])==4:
 *                     pos = station['detectorsPos']
 */
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_18 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_18 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_14 = PyObject_Length(__pyx_v_pos); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          if (((__pyx_t_14 > 2) != 0)) {
            __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_20 = __pyx_PyFloat_AsDouble(__pyx_t_3); if (unlikely((__pyx_t_20 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_19 = __pyx_t_20;
          } else {
            __pyx_t_19 = 0.0;
          }
          __pyx_v_st.setGPSPosition(__pyx_t_17, __pyx_t_18, __pyx_t_19);
          goto __pyx_L14;
        }
        __pyx_L14:;

        /* "/home/martin/Plocha/czelta-python/station.pxi":68
 *                     pos = station['GPSposition']
 *                     st.setGPSPosition(pos[0],pos[1],pos[2] if len(pos)>2 else 0)
 *                 if 'detectorsPos' in station and len(station['detectorsPos'])==4:             # <<<<<<<<<<<<<<
 *                     pos = station['detectorsPos']
 *                     st.setDetectorPosition(pos[0], pos[1], pos[2], pos[3])
 */
        __pyx_t_16 = (__Pyx_PySequence_Contains(__pyx_n_s_detectorsPos, __pyx_v_station, Py_EQ)); if (unlikely(__pyx_t_16 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        if ((__pyx_t_16 != 0)) {
          __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_detectorsPos); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_2 = ((__pyx_t_14 == 4) != 0);
          __pyx_t_15 = __pyx_t_2;
        } else {
          __pyx_t_15 = (__pyx_t_16 != 0);
        }
        if (__pyx_t_15) {

          /* "/home/martin/Plocha/czelta-python/station.pxi":69
 *                     st.setGPSPosition(pos[0],pos[1],pos[2] if len(pos)>2 else 0)
 *                 if 'detectorsPos' in station and len(station['detectorsPos'])==4:
 *                     pos = station['detectorsPos']             # <<<<<<<<<<<<<<
 *                     st.setDetectorPosition(pos[0], pos[1], pos[2], pos[3])
 *                 if 'TDCCorrection' in station and len(station['TDCCorrection'])>0:
 */
          __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_detectorsPos); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __Pyx_XDECREF_SET(__pyx_v_pos, __pyx_t_3);
          __pyx_t_3 = 0;

          /* "/home/martin/Plocha/czelta-python/station.pxi":70
 *                 if 'detectorsPos' in station and len(station['detectorsPos'])==4:
 *                     pos = station['detectorsPos']
 *                     st.setDetectorPosition(pos[0], pos[1], pos[2], pos[3])             # <<<<<<<<<<<<<<
 *                 if 'TDCCorrection' in station and len(station['TDCCorrection'])>0:
 *                     st.clearTDCCorrect()
 */
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_21 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_21 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_22 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_22 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_23 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_23 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_pos, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_24 = __pyx_PyFloat_AsFloat(__pyx_t_3); if (unlikely((__pyx_t_24 == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_v_st.setDetectorPosition(__pyx_t_21, __pyx_t_22, __pyx_t_23, __pyx_t_24);
          goto __pyx_L15;
        }
        __pyx_L15:;

        /* "/home/martin/Plocha/czelta-python/station.pxi":71
 *                     pos = station['detectorsPos']
 *                     st.setDetectorPosition(pos[0], pos[1], pos[2], pos[3])
 *                 if 'TDCCorrection' in station and len(station['TDCCorrection'])>0:             # <<<<<<<<<<<<<<
 *                     st.clearTDCCorrect()
 *                     for correction in station['TDCCorrection']:
 */
        __pyx_t_15 = (__Pyx_PySequence_Contains(__pyx_n_s_TDCCorrection, __pyx_v_station, Py_EQ)); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
        if ((__pyx_t_15 != 0)) {
          __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_TDCCorrection); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          __pyx_t_14 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_14 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          __pyx_t_16 = ((__pyx_t_14 > 0) != 0);
          __pyx_t_2 = __pyx_t_16;
        } else {
          __pyx_t_2 = (__pyx_t_15 != 0);
        }
        if (__pyx_t_2) {

          /* "/home/martin/Plocha/czelta-python/station.pxi":72
 *                     st.setDetectorPosition(pos[0], pos[1], pos[2], pos[3])
 *                 if 'TDCCorrection' in station and len(station['TDCCorrection'])>0:
 *                     st.clearTDCCorrect()             # <<<<<<<<<<<<<<
 *                     for correction in station['TDCCorrection']:
 *                         tdc = correction['correction']
 */
          __pyx_v_st.clearTDCCorrect();

          /* "/home/martin/Plocha/czelta-python/station.pxi":73
 *                 if 'TDCCorrection' in station and len(station['TDCCorrection'])>0:
 *                     st.clearTDCCorrect()
 *                     for correction in station['TDCCorrection']:             # <<<<<<<<<<<<<<
 *                         tdc = correction['correction']
 *                         if not 'from' in correction:
 */
          __pyx_t_3 = PyObject_GetItem(__pyx_v_station, __pyx_n_s_TDCCorrection); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
          __Pyx_GOTREF(__pyx_t_3);
          if (PyList_CheckExact(__pyx_t_3) || PyTuple_CheckExact(__pyx_t_3)) {
            __pyx_t_12 = __pyx_t_3; __Pyx_INCREF(__pyx_t_12); __pyx_t_14 = 0;
            __pyx_t_25 = NULL;
          } else {
            __pyx_t_14 = -1; __pyx_t_12 = PyObject_GetIter(__pyx_t_3); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_GOTREF(__pyx_t_12);
            __pyx_t_25 = Py_TYPE(__pyx_t_12)->tp_iternext;
          }
          __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
          for (;;) {
            if (!__pyx_t_25 && PyList_CheckExact(__pyx_t_12)) {
              if (__pyx_t_14 >= PyList_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyList_GET_ITEM(__pyx_t_12, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_12, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #endif
            } else if (!__pyx_t_25 && PyTuple_CheckExact(__pyx_t_12)) {
              if (__pyx_t_14 >= PyTuple_GET_SIZE(__pyx_t_12)) break;
              #if CYTHON_COMPILING_IN_CPYTHON
              __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_12, __pyx_t_14); __Pyx_INCREF(__pyx_t_3); __pyx_t_14++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #else
              __pyx_t_3 = PySequence_ITEM(__pyx_t_12, __pyx_t_14); __pyx_t_14++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              #endif
            } else {
              __pyx_t_3 = __pyx_t_25(__pyx_t_12);
              if (unlikely(!__pyx_t_3)) {
                PyObject* exc_type = PyErr_Occurred();
                if (exc_type) {
                  if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
                  else {__pyx_filename = __pyx_f[0]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
                }
                break;
              }
              __Pyx_GOTREF(__pyx_t_3);
            }
            __Pyx_XDECREF_SET(__pyx_v_correction, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "/home/martin/Plocha/czelta-python/station.pxi":74
 *                     st.clearTDCCorrect()
 *                     for correction in station['TDCCorrection']:
 *                         tdc = correction['correction']             # <<<<<<<<<<<<<<
 *                         if not 'from' in correction:
 *                             correction['from'] = 0
 */
            __pyx_t_3 = PyObject_GetItem(__pyx_v_correction, __pyx_n_s_correction); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
            __Pyx_GOTREF(__pyx_t_3);
            __Pyx_XDECREF_SET(__pyx_v_tdc, __pyx_t_3);
            __pyx_t_3 = 0;

            /* "/home/martin/Plocha/czelta-python/station.pxi":75
 *                     for correction in station['TDCCorrection']:
 *                         tdc = correction['correction']
 *                         if not 'from' in correction:             # <<<<<<<<<<<<<<
 *                             correction['from'] = 0
 *                         if type(correction['from'])==int:
 */
            __pyx_t_2 = (__Pyx_PySequence_Contains(__pyx_n_s_from, __pyx_v_correction, Py_NE)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __pyx_t_15 = (__pyx_t_2 != 0);
            if (__pyx_t_15) {

              /* "/home/martin/Plocha/czelta-python/station.pxi":76
 *                         tdc = correction['correction']
 *                         if not 'from' in correction:
 *                             correction['from'] = 0             # <<<<<<<<<<<<<<
 *                         if type(correction['from'])==int:
 *                             st.pushTDCCorrect(<int>correction['from'], <short>tdc[0], <short>tdc[1], <short>tdc[2])
 */
              if (unlikely(PyObject_SetItem(__pyx_v_correction, __pyx_n_s_from, __pyx_int_0) < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              goto __pyx_L19;
            }
            __pyx_L19:;

            /* "/home/martin/Plocha/czelta-python/station.pxi":77
 *                         if not 'from' in correction:
 *                             correction['from'] = 0
 *                         if type(correction['from'])==int:             # <<<<<<<<<<<<<<
 *                             st.pushTDCCorrect(<int>correction['from'], <short>tdc[0], <short>tdc[1], <short>tdc[2])
 *                         else:
 */
            __pyx_t_3 = PyObject_GetItem(__pyx_v_correction, __pyx_n_s_from); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
            __Pyx_GOTREF(__pyx_t_3);
            __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), ((PyObject *)((PyObject*)(&PyInt_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
            __pyx_t_15 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_15 < 0)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
            __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
            if (__pyx_t_15) {

              /* "/home/martin/Plocha/czelta-python/station.pxi":78
 *                             correction['from'] = 0
 *                         if type(correction['from'])==int:
 *                             st.pushTDCCorrect(<int>correction['from'], <short>tdc[0], <short>tdc[1], <short>tdc[2])             # <<<<<<<<<<<<<<
 *                         else:
 *                             from_cor = correction['from'].encode(system_encoding)
 */
              __pyx_t_1 = PyObject_GetItem(__pyx_v_correction, __pyx_n_s_from); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_10 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_10 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tdc, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_26 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_26 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tdc, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_27 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_27 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tdc, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_28 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_28 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_st.pushTDCCorrect(((int)__pyx_t_10), ((short)__pyx_t_26), ((short)__pyx_t_27), ((short)__pyx_t_28));
              goto __pyx_L20;
            }
            /*else*/ {

              /* "/home/martin/Plocha/czelta-python/station.pxi":80
 *                             st.pushTDCCorrect(<int>correction['from'], <short>tdc[0], <short>tdc[1], <short>tdc[2])
 *                         else:
 *                             from_cor = correction['from'].encode(system_encoding)             # <<<<<<<<<<<<<<
 *                             st.pushTDCCorrect(<string>from_cor, <short>tdc[0], <short>tdc[1], <short>tdc[2])
 *                 addStation(st)
 */
              __pyx_t_1 = PyObject_GetItem(__pyx_v_correction, __pyx_n_s_from); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_encode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_3);
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_29 = PyTuple_New(1); if (unlikely(!__pyx_t_29)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_29);
              PyTuple_SET_ITEM(__pyx_t_29, 0, __pyx_t_1);
              __Pyx_GIVEREF(__pyx_t_1);
              __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_29, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_GOTREF(__pyx_t_1);
              __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
              __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
              __Pyx_XDECREF_SET(__pyx_v_from_cor, __pyx_t_1);
              __pyx_t_1 = 0;

              /* "/home/martin/Plocha/czelta-python/station.pxi":81
 *                         else:
 *                             from_cor = correction['from'].encode(system_encoding)
 *                             st.pushTDCCorrect(<string>from_cor, <short>tdc[0], <short>tdc[1], <short>tdc[2])             # <<<<<<<<<<<<<<
 *                 addStation(st)
 *             except Warning:
 */
              __pyx_t_30 = __pyx_convert_string_from_py_(__pyx_v_from_cor); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tdc, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_28 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_28 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tdc, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_27 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_27 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_tdc, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;};
              __Pyx_GOTREF(__pyx_t_1);
              __pyx_t_26 = __Pyx_PyInt_As_short(__pyx_t_1); if (unlikely((__pyx_t_26 == (short)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L6_error;}
              __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
              __pyx_v_st.pushTDCCorrect(((std::string)__pyx_t_30), ((short)__pyx_t_28), ((short)__pyx_t_27), ((short)__pyx_t_26));
            }
            __pyx_L20:;

            /* "/home/martin/Plocha/czelta-python/station.pxi":73
 *                 if 'TDCCorrection' in station and len(station['TDCCorrection'])>0:
 *                     st.clearTDCCorrect()
 *                     for correction in station['TDCCorrection']:             # <<<<<<<<<<<<<<
 *                         tdc = correction['correction']
 *                         if not 'from' in correction:
 */
          }
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          goto __pyx_L16;
        }
        __pyx_L16:;

        /* "/home/martin/Plocha/czelta-python/station.pxi":82
 *                             from_cor = correction['from'].encode(system_encoding)
 *                             st.pushTDCCorrect(<string>from_cor, <short>tdc[0], <short>tdc[1], <short>tdc[2])
 *                 addStation(st)             # <<<<<<<<<<<<<<
 *             except Warning:
 *                 st_name = (<char*>st.name()).decode(system_encoding)
 */
        Station::addStation(__pyx_v_st);
      }
      __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      goto __pyx_L13_try_end;
      __pyx_L6_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_29); __pyx_t_29 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;

      /* "/home/martin/Plocha/czelta-python/station.pxi":83
 *                             st.pushTDCCorrect(<string>from_cor, <short>tdc[0], <short>tdc[1], <short>tdc[2])
 *                 addStation(st)
 *             except Warning:             # <<<<<<<<<<<<<<
 *                 st_name = (<char*>st.name()).decode(system_encoding)
 *                 print "Station can't be added, bad format of JSON, id: "+str(st.id())+", name: "+st_name
 */
      __pyx_t_10 = PyErr_ExceptionMatches(__pyx_builtin_Warning);
      if (__pyx_t_10) {
        __Pyx_AddTraceback("czelta.station.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_12, &__pyx_t_1, &__pyx_t_29) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_12);
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_29);

        /* "/home/martin/Plocha/czelta-python/station.pxi":84
 *                 addStation(st)
 *             except Warning:
 *                 st_name = (<char*>st.name()).decode(system_encoding)             # <<<<<<<<<<<<<<
 *                 print "Station can't be added, bad format of JSON, id: "+str(st.id())+", name: "+st_name
 * 
 */
        __pyx_t_3 = __Pyx_PyBytes_FromString(((char *)__pyx_v_st.name())); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_31 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_decode); if (unlikely(!__pyx_t_31)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_31);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_32 = PyTuple_New(1); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_32);
        PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_31, __pyx_t_32, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_31); __pyx_t_31 = 0;
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __Pyx_XDECREF_SET(__pyx_v_st_name, __pyx_t_3);
        __pyx_t_3 = 0;

        /* "/home/martin/Plocha/czelta-python/station.pxi":85
 *             except Warning:
 *                 st_name = (<char*>st.name()).decode(system_encoding)
 *                 print "Station can't be added, bad format of JSON, id: "+str(st.id())+", name: "+st_name             # <<<<<<<<<<<<<<
 * 
 *     @staticmethod
 */
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_st.id()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_32 = PyTuple_New(1); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_32);
        PyTuple_SET_ITEM(__pyx_t_32, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_32, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __pyx_t_32 = PyNumber_Add(__pyx_kp_s_Station_can_t_be_added_bad_forma, __pyx_t_3); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_32);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_3 = PyNumber_Add(__pyx_t_32, __pyx_kp_s_name_2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __pyx_t_32 = PyNumber_Add(__pyx_t_3, __pyx_v_st_name); if (unlikely(!__pyx_t_32)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_GOTREF(__pyx_t_32);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        if (__Pyx_PrintOne(0, __pyx_t_32) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L8_except_error;}
        __Pyx_DECREF(__pyx_t_32); __pyx_t_32 = 0;
        __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_29); __pyx_t_29 = 0;
        goto __pyx_L7_exception_handled;
      }
      goto __pyx_L8_except_error;
      __pyx_L8_except_error:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      goto __pyx_L1_error;
      __pyx_L7_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_7);
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_ExceptionReset(__pyx_t_7, __pyx_t_8, __pyx_t_9);
      __pyx_L13_try_end:;
    }

    /* "/home/martin/Plocha/czelta-python/station.pxi":60
 *         cfg = json.load(file)
 *         file.close()
 *         for station in cfg['stations']:             # <<<<<<<<<<<<<<
 *             try:
 *                 st = Station(int(station['ID']))
 */
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":52
 * 
 *     @staticmethod
 *     def load(file = None):             # <<<<<<<<<<<<<<
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 *         cdef Station st
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_12);
  __Pyx_XDECREF(__pyx_t_29);
  __Pyx_XDECREF(__pyx_t_31);
  __Pyx_XDECREF(__pyx_t_32);
  __Pyx_AddTraceback("czelta.station.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF(__pyx_v_cfg);
  __Pyx_XDECREF(__pyx_v_station);
  __Pyx_XDECREF(__pyx_v_st_name);
  __Pyx_XDECREF(__pyx_v_correction);
  __Pyx_XDECREF(__pyx_v_tdc);
  __Pyx_XDECREF(__pyx_v_from_cor);
  __Pyx_XDECREF(__pyx_v_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/station.pxi":88
 * 
 *     @staticmethod
 *     def get_stations():             # <<<<<<<<<<<<<<
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_7station_9get_stations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6czelta_7station_8get_stations[] = "Return list of all available stations.";
static PyMethodDef __pyx_mdef_6czelta_7station_9get_stations = {__Pyx_NAMESTR("get_stations"), (PyCFunction)__pyx_pw_6czelta_7station_9get_stations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6czelta_7station_8get_stations)};
static PyObject *__pyx_pw_6czelta_7station_9get_stations(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_stations (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("get_stations", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return NULL;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "get_stations", 0))) return NULL;
  __pyx_r = __pyx_pf_6czelta_7station_8get_stations();

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_7station_8get_stations() {
  std::vector<__pyx_t_6czelta_p_Station> __pyx_v_stations;
  PyObject *__pyx_v_rtn = NULL;
  __pyx_t_6czelta_p_Station __pyx_v_st;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  std::vector<__pyx_t_6czelta_p_Station>::iterator __pyx_t_2;
  __pyx_t_6czelta_p_Station __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_stations", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":90
 *     def get_stations():
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()             # <<<<<<<<<<<<<<
 *         rtn = []
 *         for st in stations:
 */
  __pyx_v_stations = Station::getStations();

  /* "/home/martin/Plocha/czelta-python/station.pxi":91
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()
 *         rtn = []             # <<<<<<<<<<<<<<
 *         for st in stations:
 *             rtn.append(station(st.id()))
 */
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_rtn = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":92
 *         cdef vector[p_Station] stations = getStations()
 *         rtn = []
 *         for st in stations:             # <<<<<<<<<<<<<<
 *             rtn.append(station(st.id()))
 *         return rtn
 */
  __pyx_t_2 = __pyx_v_stations.begin();
  for (;;) {
    if (!(__pyx_t_2 != __pyx_v_stations.end())) break;
    __pyx_t_3 = *__pyx_t_2;
    ++__pyx_t_2;
    __pyx_v_st = __pyx_t_3;

    /* "/home/martin/Plocha/czelta-python/station.pxi":93
 *         rtn = []
 *         for st in stations:
 *             rtn.append(station(st.id()))             # <<<<<<<<<<<<<<
 *         return rtn
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_st->id()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_1);
    __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyList_Append(__pyx_v_rtn, __pyx_t_1); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/station.pxi":92
 *         cdef vector[p_Station] stations = getStations()
 *         rtn = []
 *         for st in stations:             # <<<<<<<<<<<<<<
 *             rtn.append(station(st.id()))
 *         return rtn
 */
  }

  /* "/home/martin/Plocha/czelta-python/station.pxi":94
 *         for st in stations:
 *             rtn.append(station(st.id()))
 *         return rtn             # <<<<<<<<<<<<<<
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rtn);
  __pyx_r = __pyx_v_rtn;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":88
 * 
 *     @staticmethod
 *     def get_stations():             # <<<<<<<<<<<<<<
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.station.get_stations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rtn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":3
 * cdef class event:
 *     "Basic czelta class for holding information about events. This time is imposible to create own event"
 *     def __init__(self):             # <<<<<<<<<<<<<<
 *         pass
 * 
 */

/* Python wrapper */
static int __pyx_pw_6czelta_5event_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6czelta_5event_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_6czelta_5event___init__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6czelta_5event___init__(CYTHON_UNUSED struct __pyx_obj_6czelta_event *__pyx_v_self) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":6
 *         pass
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.e.toString().decode(system_encoding)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_2__str__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_2__str__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":7
 * 
 *     def __str__(self):
 *         return self.e.toString().decode(system_encoding)             # <<<<<<<<<<<<<<
 * 
 *     cdef void set(self, Event e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_string_to_py_(__pyx_v_self->e.toString()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_3, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":6
 *         pass
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return self.e.toString().decode(system_encoding)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":9
 *         return self.e.toString().decode(system_encoding)
 * 
 *     cdef void set(self, Event e):             # <<<<<<<<<<<<<<
 *         self.e = e
 * 
 */

static void __pyx_f_6czelta_5event_set(struct __pyx_obj_6czelta_event *__pyx_v_self, Event __pyx_v_e) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":10
 * 
 *     cdef void set(self, Event e):
 *         self.e = e             # <<<<<<<<<<<<<<
 * 
 *     property timestamp:
 */
  __pyx_v_self->e = __pyx_v_e;

  /* "/home/martin/Plocha/czelta-python/event.pxi":9
 *         return self.e.toString().decode(system_encoding)
 * 
 *     cdef void set(self, Event e):             # <<<<<<<<<<<<<<
 *         self.e = e
 * 
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/home/martin/Plocha/czelta-python/event.pxi":14
 *     property timestamp:
 *         "timestamp of event, fastest way to get time of event."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.timestamp()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_9timestamp_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_9timestamp_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_9timestamp___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_9timestamp___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":15
 *         "timestamp of event, fastest way to get time of event."
 *         def __get__(self):
 *             return self.e.timestamp()             # <<<<<<<<<<<<<<
 * 
 *     property datetime:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->e.timestamp()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":14
 *     property timestamp:
 *         "timestamp of event, fastest way to get time of event."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.timestamp()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event.timestamp.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":19
 *     property datetime:
 *         "Return python `datetime <http://docs.python.org/2/library/datetime.html>`_ object. All times with Czelta is in UTC."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return datetime.datetime.utcfromtimestamp(self.e.timestamp())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_8datetime_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_8datetime_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_8datetime___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_8datetime___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":20
 *         "Return python `datetime <http://docs.python.org/2/library/datetime.html>`_ object. All times with Czelta is in UTC."
 *         def __get__(self):
 *             return datetime.datetime.utcfromtimestamp(self.e.timestamp())             # <<<<<<<<<<<<<<
 * 
 *     property time_since_second:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_utcfromtimestamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->e.timestamp()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":19
 *     property datetime:
 *         "Return python `datetime <http://docs.python.org/2/library/datetime.html>`_ object. All times with Czelta is in UTC."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return datetime.datetime.utcfromtimestamp(self.e.timestamp())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event.datetime.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":24
 *     property time_since_second:
 *         "Return time elapsed since last second (0-0.999999... sec)."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.time_since_second()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_17time_since_second_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_17time_since_second_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_17time_since_second___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_17time_since_second___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":25
 *         "Return time elapsed since last second (0-0.999999... sec)."
 *         def __get__(self):
 *             return self.e.time_since_second()             # <<<<<<<<<<<<<<
 * 
 *     property ADC:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->e.time_since_second()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":24
 *     property time_since_second:
 *         "Return time elapsed since last second (0-0.999999... sec)."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.time_since_second()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event.time_since_second.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":29
 *     property ADC:
 *         "Relative energy absorbed in each detector. Probably not comparable along different stations. Minimum value is 0 and Maximum is 2047. If it is 2047 it shloud be more."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef short* adc = self.e.ADC()
 *             return (adc[0], adc[1], adc[2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_3ADC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_3ADC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_3ADC___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_3ADC___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  short *__pyx_v_adc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":30
 *         "Relative energy absorbed in each detector. Probably not comparable along different stations. Minimum value is 0 and Maximum is 2047. If it is 2047 it shloud be more."
 *         def __get__(self):
 *             cdef short* adc = self.e.ADC()             # <<<<<<<<<<<<<<
 *             return (adc[0], adc[1], adc[2])
 * 
 */
  __pyx_v_adc = __pyx_v_self->e.ADC();

  /* "/home/martin/Plocha/czelta-python/event.pxi":31
 *         def __get__(self):
 *             cdef short* adc = self.e.ADC()
 *             return (adc[0], adc[1], adc[2])             # <<<<<<<<<<<<<<
 * 
 *     property TDC:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short((__pyx_v_adc[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_short((__pyx_v_adc[1])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short((__pyx_v_adc[2])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":29
 *     property ADC:
 *         "Relative energy absorbed in each detector. Probably not comparable along different stations. Minimum value is 0 and Maximum is 2047. If it is 2047 it shloud be more."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef short* adc = self.e.ADC()
 *             return (adc[0], adc[1], adc[2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event.ADC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":35
 *     property TDC:
 *         "Relative time of activation each detector. TDC*25/1e12 = sec. Format: ``(TDC0, TDC1, TDC2)``."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef short* tdc = self.e.TDC()
 *             return (tdc[0], tdc[1], tdc[2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_3TDC_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_3TDC_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_3TDC___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_3TDC___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  short *__pyx_v_tdc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":36
 *         "Relative time of activation each detector. TDC*25/1e12 = sec. Format: ``(TDC0, TDC1, TDC2)``."
 *         def __get__(self):
 *             cdef short* tdc = self.e.TDC()             # <<<<<<<<<<<<<<
 *             return (tdc[0], tdc[1], tdc[2])
 * 
 */
  __pyx_v_tdc = __pyx_v_self->e.TDC();

  /* "/home/martin/Plocha/czelta-python/event.pxi":37
 *         def __get__(self):
 *             cdef short* tdc = self.e.TDC()
 *             return (tdc[0], tdc[1], tdc[2])             # <<<<<<<<<<<<<<
 * 
 *     property TDC_corrected:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short((__pyx_v_tdc[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_short((__pyx_v_tdc[1])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short((__pyx_v_tdc[2])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":35
 *     property TDC:
 *         "Relative time of activation each detector. TDC*25/1e12 = sec. Format: ``(TDC0, TDC1, TDC2)``."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef short* tdc = self.e.TDC()
 *             return (tdc[0], tdc[1], tdc[2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event.TDC.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":41
 *     property TDC_corrected:
 *         "Relative time of activation each detector. Corrected and can be used to calculate diraction. Correction options are in `config_data.JSON`. TDC*25/1e12 = sec."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef short* tdc = self.e.TDCCorrected()
 *             return (tdc[0], tdc[1], tdc[2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_13TDC_corrected_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_13TDC_corrected_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_13TDC_corrected___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_13TDC_corrected___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  short *__pyx_v_tdc;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":42
 *         "Relative time of activation each detector. Corrected and can be used to calculate diraction. Correction options are in `config_data.JSON`. TDC*25/1e12 = sec."
 *         def __get__(self):
 *             cdef short* tdc = self.e.TDCCorrected()             # <<<<<<<<<<<<<<
 *             return (tdc[0], tdc[1], tdc[2])
 * 
 */
  __pyx_v_tdc = __pyx_v_self->e.TDCCorrected();

  /* "/home/martin/Plocha/czelta-python/event.pxi":43
 *         def __get__(self):
 *             cdef short* tdc = self.e.TDCCorrected()
 *             return (tdc[0], tdc[1], tdc[2])             # <<<<<<<<<<<<<<
 * 
 *     property temps_detector:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_short((__pyx_v_tdc[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyInt_From_short((__pyx_v_tdc[1])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyInt_From_short((__pyx_v_tdc[2])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":41
 *     property TDC_corrected:
 *         "Relative time of activation each detector. Corrected and can be used to calculate diraction. Correction options are in `config_data.JSON`. TDC*25/1e12 = sec."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef short* tdc = self.e.TDCCorrected()
 *             return (tdc[0], tdc[1], tdc[2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event.TDC_corrected.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":47
 *     property temps_detector:
 *         "Return 3 temps of each detector in time of event."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float* temps = self.e.temps()
 *             return (temps[0], temps[1], temps[2])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_14temps_detector_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_14temps_detector_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_14temps_detector___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_14temps_detector___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  float *__pyx_v_temps;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":48
 *         "Return 3 temps of each detector in time of event."
 *         def __get__(self):
 *             cdef float* temps = self.e.temps()             # <<<<<<<<<<<<<<
 *             return (temps[0], temps[1], temps[2])
 * 
 */
  __pyx_v_temps = __pyx_v_self->e.temps();

  /* "/home/martin/Plocha/czelta-python/event.pxi":49
 *         def __get__(self):
 *             cdef float* temps = self.e.temps()
 *             return (temps[0], temps[1], temps[2])             # <<<<<<<<<<<<<<
 * 
 *     property temp_crate:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble((__pyx_v_temps[0])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyFloat_FromDouble((__pyx_v_temps[1])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyFloat_FromDouble((__pyx_v_temps[2])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":47
 *     property temps_detector:
 *         "Return 3 temps of each detector in time of event."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float* temps = self.e.temps()
 *             return (temps[0], temps[1], temps[2])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event.temps_detector.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":53
 *     property temp_crate:
 *         "Return Temperature in crate in time of event."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.tCrate()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_10temp_crate_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_10temp_crate_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_10temp_crate___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_10temp_crate___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":54
 *         "Return Temperature in crate in time of event."
 *         def __get__(self):
 *             return self.e.tCrate()             # <<<<<<<<<<<<<<
 * 
 *     property calibration:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->e.tCrate()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":53
 *     property temp_crate:
 *         "Return Temperature in crate in time of event."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.tCrate()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event.temp_crate.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":58
 *     property calibration:
 *         "Calibration events are events actived by LED diod in each detectors."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.isCalib()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_11calibration_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_11calibration_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_11calibration___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_11calibration___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":59
 *         "Calibration events are events actived by LED diod in each detectors."
 *         def __get__(self):
 *             return self.e.isCalib()             # <<<<<<<<<<<<<<
 * 
 *     property AH_direction:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBool_FromLong(__pyx_v_self->e.isCalib()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":58
 *     property calibration:
 *         "Calibration events are events actived by LED diod in each detectors."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.e.isCalib()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event.calibration.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":63
 *     property AH_direction:
 *         "Return ``(horizon, azimuth)`` direction of shower. Azimuth is from south clockwise. Both values are in Degres. Must have loaded info about stations and set station for ``event``/``event_reader``"
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float *AH = self.e.calculateDir()
 *             if AH:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_12AH_direction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_12AH_direction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_12AH_direction___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_12AH_direction___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  float *__pyx_v_AH;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":64
 *         "Return ``(horizon, azimuth)`` direction of shower. Azimuth is from south clockwise. Both values are in Degres. Must have loaded info about stations and set station for ``event``/``event_reader``"
 *         def __get__(self):
 *             cdef float *AH = self.e.calculateDir()             # <<<<<<<<<<<<<<
 *             if AH:
 *                 return (AH[0],AH[1])
 */
  __pyx_v_AH = __pyx_v_self->e.calculateDir();

  /* "/home/martin/Plocha/czelta-python/event.pxi":65
 *         def __get__(self):
 *             cdef float *AH = self.e.calculateDir()
 *             if AH:             # <<<<<<<<<<<<<<
 *                 return (AH[0],AH[1])
 * 
 */
  __pyx_t_1 = (__pyx_v_AH != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/event.pxi":66
 *             cdef float *AH = self.e.calculateDir()
 *             if AH:
 *                 return (AH[0],AH[1])             # <<<<<<<<<<<<<<
 * 
 *     property RAD_direction:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_AH[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_AH[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event.pxi":63
 *     property AH_direction:
 *         "Return ``(horizon, azimuth)`` direction of shower. Azimuth is from south clockwise. Both values are in Degres. Must have loaded info about stations and set station for ``event``/``event_reader``"
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float *AH = self.e.calculateDir()
 *             if AH:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event.AH_direction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":70
 *     property RAD_direction:
 *         "Return ``(right ascension, declination)`` direction of shower in Degrees. Must have loaded info about stations and set station for ``event``/``event_reader``"
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float *DRA = self.e.calculateEarthDir()
 *             if DRA:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_13RAD_direction_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_13RAD_direction_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_13RAD_direction___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_13RAD_direction___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  float *__pyx_v_DRA;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":71
 *         "Return ``(right ascension, declination)`` direction of shower in Degrees. Must have loaded info about stations and set station for ``event``/``event_reader``"
 *         def __get__(self):
 *             cdef float *DRA = self.e.calculateEarthDir()             # <<<<<<<<<<<<<<
 *             if DRA:
 *                 return (DRA[0], DRA[1])
 */
  __pyx_v_DRA = __pyx_v_self->e.calculateEarthDir();

  /* "/home/martin/Plocha/czelta-python/event.pxi":72
 *         def __get__(self):
 *             cdef float *DRA = self.e.calculateEarthDir()
 *             if DRA:             # <<<<<<<<<<<<<<
 *                 return (DRA[0], DRA[1])
 * 
 */
  __pyx_t_1 = (__pyx_v_DRA != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/event.pxi":73
 *             cdef float *DRA = self.e.calculateEarthDir()
 *             if DRA:
 *                 return (DRA[0], DRA[1])             # <<<<<<<<<<<<<<
 * 
 *     property station:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = PyFloat_FromDouble((__pyx_v_DRA[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyFloat_FromDouble((__pyx_v_DRA[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 73; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event.pxi":70
 *     property RAD_direction:
 *         "Return ``(right ascension, declination)`` direction of shower in Degrees. Must have loaded info about stations and set station for ``event``/``event_reader``"
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef float *DRA = self.e.calculateEarthDir()
 *             if DRA:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event.RAD_direction.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":76
 * 
 *     property station:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return station(self.e.getStation())
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_7station_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_5event_7station_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_7station___get__(((struct __pyx_obj_6czelta_event *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_7station___get__(struct __pyx_obj_6czelta_event *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/event.pxi":77
 *     property station:
 *         def __get__(self):
 *             return station(self.e.getStation())             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_station(self, station_id):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->e.getStation()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event.pxi":76
 * 
 *     property station:
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return station(self.e.getStation())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.event.station.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event.pxi":79
 *             return station(self.e.getStation())
 * 
 *     cpdef set_station(self, station_id):             # <<<<<<<<<<<<<<
 *         "Set station to correct tdc and calculate direction, it is better to change station of entire ``czelta.event_reader``."
 *         self.e.setStation(<int>station_id)
 */

static PyObject *__pyx_pw_6czelta_5event_5set_station(PyObject *__pyx_v_self, PyObject *__pyx_v_station_id); /*proto*/
static PyObject *__pyx_f_6czelta_5event_set_station(struct __pyx_obj_6czelta_event *__pyx_v_self, PyObject *__pyx_v_station_id, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_station", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_station); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_5event_5set_station)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_station_id);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_station_id);
      __Pyx_GIVEREF(__pyx_v_station_id);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event.pxi":81
 *     cpdef set_station(self, station_id):
 *         "Set station to correct tdc and calculate direction, it is better to change station of entire ``czelta.event_reader``."
 *         self.e.setStation(<int>station_id)             # <<<<<<<<<<<<<<
 */
  __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_station_id); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->e.setStation(((int)__pyx_t_4));

  /* "/home/martin/Plocha/czelta-python/event.pxi":79
 *             return station(self.e.getStation())
 * 
 *     cpdef set_station(self, station_id):             # <<<<<<<<<<<<<<
 *         "Set station to correct tdc and calculate direction, it is better to change station of entire ``czelta.event_reader``."
 *         self.e.setStation(<int>station_id)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event.set_station", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5event_5set_station(PyObject *__pyx_v_self, PyObject *__pyx_v_station_id); /*proto*/
static char __pyx_doc_6czelta_5event_4set_station[] = "Set station to correct tdc and calculate direction, it is better to change station of entire ``czelta.event_reader``.";
static PyObject *__pyx_pw_6czelta_5event_5set_station(PyObject *__pyx_v_self, PyObject *__pyx_v_station_id) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_station (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_5event_4set_station(((struct __pyx_obj_6czelta_event *)__pyx_v_self), ((PyObject *)__pyx_v_station_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_5event_4set_station(struct __pyx_obj_6czelta_event *__pyx_v_self, PyObject *__pyx_v_station_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_station", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_self->__pyx_vtab)->set_station(__pyx_v_self, __pyx_v_station_id, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event.set_station", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":9
 * coincidence object is also iterable, more in examples.
 * """
 *     def __init__(self,event_readers,float max_difference, bint save_events = True, stations = None):             # <<<<<<<<<<<<<<
 *         cdef int st_id, st
 *         if not len(event_readers) in [2,3]:
 */

/* Python wrapper */
static int __pyx_pw_6czelta_11coincidence_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6czelta_11coincidence_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_event_readers = 0;
  float __pyx_v_max_difference;
  int __pyx_v_save_events;
  PyObject *__pyx_v_stations = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_event_readers,&__pyx_n_s_max_difference,&__pyx_n_s_save_events,&__pyx_n_s_stations,0};
    PyObject* values[4] = {0,0,0,0};
    values[3] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_event_readers)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_max_difference)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, 1); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_save_events);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_stations);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_event_readers = values[0];
    __pyx_v_max_difference = __pyx_PyFloat_AsFloat(values[1]); if (unlikely((__pyx_v_max_difference == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_save_events = __Pyx_PyObject_IsTrue(values[2]); if (unlikely((__pyx_v_save_events == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_save_events = ((int)1);
    }
    __pyx_v_stations = values[3];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[2]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.coincidence.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_11coincidence___init__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self), __pyx_v_event_readers, __pyx_v_max_difference, __pyx_v_save_events, __pyx_v_stations);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6czelta_11coincidence___init__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self, PyObject *__pyx_v_event_readers, float __pyx_v_max_difference, int __pyx_v_save_events, PyObject *__pyx_v_stations) {
  int __pyx_v_st_id;
  int __pyx_v_st;
  Py_ssize_t __pyx_v_i;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":11
 *     def __init__(self,event_readers,float max_difference, bint save_events = True, stations = None):
 *         cdef int st_id, st
 *         if not len(event_readers) in [2,3]:             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         for i in range(len(event_readers)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_event_readers); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 2) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((__pyx_t_1 != 3) != 0);
    __pyx_t_4 = __pyx_t_3;
  } else {
    __pyx_t_4 = __pyx_t_2;
  }
  __pyx_t_2 = (__pyx_t_4 != 0);
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":12
 *         cdef int st_id, st
 *         if not len(event_readers) in [2,3]:
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         for i in range(len(event_readers)):
 *             if not isinstance(event_readers[i], event_reader):
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":13
 *         if not len(event_readers) in [2,3]:
 *             raise TypeError
 *         for i in range(len(event_readers)):             # <<<<<<<<<<<<<<
 *             if not isinstance(event_readers[i], event_reader):
 *                 raise TypeError
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_event_readers); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  for (__pyx_t_5 = 0; __pyx_t_5 < __pyx_t_1; __pyx_t_5+=1) {
    __pyx_v_i = __pyx_t_5;

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":14
 *             raise TypeError
 *         for i in range(len(event_readers)):
 *             if not isinstance(event_readers[i], event_reader):             # <<<<<<<<<<<<<<
 *                 raise TypeError
 *             self.c.readers[i] = &(<event_reader>event_readers[i]).er
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_event_readers, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_2 = __Pyx_TypeCheck(__pyx_t_6, ((PyObject*)__pyx_ptype_6czelta_event_reader)); 
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
    __pyx_t_4 = ((!(__pyx_t_2 != 0)) != 0);
    if (__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":15
 *         for i in range(len(event_readers)):
 *             if not isinstance(event_readers[i], event_reader):
 *                 raise TypeError             # <<<<<<<<<<<<<<
 *             self.c.readers[i] = &(<event_reader>event_readers[i]).er
 *         self.c.n = len(event_readers)
 */
      __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
      {__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":16
 *             if not isinstance(event_readers[i], event_reader):
 *                 raise TypeError
 *             self.c.readers[i] = &(<event_reader>event_readers[i]).er             # <<<<<<<<<<<<<<
 *         self.c.n = len(event_readers)
 *         if stations!= None and len(stations)==len(event_readers):
 */
    __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_event_readers, __pyx_v_i, Py_ssize_t, 1, PyInt_FromSsize_t, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_6);
    (__pyx_v_self->c.readers[__pyx_v_i]) = (&((struct __pyx_obj_6czelta_event_reader *)__pyx_t_6)->er);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":17
 *                 raise TypeError
 *             self.c.readers[i] = &(<event_reader>event_readers[i]).er
 *         self.c.n = len(event_readers)             # <<<<<<<<<<<<<<
 *         if stations!= None and len(stations)==len(event_readers):
 *             for st in range(len(stations)):
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_event_readers); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->c.n = __pyx_t_1;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":18
 *             self.c.readers[i] = &(<event_reader>event_readers[i]).er
 *         self.c.n = len(event_readers)
 *         if stations!= None and len(stations)==len(event_readers):             # <<<<<<<<<<<<<<
 *             for st in range(len(stations)):
 *                 st_id = 0
 */
  __pyx_t_6 = PyObject_RichCompare(__pyx_v_stations, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_6); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_6); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  if (__pyx_t_4) {
    __pyx_t_1 = PyObject_Length(__pyx_v_stations); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_5 = PyObject_Length(__pyx_v_event_readers); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_2 = (__pyx_t_1 == __pyx_t_5);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_4;
  }
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":19
 *         self.c.n = len(event_readers)
 *         if stations!= None and len(stations)==len(event_readers):
 *             for st in range(len(stations)):             # <<<<<<<<<<<<<<
 *                 st_id = 0
 *                 if type(stations[st]) == station:
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_stations); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {
      __pyx_v_st = __pyx_t_7;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":20
 *         if stations!= None and len(stations)==len(event_readers):
 *             for st in range(len(stations)):
 *                 st_id = 0             # <<<<<<<<<<<<<<
 *                 if type(stations[st]) == station:
 *                     st_id = stations[st].id()
 */
      __pyx_v_st_id = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":21
 *             for st in range(len(stations)):
 *                 st_id = 0
 *                 if type(stations[st]) == station:             # <<<<<<<<<<<<<<
 *                     st_id = stations[st].id()
 *                 else:
 */
      __pyx_t_6 = __Pyx_GetItemInt(__pyx_v_stations, __pyx_v_st, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      __pyx_t_8 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_6)), ((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), Py_EQ); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_3) {

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":22
 *                 st_id = 0
 *                 if type(stations[st]) == station:
 *                     st_id = stations[st].id()             # <<<<<<<<<<<<<<
 *                 else:
 *                     st_id = station(stations[st]).id()
 */
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_stations, __pyx_v_st, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 22; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_st_id = __pyx_t_9;
        goto __pyx_L10;
      }
      /*else*/ {

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":24
 *                     st_id = stations[st].id()
 *                 else:
 *                     st_id = station(stations[st]).id()             # <<<<<<<<<<<<<<
 *                 self.c.stations[st] = st_id
 *         else:
 */
        __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_stations, __pyx_v_st, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_6 = PyTuple_New(1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_8);
        __Pyx_GIVEREF(__pyx_t_8);
        __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_6, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_id); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
        __pyx_t_9 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_9 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_st_id = __pyx_t_9;
      }
      __pyx_L10:;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":25
 *                 else:
 *                     st_id = station(stations[st]).id()
 *                 self.c.stations[st] = st_id             # <<<<<<<<<<<<<<
 *         else:
 *             for st in range(len(event_readers)):
 */
      (__pyx_v_self->c.stations[__pyx_v_st]) = __pyx_v_st_id;
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":27
 *                 self.c.stations[st] = st_id
 *         else:
 *             for st in range(len(event_readers)):             # <<<<<<<<<<<<<<
 *                 st_id = (<event_reader>event_readers[st]).er.getStation();
 *                 self.c.stations[st] = st_id
 */
    __pyx_t_5 = PyObject_Length(__pyx_v_event_readers); if (unlikely(__pyx_t_5 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_5; __pyx_t_7+=1) {
      __pyx_v_st = __pyx_t_7;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":28
 *         else:
 *             for st in range(len(event_readers)):
 *                 st_id = (<event_reader>event_readers[st]).er.getStation();             # <<<<<<<<<<<<<<
 *                 self.c.stations[st] = st_id
 *         self.c.calc(max_difference, save_events)
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_event_readers, __pyx_v_st, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_v_st_id = ((struct __pyx_obj_6czelta_event_reader *)__pyx_t_8)->er.getStation();
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":29
 *             for st in range(len(event_readers)):
 *                 st_id = (<event_reader>event_readers[st]).er.getStation();
 *                 self.c.stations[st] = st_id             # <<<<<<<<<<<<<<
 *         self.c.calc(max_difference, save_events)
 * 
 */
      (__pyx_v_self->c.stations[__pyx_v_st]) = __pyx_v_st_id;
    }
  }
  __pyx_L7:;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":30
 *                 st_id = (<event_reader>event_readers[st]).er.getStation();
 *                 self.c.stations[st] = st_id
 *         self.c.calc(max_difference, save_events)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
  __pyx_v_self->c.calc(__pyx_v_max_difference, __pyx_v_save_events);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":9
 * coincidence object is also iterable, more in examples.
 * """
 *     def __init__(self,event_readers,float max_difference, bint save_events = True, stations = None):             # <<<<<<<<<<<<<<
 *         cdef int st_id, st
 *         if not len(event_readers) in [2,3]:
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("czelta.coincidence.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":32
 *         self.c.calc(max_difference, save_events)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.c.numberOfCoincidences
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6czelta_11coincidence_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6czelta_11coincidence_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_2__len__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6czelta_11coincidence_2__len__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":33
 * 
 *     def __len__(self):
 *         return self.c.numberOfCoincidences             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, index):
 */
  __pyx_r = __pyx_v_self->c.numberOfCoincidences;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":32
 *         self.c.calc(max_difference, save_events)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.c.numberOfCoincidences
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":35
 *         return self.c.numberOfCoincidences
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if type(index) != int:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_4__getitem__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self), ((PyObject *)__pyx_v_index));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_4__getitem__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self, PyObject *__pyx_v_index) {
  int __pyx_v_i;
  PyObject *__pyx_v_rtn = NULL;
  PyObject *__pyx_v_AH = NULL;
  PyObject *__pyx_v_DRA = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_t_8;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":37
 *     def __getitem__(self, index):
 *         cdef int i
 *         if type(index) != int:             # <<<<<<<<<<<<<<
 *             raise TypeError
 *         i = index
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_index)), ((PyObject *)((PyObject*)(&PyInt_Type))), Py_NE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":38
 *         cdef int i
 *         if type(index) != int:
 *             raise TypeError             # <<<<<<<<<<<<<<
 *         i = index
 *         if self.c.events_saved:
 */
    __Pyx_Raise(__pyx_builtin_TypeError, 0, 0, 0);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":39
 *         if type(index) != int:
 *             raise TypeError
 *         i = index             # <<<<<<<<<<<<<<
 *         if self.c.events_saved:
 *             if self.c.n == 2:
 */
  __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_v_index); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_i = __pyx_t_3;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":40
 *             raise TypeError
 *         i = index
 *         if self.c.events_saved:             # <<<<<<<<<<<<<<
 *             if self.c.n == 2:
 *                 rtn = (self.c.delta[i], event(), event())
 */
  __pyx_t_2 = (__pyx_v_self->c.events_saved != 0);
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":41
 *         i = index
 *         if self.c.events_saved:
 *             if self.c.n == 2:             # <<<<<<<<<<<<<<
 *                 rtn = (self.c.delta[i], event(), event())
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 */
    __pyx_t_2 = ((__pyx_v_self->c.n == 2) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":42
 *         if self.c.events_saved:
 *             if self.c.n == 2:
 *                 rtn = (self.c.delta[i], event(), event())             # <<<<<<<<<<<<<<
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 */
      __pyx_t_1 = PyFloat_FromDouble((__pyx_v_self->c.delta[__pyx_v_i])); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_6 = PyTuple_New(3); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_6);
      PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
      __Pyx_GIVEREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_4);
      __Pyx_GIVEREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_1 = 0;
      __pyx_t_4 = 0;
      __pyx_t_5 = 0;
      __pyx_v_rtn = ((PyObject*)__pyx_t_6);
      __pyx_t_6 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":43
 *             if self.c.n == 2:
 *                 rtn = (self.c.delta[i], event(), event())
 *                 (<event>rtn[1]).set(self.c.events[0][i])             # <<<<<<<<<<<<<<
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 *                 return rtn
 */
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_rtn, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      ((struct __pyx_vtabstruct_6czelta_event *)((struct __pyx_obj_6czelta_event *)__pyx_t_6)->__pyx_vtab)->set(((struct __pyx_obj_6czelta_event *)__pyx_t_6), ((__pyx_v_self->c.events[0])[__pyx_v_i]));
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":44
 *                 rtn = (self.c.delta[i], event(), event())
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 *                 (<event>rtn[2]).set(self.c.events[1][i])             # <<<<<<<<<<<<<<
 *                 return rtn
 *             else:
 */
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_rtn, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      ((struct __pyx_vtabstruct_6czelta_event *)((struct __pyx_obj_6czelta_event *)__pyx_t_6)->__pyx_vtab)->set(((struct __pyx_obj_6czelta_event *)__pyx_t_6), ((__pyx_v_self->c.events[1])[__pyx_v_i]));
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":45
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 *                 return rtn             # <<<<<<<<<<<<<<
 *             else:
 *                 if self.c.dirs.size()!=0:
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_rtn);
      __pyx_r = __pyx_v_rtn;
      goto __pyx_L0;
    }
    /*else*/ {

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":47
 *                 return rtn
 *             else:
 *                 if self.c.dirs.size()!=0:             # <<<<<<<<<<<<<<
 *                     AH = (self.c.dirs[4*i], self.c.dirs[4*i+1])
 *                     if AH[0]==0 and AH[1]==0:
 */
      __pyx_t_2 = ((__pyx_v_self->c.dirs.size() != 0) != 0);
      if (__pyx_t_2) {

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":48
 *             else:
 *                 if self.c.dirs.size()!=0:
 *                     AH = (self.c.dirs[4*i], self.c.dirs[4*i+1])             # <<<<<<<<<<<<<<
 *                     if AH[0]==0 and AH[1]==0:
 *                         AH = None
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->c.dirs[(4 * __pyx_v_i)])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->c.dirs[((4 * __pyx_v_i) + 1)])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_v_AH = __pyx_t_4;
        __pyx_t_4 = 0;

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":49
 *                 if self.c.dirs.size()!=0:
 *                     AH = (self.c.dirs[4*i], self.c.dirs[4*i+1])
 *                     if AH[0]==0 and AH[1]==0:             # <<<<<<<<<<<<<<
 *                         AH = None
 *                         DRA = None
 */
        __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_AH, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = PyObject_RichCompare(__pyx_t_4, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        if (__pyx_t_2) {
          __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_AH, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_int_0, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
          __pyx_t_7 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_7 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
          __pyx_t_8 = __pyx_t_7;
        } else {
          __pyx_t_8 = __pyx_t_2;
        }
        if (__pyx_t_8) {

          /* "/home/martin/Plocha/czelta-python/coincidence.pxi":50
 *                     AH = (self.c.dirs[4*i], self.c.dirs[4*i+1])
 *                     if AH[0]==0 and AH[1]==0:
 *                         AH = None             # <<<<<<<<<<<<<<
 *                         DRA = None
 *                     else:
 */
          __Pyx_INCREF(Py_None);
          __Pyx_DECREF_SET(__pyx_v_AH, Py_None);

          /* "/home/martin/Plocha/czelta-python/coincidence.pxi":51
 *                     if AH[0]==0 and AH[1]==0:
 *                         AH = None
 *                         DRA = None             # <<<<<<<<<<<<<<
 *                     else:
 *                         DRA = (self.c.dirs[4*i+2], self.c.dirs[4*i+3])
 */
          __Pyx_INCREF(Py_None);
          __pyx_v_DRA = Py_None;
          goto __pyx_L7;
        }
        /*else*/ {

          /* "/home/martin/Plocha/czelta-python/coincidence.pxi":53
 *                         DRA = None
 *                     else:
 *                         DRA = (self.c.dirs[4*i+2], self.c.dirs[4*i+3])             # <<<<<<<<<<<<<<
 *                     rtn = (self.c.delta[i], event(), event(), event(),
 *                           AH, DRA)
 */
          __pyx_t_4 = PyFloat_FromDouble((__pyx_v_self->c.dirs[((4 * __pyx_v_i) + 2)])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_4);
          __pyx_t_5 = PyFloat_FromDouble((__pyx_v_self->c.dirs[((4 * __pyx_v_i) + 3)])); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_5);
          __pyx_t_6 = PyTuple_New(2); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_6);
          PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_4);
          __Pyx_GIVEREF(__pyx_t_4);
          PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_5);
          __Pyx_GIVEREF(__pyx_t_5);
          __pyx_t_4 = 0;
          __pyx_t_5 = 0;
          __pyx_v_DRA = __pyx_t_6;
          __pyx_t_6 = 0;
        }
        __pyx_L7:;

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":54
 *                     else:
 *                         DRA = (self.c.dirs[4*i+2], self.c.dirs[4*i+3])
 *                     rtn = (self.c.delta[i], event(), event(), event(),             # <<<<<<<<<<<<<<
 *                           AH, DRA)
 *                 else:
 */
        __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->c.delta[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":55
 *                         DRA = (self.c.dirs[4*i+2], self.c.dirs[4*i+3])
 *                     rtn = (self.c.delta[i], event(), event(), event(),
 *                           AH, DRA)             # <<<<<<<<<<<<<<
 *                 else:
 *                     rtn = (self.c.delta[i], event(), event(), event())
 */
        __pyx_t_9 = PyTuple_New(6); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_6);
        __Pyx_GIVEREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __Pyx_INCREF(__pyx_v_AH);
        PyTuple_SET_ITEM(__pyx_t_9, 4, __pyx_v_AH);
        __Pyx_GIVEREF(__pyx_v_AH);
        __Pyx_INCREF(__pyx_v_DRA);
        PyTuple_SET_ITEM(__pyx_t_9, 5, __pyx_v_DRA);
        __Pyx_GIVEREF(__pyx_v_DRA);
        __pyx_t_6 = 0;
        __pyx_t_5 = 0;
        __pyx_t_4 = 0;
        __pyx_t_1 = 0;
        __pyx_v_rtn = ((PyObject*)__pyx_t_9);
        __pyx_t_9 = 0;
        goto __pyx_L6;
      }
      /*else*/ {

        /* "/home/martin/Plocha/czelta-python/coincidence.pxi":57
 *                           AH, DRA)
 *                 else:
 *                     rtn = (self.c.delta[i], event(), event(), event())             # <<<<<<<<<<<<<<
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 */
        __pyx_t_9 = PyFloat_FromDouble((__pyx_v_self->c.delta[__pyx_v_i])); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_6);
        PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_9);
        __Pyx_GIVEREF(__pyx_t_9);
        PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
        __Pyx_GIVEREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_9 = 0;
        __pyx_t_1 = 0;
        __pyx_t_4 = 0;
        __pyx_t_5 = 0;
        __pyx_v_rtn = ((PyObject*)__pyx_t_6);
        __pyx_t_6 = 0;
      }
      __pyx_L6:;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":58
 *                 else:
 *                     rtn = (self.c.delta[i], event(), event(), event())
 *                 (<event>rtn[1]).set(self.c.events[0][i])             # <<<<<<<<<<<<<<
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 *                 (<event>rtn[3]).set(self.c.events[2][i])
 */
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_rtn, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      ((struct __pyx_vtabstruct_6czelta_event *)((struct __pyx_obj_6czelta_event *)__pyx_t_6)->__pyx_vtab)->set(((struct __pyx_obj_6czelta_event *)__pyx_t_6), ((__pyx_v_self->c.events[0])[__pyx_v_i]));
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":59
 *                     rtn = (self.c.delta[i], event(), event(), event())
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 *                 (<event>rtn[2]).set(self.c.events[1][i])             # <<<<<<<<<<<<<<
 *                 (<event>rtn[3]).set(self.c.events[2][i])
 *                 return rtn
 */
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_rtn, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      ((struct __pyx_vtabstruct_6czelta_event *)((struct __pyx_obj_6czelta_event *)__pyx_t_6)->__pyx_vtab)->set(((struct __pyx_obj_6czelta_event *)__pyx_t_6), ((__pyx_v_self->c.events[1])[__pyx_v_i]));
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":60
 *                 (<event>rtn[1]).set(self.c.events[0][i])
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 *                 (<event>rtn[3]).set(self.c.events[2][i])             # <<<<<<<<<<<<<<
 *                 return rtn
 *         else:
 */
      __pyx_t_6 = __Pyx_GetItemInt_Tuple(__pyx_v_rtn, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_6 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_6);
      ((struct __pyx_vtabstruct_6czelta_event *)((struct __pyx_obj_6czelta_event *)__pyx_t_6)->__pyx_vtab)->set(((struct __pyx_obj_6czelta_event *)__pyx_t_6), ((__pyx_v_self->c.events[2])[__pyx_v_i]));
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":61
 *                 (<event>rtn[2]).set(self.c.events[1][i])
 *                 (<event>rtn[3]).set(self.c.events[2][i])
 *                 return rtn             # <<<<<<<<<<<<<<
 *         else:
 *             return (self.c.delta[i],)
 */
      __Pyx_XDECREF(__pyx_r);
      __Pyx_INCREF(__pyx_v_rtn);
      __pyx_r = __pyx_v_rtn;
      goto __pyx_L0;
    }
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":63
 *                 return rtn
 *         else:
 *             return (self.c.delta[i],)             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_6 = PyFloat_FromDouble((__pyx_v_self->c.delta[__pyx_v_i])); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_6);
    __pyx_t_6 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":35
 *         return self.c.numberOfCoincidences
 * 
 *     def __getitem__(self, index):             # <<<<<<<<<<<<<<
 *         cdef int i
 *         if type(index) != int:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("czelta.coincidence.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_rtn);
  __Pyx_XDECREF(__pyx_v_AH);
  __Pyx_XDECREF(__pyx_v_DRA);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":65
 *             return (self.c.delta[i],)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_7__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_6__iter__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_6__iter__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":66
 * 
 *     def __iter__(self):
 *         self.i = -1             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->i = -1;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":67
 *     def __iter__(self):
 *         self.i = -1
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":65
 *             return (self.c.delta[i],)
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":69
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i += 1
 *         if self.i < self.c.numberOfCoincidences:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_9__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_9__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_8__next__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_8__next__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":70
 * 
 *     def __next__(self):
 *         self.i += 1             # <<<<<<<<<<<<<<
 *         if self.i < self.c.numberOfCoincidences:
 *             return self[self.i]
 */
  __pyx_v_self->i = (__pyx_v_self->i + 1);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":71
 *     def __next__(self):
 *         self.i += 1
 *         if self.i < self.c.numberOfCoincidences:             # <<<<<<<<<<<<<<
 *             return self[self.i]
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->i < __pyx_v_self->c.numberOfCoincidences) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":72
 *         self.i += 1
 *         if self.i < self.c.numberOfCoincidences:
 *             return self[self.i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self), __pyx_v_self->i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":74
 *             return self[self.i]
 *         else:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *     property delta:
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":69
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i += 1
 *         if self.i < self.c.numberOfCoincidences:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.coincidence.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":78
 *     property delta:
 *         'Return all deltas of coincidences.'
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return list(self.c.delta)
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_5delta_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_5delta_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_5delta___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_5delta___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":79
 *         'Return all deltas of coincidences.'
 *         def __get__(self):
 *             return list(self.c.delta)             # <<<<<<<<<<<<<<
 * 
 *     property stations:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __pyx_convert_vector_to_py_double(__pyx_v_self->c.delta); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":78
 *     property delta:
 *         'Return all deltas of coincidences.'
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return list(self.c.delta)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.coincidence.delta.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":83
 *     property stations:
 *         'Get stations used to calculate direction of triple-coincidence.'
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c.n==2:
 *                 return station(self.c.stations[0]), station(self.c.stations[1])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_8stations_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_8stations_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_8stations___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_8stations___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":84
 *         'Get stations used to calculate direction of triple-coincidence.'
 *         def __get__(self):
 *             if self.c.n==2:             # <<<<<<<<<<<<<<
 *                 return station(self.c.stations[0]), station(self.c.stations[1])
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->c.n == 2) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":85
 *         def __get__(self):
 *             if self.c.n==2:
 *                 return station(self.c.stations[0]), station(self.c.stations[1])             # <<<<<<<<<<<<<<
 *             else:
 *                 return station(self.c.stations[0]), station(self.c.stations[1]), station(self.c.stations[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->c.stations[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c.stations[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":87
 *                 return station(self.c.stations[0]), station(self.c.stations[1])
 *             else:
 *                 return station(self.c.stations[0]), station(self.c.stations[1]), station(self.c.stations[2])             # <<<<<<<<<<<<<<
 * 
 *     property events:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->c.stations[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c.stations[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_3 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->c.stations[2])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_5, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":83
 *     property stations:
 *         'Get stations used to calculate direction of triple-coincidence.'
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c.n==2:
 *                 return station(self.c.stations[0]), station(self.c.stations[1])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("czelta.coincidence.stations.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":91
 *     property events:
 *         'Get all events.'
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Event e
 *             cdef event ev
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_6events_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_6events_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_6events___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_6events___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  Event __pyx_v_e;
  struct __pyx_obj_6czelta_event *__pyx_v_ev = 0;
  PyObject *__pyx_v_rtn = NULL;
  int __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  std::vector<Event>::iterator __pyx_t_8;
  std::vector<Event> *__pyx_t_9;
  Event __pyx_t_10;
  int __pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":94
 *             cdef Event e
 *             cdef event ev
 *             if not self.c.events_saved:             # <<<<<<<<<<<<<<
 *                 raise AttributeError("You have calculated coincidences without events")
 *             if self.c.n == 2:
 */
  __pyx_t_1 = ((!(__pyx_v_self->c.events_saved != 0)) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":95
 *             cdef event ev
 *             if not self.c.events_saved:
 *                 raise AttributeError("You have calculated coincidences without events")             # <<<<<<<<<<<<<<
 *             if self.c.n == 2:
 *                 rtn = [],[]
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_AttributeError, __pyx_tuple__3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":96
 *             if not self.c.events_saved:
 *                 raise AttributeError("You have calculated coincidences without events")
 *             if self.c.n == 2:             # <<<<<<<<<<<<<<
 *                 rtn = [],[]
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->c.n == 2) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":97
 *                 raise AttributeError("You have calculated coincidences without events")
 *             if self.c.n == 2:
 *                 rtn = [],[]             # <<<<<<<<<<<<<<
 *             else:
 *                 rtn = [],[],[]
 */
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_v_rtn = ((PyObject*)__pyx_t_4);
    __pyx_t_4 = 0;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":99
 *                 rtn = [],[]
 *             else:
 *                 rtn = [],[],[]             # <<<<<<<<<<<<<<
 *             for i in range(self.c.n):
 *                 for e in self.c.events[i]:
 */
    __pyx_t_4 = PyList_New(0); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_v_rtn = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;
  }
  __pyx_L4:;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":100
 *             else:
 *                 rtn = [],[],[]
 *             for i in range(self.c.n):             # <<<<<<<<<<<<<<
 *                 for e in self.c.events[i]:
 *                     ev = event()
 */
  __pyx_t_6 = __pyx_v_self->c.n;
  for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_6; __pyx_t_7+=1) {
    __pyx_v_i = __pyx_t_7;

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":101
 *                 rtn = [],[],[]
 *             for i in range(self.c.n):
 *                 for e in self.c.events[i]:             # <<<<<<<<<<<<<<
 *                     ev = event()
 *                     ev.set(e)
 */
    __pyx_t_9 = &(__pyx_v_self->c.events[__pyx_v_i]);
    __pyx_t_8 = __pyx_t_9->begin();
    for (;;) {
      if (!(__pyx_t_8 != __pyx_t_9->end())) break;
      __pyx_t_10 = *__pyx_t_8;
      ++__pyx_t_8;
      __pyx_v_e = __pyx_t_10;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":102
 *             for i in range(self.c.n):
 *                 for e in self.c.events[i]:
 *                     ev = event()             # <<<<<<<<<<<<<<
 *                     ev.set(e)
 *                     rtn[i].append(ev)
 */
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_XDECREF_SET(__pyx_v_ev, ((struct __pyx_obj_6czelta_event *)__pyx_t_5));
      __pyx_t_5 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":103
 *                 for e in self.c.events[i]:
 *                     ev = event()
 *                     ev.set(e)             # <<<<<<<<<<<<<<
 *                     rtn[i].append(ev)
 *             return rtn
 */
      ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_ev->__pyx_vtab)->set(__pyx_v_ev, __pyx_v_e);

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":104
 *                     ev = event()
 *                     ev.set(e)
 *                     rtn[i].append(ev)             # <<<<<<<<<<<<<<
 *             return rtn
 * 
 */
      __pyx_t_5 = __Pyx_GetItemInt_Tuple(__pyx_v_rtn, __pyx_v_i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_11 = __Pyx_PyObject_Append(__pyx_t_5, ((PyObject *)__pyx_v_ev)); if (unlikely(__pyx_t_11 == -1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

      /* "/home/martin/Plocha/czelta-python/coincidence.pxi":101
 *                 rtn = [],[],[]
 *             for i in range(self.c.n):
 *                 for e in self.c.events[i]:             # <<<<<<<<<<<<<<
 *                     ev = event()
 *                     ev.set(e)
 */
    }
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":105
 *                     ev.set(e)
 *                     rtn[i].append(ev)
 *             return rtn             # <<<<<<<<<<<<<<
 * 
 *     property max_difference:
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_rtn);
  __pyx_r = __pyx_v_rtn;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":91
 *     property events:
 *         'Get all events.'
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             cdef Event e
 *             cdef event ev
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("czelta.coincidence.events.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_ev);
  __Pyx_XDECREF(__pyx_v_rtn);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":109
 *     property max_difference:
 *         "Return used limit between coincidences."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.limit
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_14max_difference_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_14max_difference_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_14max_difference___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_14max_difference___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":110
 *         "Return used limit between coincidences."
 *         def __get__(self):
 *             return self.c.limit             # <<<<<<<<<<<<<<
 * 
 *     property number_of_coincidences:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c.limit); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":109
 *     property max_difference:
 *         "Return used limit between coincidences."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.limit
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.coincidence.max_difference.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":114
 *     property number_of_coincidences:
 *         "Get number of coincidences, same effetct have ``len(coincidence)''."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.numberOfCoincidences
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_22number_of_coincidences_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_22number_of_coincidences_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_22number_of_coincidences___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_22number_of_coincidences___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":115
 *         "Get number of coincidences, same effetct have ``len(coincidence)''."
 *         def __get__(self):
 *             return self.c.numberOfCoincidences             # <<<<<<<<<<<<<<
 * 
 *     property expected_value:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c.numberOfCoincidences); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":114
 *     property number_of_coincidences:
 *         "Get number of coincidences, same effetct have ``len(coincidence)''."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.numberOfCoincidences
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.coincidence.number_of_coincidences.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":119
 *     property expected_value:
 *         "Number of random coincidences expected."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.medium_value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_14expected_value_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_14expected_value_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_14expected_value___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_14expected_value___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":120
 *         "Number of random coincidences expected."
 *         def __get__(self):
 *             return self.c.medium_value             # <<<<<<<<<<<<<<
 * 
 *     property chance:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c.medium_value); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":119
 *     property expected_value:
 *         "Number of random coincidences expected."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.medium_value
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.coincidence.expected_value.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":124
 *     property chance:
 *         "Chance of finding ``len(coincidence)`` based on ``expected_value``."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.chance
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_6chance_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_6chance_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_6chance___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_6chance___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":125
 *         "Chance of finding ``len(coincidence)`` based on ``expected_value``."
 *         def __get__(self):
 *             return self.c.chance             # <<<<<<<<<<<<<<
 * 
 *     property overlap_measure_time:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyFloat_FromDouble(__pyx_v_self->c.chance); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":124
 *     property chance:
 *         "Chance of finding ``len(coincidence)`` based on ``expected_value``."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.chance
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.coincidence.chance.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":129
 *     property overlap_measure_time:
 *         "Total time of overlap measure."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.overlap.measureTime;
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_20overlap_measure_time_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_20overlap_measure_time_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_20overlap_measure_time___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_20overlap_measure_time___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":130
 *         "Total time of overlap measure."
 *         def __get__(self):
 *             return self.c.overlap.measureTime;             # <<<<<<<<<<<<<<
 * 
 *     property overlap_normal_events:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->c.overlap.measureTime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":129
 *     property overlap_measure_time:
 *         "Total time of overlap measure."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             return self.c.overlap.measureTime;
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.coincidence.overlap_measure_time.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":134
 *     property overlap_normal_events:
 *         "Number of normal events on invidual stations."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c.n==2:
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_21overlap_normal_events_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_21overlap_normal_events_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_21overlap_normal_events___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_21overlap_normal_events___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":135
 *         "Number of normal events on invidual stations."
 *         def __get__(self):
 *             if self.c.n==2:             # <<<<<<<<<<<<<<
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1])
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->c.n == 2) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":136
 *         def __get__(self):
 *             if self.c.n==2:
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1])             # <<<<<<<<<<<<<<
 *             else:
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1], self.c.overlap.normal_events[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.normal_events[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.normal_events[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":138
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1])
 *             else:
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1], self.c.overlap.normal_events[2])             # <<<<<<<<<<<<<<
 * 
 *     property overlap_calibration_events:
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.normal_events[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.normal_events[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.normal_events[2])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":134
 *     property overlap_normal_events:
 *         "Number of normal events on invidual stations."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c.n==2:
 *                 return (self.c.overlap.normal_events[0], self.c.overlap.normal_events[1])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("czelta.coincidence.overlap_normal_events.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/coincidence.pxi":142
 *     property overlap_calibration_events:
 *         "Number of calibration events on invidual stations."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c.n==2:
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1])
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_11coincidence_26overlap_calibration_events_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_11coincidence_26overlap_calibration_events_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_11coincidence_26overlap_calibration_events___get__(((struct __pyx_obj_6czelta_coincidence *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_11coincidence_26overlap_calibration_events___get__(struct __pyx_obj_6czelta_coincidence *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":143
 *         "Number of calibration events on invidual stations."
 *         def __get__(self):
 *             if self.c.n==2:             # <<<<<<<<<<<<<<
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1])
 *             else:
 */
  __pyx_t_1 = ((__pyx_v_self->c.n == 2) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":144
 *         def __get__(self):
 *             if self.c.n==2:
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1])             # <<<<<<<<<<<<<<
 *             else:
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1], self.c.overlap.calibration_events[2])
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.calibration_events[0])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.calibration_events[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    __pyx_t_2 = 0;
    __pyx_t_3 = 0;
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/coincidence.pxi":146
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1])
 *             else:
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1], self.c.overlap.calibration_events[2])             # <<<<<<<<<<<<<<
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.calibration_events[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.calibration_events[1])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyInt_From_int((__pyx_v_self->c.overlap.calibration_events[2])); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = PyTuple_New(3); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_2);
    __pyx_t_4 = 0;
    __pyx_t_3 = 0;
    __pyx_t_2 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":142
 *     property overlap_calibration_events:
 *         "Number of calibration events on invidual stations."
 *         def __get__(self):             # <<<<<<<<<<<<<<
 *             if self.c.n==2:
 *                 return (self.c.overlap.calibration_events[0], self.c.overlap.calibration_events[1])
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_AddTraceback("czelta.coincidence.overlap_calibration_events.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":28
 * 
 *     """
 *     def __init__(self, str path = ""):             # <<<<<<<<<<<<<<
 *         if(len(path)!=0):
 *             self.load(path)
 */

/* Python wrapper */
static int __pyx_pw_6czelta_12event_reader_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6czelta_12event_reader_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_s__4);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_path), (&PyString_Type), 1, "path", 1))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6czelta_12event_reader___init__(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), __pyx_v_path);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6czelta_12event_reader___init__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":29
 *     """
 *     def __init__(self, str path = ""):
 *         if(len(path)!=0):             # <<<<<<<<<<<<<<
 *             self.load(path)
 * 
 */
  __pyx_t_1 = PyObject_Length(__pyx_v_path); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = ((__pyx_t_1 != 0) != 0);
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":30
 *     def __init__(self, str path = ""):
 *         if(len(path)!=0):
 *             self.load(path)             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
    __pyx_t_3 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->load(__pyx_v_self, __pyx_v_path, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":28
 * 
 *     """
 *     def __init__(self, str path = ""):             # <<<<<<<<<<<<<<
 *         if(len(path)!=0):
 *             self.load(path)
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event_reader.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":32
 *             self.load(path)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.er.numberOfEvents()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6czelta_12event_reader_3__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6czelta_12event_reader_3__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_2__len__(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6czelta_12event_reader_2__len__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":33
 * 
 *     def __len__(self):
 *         return self.er.numberOfEvents()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, i):
 */
  __pyx_r = __pyx_v_self->er.numberOfEvents();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":32
 *             self.load(path)
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.er.numberOfEvents()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":35
 *         return self.er.numberOfEvents()
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         cdef int ii, start, stop
 *         cdef event e
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_5__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_4__getitem__(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_4__getitem__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_i) {
  int __pyx_v_ii;
  int __pyx_v_start;
  int __pyx_v_stop;
  struct __pyx_obj_6czelta_event *__pyx_v_e = 0;
  PyObject *__pyx_v_es = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":38
 *         cdef int ii, start, stop
 *         cdef event e
 *         if type(i)==slice:             # <<<<<<<<<<<<<<
 *             if i.start==None:
 *                 start = 0
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_i)), ((PyObject *)((PyObject*)(&PySlice_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":39
 *         cdef event e
 *         if type(i)==slice:
 *             if i.start==None:             # <<<<<<<<<<<<<<
 *                 start = 0
 *             elif type(i.start)==datetime.datetime:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":40
 *         if type(i)==slice:
 *             if i.start==None:
 *                 start = 0             # <<<<<<<<<<<<<<
 *             elif type(i.start)==datetime.datetime:
 *                 start = date_to_timestamp(i.start)
 */
      __pyx_v_start = 0;
      goto __pyx_L4;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":41
 *             if i.start==None:
 *                 start = 0
 *             elif type(i.start)==datetime.datetime:             # <<<<<<<<<<<<<<
 *                 start = date_to_timestamp(i.start)
 *                 start = self.er.firstOlderThan(start)
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_3)), __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":42
 *                 start = 0
 *             elif type(i.start)==datetime.datetime:
 *                 start = date_to_timestamp(i.start)             # <<<<<<<<<<<<<<
 *                 start = self.er.firstOlderThan(start)
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_start = __pyx_f_6czelta_date_to_timestamp(__pyx_t_1, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":43
 *             elif type(i.start)==datetime.datetime:
 *                 start = date_to_timestamp(i.start)
 *                 start = self.er.firstOlderThan(start)             # <<<<<<<<<<<<<<
 *             else:
 *                 start = i.start
 */
      __pyx_v_start = __pyx_v_self->er.firstOlderThan(__pyx_v_start);
      goto __pyx_L4;
    }
    /*else*/ {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":45
 *                 start = self.er.firstOlderThan(start)
 *             else:
 *                 start = i.start             # <<<<<<<<<<<<<<
 *                 start = start if start>=0 else self.er.numberOfEvents()+start
 *             if start >= self.er.numberOfEvents():
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_start = __pyx_t_5;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":46
 *             else:
 *                 start = i.start
 *                 start = start if start>=0 else self.er.numberOfEvents()+start             # <<<<<<<<<<<<<<
 *             if start >= self.er.numberOfEvents():
 *                 raise IndexError
 */
      if (((__pyx_v_start >= 0) != 0)) {
        __pyx_t_5 = __pyx_v_start;
      } else {
        __pyx_t_5 = (__pyx_v_self->er.numberOfEvents() + __pyx_v_start);
      }
      __pyx_v_start = __pyx_t_5;
    }
    __pyx_L4:;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":47
 *                 start = i.start
 *                 start = start if start>=0 else self.er.numberOfEvents()+start
 *             if start >= self.er.numberOfEvents():             # <<<<<<<<<<<<<<
 *                 raise IndexError
 * 
 */
    __pyx_t_2 = ((__pyx_v_start >= __pyx_v_self->er.numberOfEvents()) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":48
 *                 start = start if start>=0 else self.er.numberOfEvents()+start
 *             if start >= self.er.numberOfEvents():
 *                 raise IndexError             # <<<<<<<<<<<<<<
 * 
 *             if i.stop==None:
 */
      __Pyx_Raise(__pyx_builtin_IndexError, 0, 0, 0);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":50
 *                 raise IndexError
 * 
 *             if i.stop==None:             # <<<<<<<<<<<<<<
 *                 stop = self.er.numberOfEvents()
 *             elif type(i.stop)==datetime.datetime:
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":51
 * 
 *             if i.stop==None:
 *                 stop = self.er.numberOfEvents()             # <<<<<<<<<<<<<<
 *             elif type(i.stop)==datetime.datetime:
 *                 stop = date_to_timestamp(i.stop)
 */
      __pyx_v_stop = __pyx_v_self->er.numberOfEvents();
      goto __pyx_L6;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":52
 *             if i.stop==None:
 *                 stop = self.er.numberOfEvents()
 *             elif type(i.stop)==datetime.datetime:             # <<<<<<<<<<<<<<
 *                 stop = date_to_timestamp(i.stop)
 *                 stop = self.er.firstOlderThan(stop)
 */
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_t_4)), __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":53
 *                 stop = self.er.numberOfEvents()
 *             elif type(i.stop)==datetime.datetime:
 *                 stop = date_to_timestamp(i.stop)             # <<<<<<<<<<<<<<
 *                 stop = self.er.firstOlderThan(stop)
 *             else:
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_stop = __pyx_f_6czelta_date_to_timestamp(__pyx_t_1, 0);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":54
 *             elif type(i.stop)==datetime.datetime:
 *                 stop = date_to_timestamp(i.stop)
 *                 stop = self.er.firstOlderThan(stop)             # <<<<<<<<<<<<<<
 *             else:
 *                 stop = i.stop
 */
      __pyx_v_stop = __pyx_v_self->er.firstOlderThan(__pyx_v_stop);
      goto __pyx_L6;
    }
    /*else*/ {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":56
 *                 stop = self.er.firstOlderThan(stop)
 *             else:
 *                 stop = i.stop             # <<<<<<<<<<<<<<
 *                 stop = stop if stop>=0 else self.er.numberOfEvents()+stop
 *             if stop >= self.er.numberOfEvents():
 */
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_v_stop = __pyx_t_5;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":57
 *             else:
 *                 stop = i.stop
 *                 stop = stop if stop>=0 else self.er.numberOfEvents()+stop             # <<<<<<<<<<<<<<
 *             if stop >= self.er.numberOfEvents():
 *                 raise IndexError
 */
      if (((__pyx_v_stop >= 0) != 0)) {
        __pyx_t_5 = __pyx_v_stop;
      } else {
        __pyx_t_5 = (__pyx_v_self->er.numberOfEvents() + __pyx_v_stop);
      }
      __pyx_v_stop = __pyx_t_5;
    }
    __pyx_L6:;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":58
 *                 stop = i.stop
 *                 stop = stop if stop>=0 else self.er.numberOfEvents()+stop
 *             if stop >= self.er.numberOfEvents():             # <<<<<<<<<<<<<<
 *                 raise IndexError
 * 
 */
    __pyx_t_2 = ((__pyx_v_stop >= __pyx_v_self->er.numberOfEvents()) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":59
 *                 stop = stop if stop>=0 else self.er.numberOfEvents()+stop
 *             if stop >= self.er.numberOfEvents():
 *                 raise IndexError             # <<<<<<<<<<<<<<
 * 
 *             if i.step != None:
 */
      __Pyx_Raise(__pyx_builtin_IndexError, 0, 0, 0);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 59; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":61
 *                 raise IndexError
 * 
 *             if i.step != None:             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError("step can't be defined")
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_step); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, Py_None, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":62
 * 
 *             if i.step != None:
 *                 raise NotImplementedError("step can't be defined")             # <<<<<<<<<<<<<<
 * 
 *             es = []
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__5, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":64
 *                 raise NotImplementedError("step can't be defined")
 * 
 *             es = []             # <<<<<<<<<<<<<<
 *             for ii in range(start, stop):
 *                 e = event()
 */
    __pyx_t_3 = PyList_New(0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_es = ((PyObject*)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":65
 * 
 *             es = []
 *             for ii in range(start, stop):             # <<<<<<<<<<<<<<
 *                 e = event()
 *                 e.set(self.er.item(ii))
 */
    __pyx_t_5 = __pyx_v_stop;
    for (__pyx_t_6 = __pyx_v_start; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_ii = __pyx_t_6;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":66
 *             es = []
 *             for ii in range(start, stop):
 *                 e = event()             # <<<<<<<<<<<<<<
 *                 e.set(self.er.item(ii))
 *                 es.append(e)
 */
      __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_XDECREF_SET(__pyx_v_e, ((struct __pyx_obj_6czelta_event *)__pyx_t_3));
      __pyx_t_3 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":67
 *             for ii in range(start, stop):
 *                 e = event()
 *                 e.set(self.er.item(ii))             # <<<<<<<<<<<<<<
 *                 es.append(e)
 *             return es
 */
      ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_e->__pyx_vtab)->set(__pyx_v_e, __pyx_v_self->er.item(__pyx_v_ii));

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":68
 *                 e = event()
 *                 e.set(self.er.item(ii))
 *                 es.append(e)             # <<<<<<<<<<<<<<
 *             return es
 *         else:
 */
      __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_es, ((PyObject *)__pyx_v_e)); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":69
 *                 e.set(self.er.item(ii))
 *                 es.append(e)
 *             return es             # <<<<<<<<<<<<<<
 *         else:
 *             ii = i
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_es);
    __pyx_r = __pyx_v_es;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":71
 *             return es
 *         else:
 *             ii = i             # <<<<<<<<<<<<<<
 *             if ii<0:
 *                 ii += self.er.numberOfEvents()
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ii = __pyx_t_5;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":72
 *         else:
 *             ii = i
 *             if ii<0:             # <<<<<<<<<<<<<<
 *                 ii += self.er.numberOfEvents()
 *             if ii >= self.er.numberOfEvents() or ii<0:
 */
    __pyx_t_2 = ((__pyx_v_ii < 0) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":73
 *             ii = i
 *             if ii<0:
 *                 ii += self.er.numberOfEvents()             # <<<<<<<<<<<<<<
 *             if ii >= self.er.numberOfEvents() or ii<0:
 *                 raise IndexError
 */
      __pyx_v_ii = (__pyx_v_ii + __pyx_v_self->er.numberOfEvents());
      goto __pyx_L11;
    }
    __pyx_L11:;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":74
 *             if ii<0:
 *                 ii += self.er.numberOfEvents()
 *             if ii >= self.er.numberOfEvents() or ii<0:             # <<<<<<<<<<<<<<
 *                 raise IndexError
 *             e = event()
 */
    __pyx_t_2 = ((__pyx_v_ii >= __pyx_v_self->er.numberOfEvents()) != 0);
    if (!__pyx_t_2) {
      __pyx_t_8 = ((__pyx_v_ii < 0) != 0);
      __pyx_t_9 = __pyx_t_8;
    } else {
      __pyx_t_9 = __pyx_t_2;
    }
    if (__pyx_t_9) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":75
 *                 ii += self.er.numberOfEvents()
 *             if ii >= self.er.numberOfEvents() or ii<0:
 *                 raise IndexError             # <<<<<<<<<<<<<<
 *             e = event()
 *             e.set(self.er.item(ii))
 */
      __Pyx_Raise(__pyx_builtin_IndexError, 0, 0, 0);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 75; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":76
 *             if ii >= self.er.numberOfEvents() or ii<0:
 *                 raise IndexError
 *             e = event()             # <<<<<<<<<<<<<<
 *             e.set(self.er.item(ii))
 *             return e
 */
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_v_e = ((struct __pyx_obj_6czelta_event *)__pyx_t_3);
    __pyx_t_3 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":77
 *                 raise IndexError
 *             e = event()
 *             e.set(self.er.item(ii))             # <<<<<<<<<<<<<<
 *             return e
 * 
 */
    ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_e->__pyx_vtab)->set(__pyx_v_e, __pyx_v_self->er.item(__pyx_v_ii));

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":78
 *             e = event()
 *             e.set(self.er.item(ii))
 *             return e             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_e));
    __pyx_r = ((PyObject *)__pyx_v_e);
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":35
 *         return self.er.numberOfEvents()
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         cdef int ii, start, stop
 *         cdef event e
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event_reader.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_es);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":80
 *             return e
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_7__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_7__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_6__iter__(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_6__iter__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":81
 * 
 *     def __iter__(self):
 *         self.i = -1             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->i = -1;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":82
 *     def __iter__(self):
 *         self.i = -1
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":80
 *             return e
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":84
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i+=1
 *         if self.i < self.er.numberOfEvents():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_9__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_9__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_8__next__(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_8__next__(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":85
 * 
 *     def __next__(self):
 *         self.i+=1             # <<<<<<<<<<<<<<
 *         if self.i < self.er.numberOfEvents():
 *             return self[self.i]
 */
  __pyx_v_self->i = (__pyx_v_self->i + 1);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":86
 *     def __next__(self):
 *         self.i+=1
 *         if self.i < self.er.numberOfEvents():             # <<<<<<<<<<<<<<
 *             return self[self.i]
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->i < __pyx_v_self->er.numberOfEvents()) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":87
 *         self.i+=1
 *         if self.i < self.er.numberOfEvents():
 *             return self[self.i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self), __pyx_v_self->i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":89
 *             return self[self.i]
 *         else:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *     cpdef run(self, int run_id):
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":84
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i+=1
 *         if self.i < self.er.numberOfEvents():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.event_reader.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":91
 *             raise StopIteration
 * 
 *     cpdef run(self, int run_id):             # <<<<<<<<<<<<<<
 *         "Return iterable object containing all events in run"
 *         return event_reader_run(self, run_id)
 */

static PyObject *__pyx_pw_6czelta_12event_reader_11run(PyObject *__pyx_v_self, PyObject *__pyx_arg_run_id); /*proto*/
static PyObject *__pyx_f_6czelta_12event_reader_run(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_run_id, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_11run)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_run_id); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":93
 *     cpdef run(self, int run_id):
 *         "Return iterable object containing all events in run"
 *         return event_reader_run(self, run_id)             # <<<<<<<<<<<<<<
 * 
 *     cpdef runs(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_run_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_2, 1, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event_reader_run)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":91
 *             raise StopIteration
 * 
 *     cpdef run(self, int run_id):             # <<<<<<<<<<<<<<
 *         "Return iterable object containing all events in run"
 *         return event_reader_run(self, run_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event_reader.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_11run(PyObject *__pyx_v_self, PyObject *__pyx_arg_run_id); /*proto*/
static char __pyx_doc_6czelta_12event_reader_10run[] = "Return iterable object containing all events in run";
static PyObject *__pyx_pw_6czelta_12event_reader_11run(PyObject *__pyx_v_self, PyObject *__pyx_arg_run_id) {
  int __pyx_v_run_id;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run (wrapper)", 0);
  assert(__pyx_arg_run_id); {
    __pyx_v_run_id = __Pyx_PyInt_As_int(__pyx_arg_run_id); if (unlikely((__pyx_v_run_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_12event_reader_10run(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), ((int)__pyx_v_run_id));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_10run(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_run_id) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->run(__pyx_v_self, __pyx_v_run_id, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.run", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":95
 *         return event_reader_run(self, run_id)
 * 
 *     cpdef runs(self):             # <<<<<<<<<<<<<<
 *         "Return iterable object containing all runs."
 *         return event_reader_runs(self)
 */

static PyObject *__pyx_pw_6czelta_12event_reader_13runs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_f_6czelta_12event_reader_runs(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runs", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_runs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_13runs)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":97
 *     cpdef runs(self):
 *         "Return iterable object containing all runs."
 *         return event_reader_runs(self)             # <<<<<<<<<<<<<<
 * 
 *     cpdef load(self, path_to_file):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_self));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event_reader_runs)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":95
 *         return event_reader_run(self, run_id)
 * 
 *     cpdef runs(self):             # <<<<<<<<<<<<<<
 *         "Return iterable object containing all runs."
 *         return event_reader_runs(self)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.event_reader.runs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_13runs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6czelta_12event_reader_12runs[] = "Return iterable object containing all runs.";
static PyObject *__pyx_pw_6czelta_12event_reader_13runs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("runs (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_12runs(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_12runs(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("runs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->runs(__pyx_v_self, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.runs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":99
 *         return event_reader_runs(self)
 * 
 *     cpdef load(self, path_to_file):             # <<<<<<<<<<<<<<
 *         "Load events from file. This delete all current events and tries to load events from file. Also tries to guess station by file name (finding station name in filename)."
 *         if path_to_file == '':
 */

static PyObject *__pyx_pw_6czelta_12event_reader_15load(PyObject *__pyx_v_self, PyObject *__pyx_v_path_to_file); /*proto*/
static PyObject *__pyx_f_6czelta_12event_reader_load(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path_to_file, int __pyx_skip_dispatch) {
  long __pyx_v_st_id;
  PyObject *__pyx_v_st_index = NULL;
  __pyx_t_6czelta_p_Station __pyx_v_st;
  std::vector<__pyx_t_6czelta_p_Station> __pyx_v_stations;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_bytes_path = 0;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  long __pyx_t_5;
  std::vector<__pyx_t_6czelta_p_Station>::iterator __pyx_t_6;
  __pyx_t_6czelta_p_Station __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_t_12;
  char *__pyx_t_13;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_INCREF(__pyx_v_path_to_file);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_load); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_15load)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_path_to_file);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_path_to_file);
      __Pyx_GIVEREF(__pyx_v_path_to_file);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":101
 *     cpdef load(self, path_to_file):
 *         "Load events from file. This delete all current events and tries to load events from file. Also tries to guess station by file name (finding station name in filename)."
 *         if path_to_file == '':             # <<<<<<<<<<<<<<
 *             raise IOError
 *         if path_to_file[0]=='~':
 */
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_v_path_to_file, __pyx_kp_s__4, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 101; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":102
 *         "Load events from file. This delete all current events and tries to load events from file. Also tries to guess station by file name (finding station name in filename)."
 *         if path_to_file == '':
 *             raise IOError             # <<<<<<<<<<<<<<
 *         if path_to_file[0]=='~':
 *             path_to_file = expanduser('~')+path_to_file[1:]
 */
    __Pyx_Raise(__pyx_builtin_IOError, 0, 0, 0);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":103
 *         if path_to_file == '':
 *             raise IOError
 *         if path_to_file[0]=='~':             # <<<<<<<<<<<<<<
 *             path_to_file = expanduser('~')+path_to_file[1:]
 * 
 */
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_path_to_file, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_4 = (__Pyx_PyString_Equals(__pyx_t_1, __pyx_kp_s__6, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":104
 *             raise IOError
 *         if path_to_file[0]=='~':
 *             path_to_file = expanduser('~')+path_to_file[1:]             # <<<<<<<<<<<<<<
 * 
 *         #try to auto get station name from filename
 */
    __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_expanduser); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__7, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetSlice(__pyx_v_path_to_file, 1, 0, NULL, NULL, &__pyx_slice__8, 1, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = PyNumber_Add(__pyx_t_3, __pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF_SET(__pyx_v_path_to_file, __pyx_t_2);
    __pyx_t_2 = 0;
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":107
 * 
 *         #try to auto get station name from filename
 *         st_id, st_index = 0, -1             # <<<<<<<<<<<<<<
 *         cdef p_Station st
 *         cdef vector[p_Station] stations = getStations()
 */
  __pyx_t_5 = 0;
  __pyx_t_2 = __pyx_int_neg_1;
  __Pyx_INCREF(__pyx_t_2);
  __pyx_v_st_id = __pyx_t_5;
  __pyx_v_st_index = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":109
 *         st_id, st_index = 0, -1
 *         cdef p_Station st
 *         cdef vector[p_Station] stations = getStations()             # <<<<<<<<<<<<<<
 *         for st in stations:
 *             try:
 */
  __pyx_v_stations = Station::getStations();

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":110
 *         cdef p_Station st
 *         cdef vector[p_Station] stations = getStations()
 *         for st in stations:             # <<<<<<<<<<<<<<
 *             try:
 *                 d = path_to_file.lower().index(st.name().decode(system_encoding))
 */
  __pyx_t_6 = __pyx_v_stations.begin();
  for (;;) {
    if (!(__pyx_t_6 != __pyx_v_stations.end())) break;
    __pyx_t_7 = *__pyx_t_6;
    ++__pyx_t_6;
    __pyx_v_st = __pyx_t_7;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":111
 *         cdef vector[p_Station] stations = getStations()
 *         for st in stations:
 *             try:             # <<<<<<<<<<<<<<
 *                 d = path_to_file.lower().index(st.name().decode(system_encoding))
 *             except ValueError:
 */
    {
      __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
      __Pyx_XGOTREF(__pyx_t_8);
      __Pyx_XGOTREF(__pyx_t_9);
      __Pyx_XGOTREF(__pyx_t_10);
      /*try:*/ {

        /* "/home/martin/Plocha/czelta-python/event_reader.pxi":112
 *         for st in stations:
 *             try:
 *                 d = path_to_file.lower().index(st.name().decode(system_encoding))             # <<<<<<<<<<<<<<
 *             except ValueError:
 *                 continue
 */
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_to_file, __pyx_n_s_lower); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_index); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_2);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyBytes_FromString(__pyx_v_st->name()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_decode); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __pyx_t_11 = PyTuple_New(1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_11);
        PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_1);
        __Pyx_GIVEREF(__pyx_t_1);
        __pyx_t_1 = 0;
        __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_11, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L7_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF_SET(__pyx_v_d, __pyx_t_1);
        __pyx_t_1 = 0;
      }
      __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
      goto __pyx_L14_try_end;
      __pyx_L7_error:;
      __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
      __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":113
 *             try:
 *                 d = path_to_file.lower().index(st.name().decode(system_encoding))
 *             except ValueError:             # <<<<<<<<<<<<<<
 *                 continue
 *             if d>st_index:
 */
      __pyx_t_12 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
      if (__pyx_t_12) {
        __Pyx_AddTraceback("czelta.event_reader.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
        if (__Pyx_GetException(&__pyx_t_1, &__pyx_t_11, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L9_except_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_GOTREF(__pyx_t_11);
        __Pyx_GOTREF(__pyx_t_2);

        /* "/home/martin/Plocha/czelta-python/event_reader.pxi":114
 *                 d = path_to_file.lower().index(st.name().decode(system_encoding))
 *             except ValueError:
 *                 continue             # <<<<<<<<<<<<<<
 *             if d>st_index:
 *                 st_index = d
 */
        goto __pyx_L16_except_continue;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L8_exception_handled;
        __pyx_L16_except_continue:;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
        goto __pyx_L13_try_continue;
      }
      goto __pyx_L9_except_error;
      __pyx_L9_except_error:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L1_error;
      __pyx_L13_try_continue:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      goto __pyx_L5_continue;
      __pyx_L8_exception_handled:;
      __Pyx_XGIVEREF(__pyx_t_8);
      __Pyx_XGIVEREF(__pyx_t_9);
      __Pyx_XGIVEREF(__pyx_t_10);
      __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
      __pyx_L14_try_end:;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":115
 *             except ValueError:
 *                 continue
 *             if d>st_index:             # <<<<<<<<<<<<<<
 *                 st_index = d
 *                 st_id = st.id()
 */
    __pyx_t_2 = PyObject_RichCompare(__pyx_v_d, __pyx_v_st_index, Py_GT); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":116
 *                 continue
 *             if d>st_index:
 *                 st_index = d             # <<<<<<<<<<<<<<
 *                 st_id = st.id()
 *         if st_id!=0:
 */
      __Pyx_INCREF(__pyx_v_d);
      __Pyx_DECREF_SET(__pyx_v_st_index, __pyx_v_d);

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":117
 *             if d>st_index:
 *                 st_index = d
 *                 st_id = st.id()             # <<<<<<<<<<<<<<
 *         if st_id!=0:
 *             self.er.setStation(st_id)
 */
      __pyx_v_st_id = __pyx_v_st->id();
      goto __pyx_L17;
    }
    __pyx_L17:;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":110
 *         cdef p_Station st
 *         cdef vector[p_Station] stations = getStations()
 *         for st in stations:             # <<<<<<<<<<<<<<
 *             try:
 *                 d = path_to_file.lower().index(st.name().decode(system_encoding))
 */
    __pyx_L5_continue:;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":118
 *                 st_index = d
 *                 st_id = st.id()
 *         if st_id!=0:             # <<<<<<<<<<<<<<
 *             self.er.setStation(st_id)
 * 
 */
  __pyx_t_4 = ((__pyx_v_st_id != 0) != 0);
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":119
 *                 st_id = st.id()
 *         if st_id!=0:
 *             self.er.setStation(st_id)             # <<<<<<<<<<<<<<
 * 
 *         cdef bytes bytes_path = path_to_file.encode(system_encoding)
 */
    __pyx_v_self->er.setStation(__pyx_v_st_id);
    goto __pyx_L18;
  }
  __pyx_L18:;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":121
 *             self.er.setStation(st_id)
 * 
 *         cdef bytes bytes_path = path_to_file.encode(system_encoding)             # <<<<<<<<<<<<<<
 *         if bytes_path[-4:].lower()==b".txt":
 *             if self.er.loadTxtFile(bytes_path):
 */
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_to_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_11 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11);
  __Pyx_GIVEREF(__pyx_t_11);
  __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (!(likely(PyBytes_CheckExact(__pyx_t_11))||((__pyx_t_11) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "bytes", Py_TYPE(__pyx_t_11)->tp_name), 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_bytes_path = ((PyObject*)__pyx_t_11);
  __pyx_t_11 = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":122
 * 
 *         cdef bytes bytes_path = path_to_file.encode(system_encoding)
 *         if bytes_path[-4:].lower()==b".txt":             # <<<<<<<<<<<<<<
 *             if self.er.loadTxtFile(bytes_path):
 *                 raise IOError("can't open or read file: "+path_to_file)
 */
  if (unlikely(__pyx_v_bytes_path == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_11 = PySequence_GetSlice(__pyx_v_bytes_path, -4, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PyBytes_Equals(__pyx_t_11, __pyx_kp_b_txt, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":123
 *         cdef bytes bytes_path = path_to_file.encode(system_encoding)
 *         if bytes_path[-4:].lower()==b".txt":
 *             if self.er.loadTxtFile(bytes_path):             # <<<<<<<<<<<<<<
 *                 raise IOError("can't open or read file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":
 */
    __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_bytes_path); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_v_self->er.loadTxtFile(__pyx_t_13) != 0);
    if (__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":124
 *         if bytes_path[-4:].lower()==b".txt":
 *             if self.er.loadTxtFile(bytes_path):
 *                 raise IOError("can't open or read file: "+path_to_file)             # <<<<<<<<<<<<<<
 *         elif bytes_path[-4:].lower()==b".dat":
 *             if self.er.loadDatFile(bytes_path):
 */
      __pyx_t_11 = PyNumber_Add(__pyx_kp_s_can_t_open_or_read_file, __pyx_v_path_to_file); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_11, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L19;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":125
 *             if self.er.loadTxtFile(bytes_path):
 *                 raise IOError("can't open or read file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":             # <<<<<<<<<<<<<<
 *             if self.er.loadDatFile(bytes_path):
 *                 raise IOError("can't open or read file: "+path_to_file)
 */
  if (unlikely(__pyx_v_bytes_path == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not subscriptable");
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_11 = PySequence_GetSlice(__pyx_v_bytes_path, -4, PY_SSIZE_T_MAX); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_11, __pyx_n_s_lower); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_11);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = (__Pyx_PyBytes_Equals(__pyx_t_11, __pyx_kp_b_dat, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":126
 *                 raise IOError("can't open or read file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":
 *             if self.er.loadDatFile(bytes_path):             # <<<<<<<<<<<<<<
 *                 raise IOError("can't open or read file: "+path_to_file)
 *         else:
 */
    __pyx_t_13 = __Pyx_PyObject_AsString(__pyx_v_bytes_path); if (unlikely((!__pyx_t_13) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_v_self->er.loadDatFile(__pyx_t_13) != 0);
    if (__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":127
 *         elif bytes_path[-4:].lower()==b".dat":
 *             if self.er.loadDatFile(bytes_path):
 *                 raise IOError("can't open or read file: "+path_to_file)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError("path must be a file with .txt or .dat")
 */
      __pyx_t_11 = PyNumber_Add(__pyx_kp_s_can_t_open_or_read_file, __pyx_v_path_to_file); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_11);
      __pyx_t_11 = 0;
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_1, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_Raise(__pyx_t_11, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L19;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":129
 *                 raise IOError("can't open or read file: "+path_to_file)
 *         else:
 *             raise NotImplementedError("path must be a file with .txt or .dat")             # <<<<<<<<<<<<<<
 * 
 *     cpdef save(self, path_to_file, bint x_events = True):
 */
    __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __Pyx_Raise(__pyx_t_11, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L19:;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":99
 *         return event_reader_runs(self)
 * 
 *     cpdef load(self, path_to_file):             # <<<<<<<<<<<<<<
 *         "Load events from file. This delete all current events and tries to load events from file. Also tries to guess station by file name (finding station name in filename)."
 *         if path_to_file == '':
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("czelta.event_reader.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_st_index);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_bytes_path);
  __Pyx_XDECREF(__pyx_v_path_to_file);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_15load(PyObject *__pyx_v_self, PyObject *__pyx_v_path_to_file); /*proto*/
static char __pyx_doc_6czelta_12event_reader_14load[] = "Load events from file. This delete all current events and tries to load events from file. Also tries to guess station by file name (finding station name in filename).";
static PyObject *__pyx_pw_6czelta_12event_reader_15load(PyObject *__pyx_v_self, PyObject *__pyx_v_path_to_file) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("load (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_14load(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), ((PyObject *)__pyx_v_path_to_file));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_14load(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path_to_file) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("load", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->load(__pyx_v_self, __pyx_v_path_to_file, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.load", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":131
 *             raise NotImplementedError("path must be a file with .txt or .dat")
 * 
 *     cpdef save(self, path_to_file, bint x_events = True):             # <<<<<<<<<<<<<<
 *         "Save events to file. Can save txt or dat(binary files same as from website)."
 *         bytes_path = path_to_file.encode(system_encoding)
 */

static PyObject *__pyx_pw_6czelta_12event_reader_17save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_f_6czelta_12event_reader_save(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path_to_file, int __pyx_skip_dispatch, struct __pyx_opt_args_6czelta_12event_reader_save *__pyx_optional_args) {
  int __pyx_v_x_events = ((int)1);
  PyObject *__pyx_v_bytes_path = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  char *__pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_x_events = __pyx_optional_args->x_events;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_save); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_17save)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = __Pyx_PyBool_FromLong(__pyx_v_x_events); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_v_path_to_file);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_v_path_to_file);
      __Pyx_GIVEREF(__pyx_v_path_to_file);
      PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_2;
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":133
 *     cpdef save(self, path_to_file, bint x_events = True):
 *         "Save events to file. Can save txt or dat(binary files same as from website)."
 *         bytes_path = path_to_file.encode(system_encoding)             # <<<<<<<<<<<<<<
 *         if bytes_path[-4:].lower()==b".txt":
 *             if self.er.saveTxtFile(bytes_path, x_events):
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_path_to_file, __pyx_n_s_encode); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_system_encoding); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 133; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_v_bytes_path = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":134
 *         "Save events to file. Can save txt or dat(binary files same as from website)."
 *         bytes_path = path_to_file.encode(system_encoding)
 *         if bytes_path[-4:].lower()==b".txt":             # <<<<<<<<<<<<<<
 *             if self.er.saveTxtFile(bytes_path, x_events):
 *                 raise IOError("can't write file: "+path_to_file)
 */
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_bytes_path, -4, 0, NULL, NULL, &__pyx_slice__10, 1, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (__Pyx_PyBytes_Equals(__pyx_t_2, __pyx_kp_b_txt, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":135
 *         bytes_path = path_to_file.encode(system_encoding)
 *         if bytes_path[-4:].lower()==b".txt":
 *             if self.er.saveTxtFile(bytes_path, x_events):             # <<<<<<<<<<<<<<
 *                 raise IOError("can't write file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":
 */
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_bytes_path); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_v_self->er.saveTxtFile(__pyx_t_5, __pyx_v_x_events) != 0);
    if (__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":136
 *         if bytes_path[-4:].lower()==b".txt":
 *             if self.er.saveTxtFile(bytes_path, x_events):
 *                 raise IOError("can't write file: "+path_to_file)             # <<<<<<<<<<<<<<
 *         elif bytes_path[-4:].lower()==b".dat":
 *             if self.er.saveDatFile(bytes_path):
 */
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_can_t_write_file, __pyx_v_path_to_file); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":137
 *             if self.er.saveTxtFile(bytes_path, x_events):
 *                 raise IOError("can't write file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":             # <<<<<<<<<<<<<<
 *             if self.er.saveDatFile(bytes_path):
 *                 raise IOError("can't write file: "+path_to_file)
 */
  __pyx_t_2 = __Pyx_PyObject_GetSlice(__pyx_v_bytes_path, -4, 0, NULL, NULL, &__pyx_slice__11, 1, 0, 1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_lower); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_4 = (__Pyx_PyBytes_Equals(__pyx_t_2, __pyx_kp_b_dat, Py_EQ)); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":138
 *                 raise IOError("can't write file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":
 *             if self.er.saveDatFile(bytes_path):             # <<<<<<<<<<<<<<
 *                 raise IOError("can't write file: "+path_to_file)
 *         else:
 */
    __pyx_t_5 = __Pyx_PyObject_AsString(__pyx_v_bytes_path); if (unlikely((!__pyx_t_5) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = (__pyx_v_self->er.saveDatFile(__pyx_t_5) != 0);
    if (__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":139
 *         elif bytes_path[-4:].lower()==b".dat":
 *             if self.er.saveDatFile(bytes_path):
 *                 raise IOError("can't write file: "+path_to_file)             # <<<<<<<<<<<<<<
 *         else:
 *             raise NotImplementedError("path must be a file with .txt or .dat")
 */
      __pyx_t_2 = PyNumber_Add(__pyx_kp_s_can_t_write_file, __pyx_v_path_to_file); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_IOError, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_Raise(__pyx_t_2, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":141
 *                 raise IOError("can't write file: "+path_to_file)
 *         else:
 *             raise NotImplementedError("path must be a file with .txt or .dat")             # <<<<<<<<<<<<<<
 * 
 *     cpdef station get_station(self):
 */
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_NotImplementedError, __pyx_tuple__12, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":131
 *             raise NotImplementedError("path must be a file with .txt or .dat")
 * 
 *     cpdef save(self, path_to_file, bint x_events = True):             # <<<<<<<<<<<<<<
 *         "Save events to file. Can save txt or dat(binary files same as from website)."
 *         bytes_path = path_to_file.encode(system_encoding)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event_reader.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_bytes_path);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_17save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6czelta_12event_reader_16save[] = "Save events to file. Can save txt or dat(binary files same as from website).";
static PyObject *__pyx_pw_6czelta_12event_reader_17save(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_path_to_file = 0;
  int __pyx_v_x_events;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("save (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_path_to_file,&__pyx_n_s_x_events,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path_to_file)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_x_events);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "save") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_path_to_file = values[0];
    if (values[1]) {
      __pyx_v_x_events = __Pyx_PyObject_IsTrue(values[1]); if (unlikely((__pyx_v_x_events == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_x_events = ((int)1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("save", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_12event_reader_16save(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), __pyx_v_path_to_file, __pyx_v_x_events);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_16save(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_path_to_file, int __pyx_v_x_events) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  struct __pyx_opt_args_6czelta_12event_reader_save __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("save", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.x_events = __pyx_v_x_events;
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->save(__pyx_v_self, __pyx_v_path_to_file, 1, &__pyx_t_2); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.save", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":143
 *             raise NotImplementedError("path must be a file with .txt or .dat")
 * 
 *     cpdef station get_station(self):             # <<<<<<<<<<<<<<
 *         return station(self.er.getStation())
 * 
 */

static PyObject *__pyx_pw_6czelta_12event_reader_19get_station(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static struct __pyx_obj_6czelta_station *__pyx_f_6czelta_12event_reader_get_station(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  struct __pyx_obj_6czelta_station *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_station", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_get_station); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_19get_station)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6czelta_station))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_6czelta_station *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":144
 * 
 *     cpdef station get_station(self):
 *         return station(self.er.getStation())             # <<<<<<<<<<<<<<
 * 
 *     cpdef int flux(self, int _from, int to):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->er.getStation()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_2, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_r = ((struct __pyx_obj_6czelta_station *)__pyx_t_1);
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":143
 *             raise NotImplementedError("path must be a file with .txt or .dat")
 * 
 *     cpdef station get_station(self):             # <<<<<<<<<<<<<<
 *         return station(self.er.getStation())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.event_reader.get_station", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_19get_station(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_19get_station(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_station (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_18get_station(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_18get_station(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_station", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->get_station(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.get_station", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":146
 *         return station(self.er.getStation())
 * 
 *     cpdef int flux(self, int _from, int to):             # <<<<<<<<<<<<<<
 *         val = False
 *         for r in self.runs():
 */

static PyObject *__pyx_pw_6czelta_12event_reader_21flux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6czelta_12event_reader_flux(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v__from, int __pyx_v_to, int __pyx_skip_dispatch) {
  int __pyx_v_val;
  PyObject *__pyx_v_r = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  Py_ssize_t __pyx_t_6;
  PyObject *(*__pyx_t_7)(PyObject *);
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flux", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_flux); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_21flux)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v__from); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_to); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_3);
      __Pyx_GIVEREF(__pyx_t_3);
      __pyx_t_2 = 0;
      __pyx_t_3 = 0;
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_5;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":147
 * 
 *     cpdef int flux(self, int _from, int to):
 *         val = False             # <<<<<<<<<<<<<<
 *         for r in self.runs():
 *             if _from < r[0].timestamp:
 */
  __pyx_v_val = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":148
 *     cpdef int flux(self, int _from, int to):
 *         val = False
 *         for r in self.runs():             # <<<<<<<<<<<<<<
 *             if _from < r[0].timestamp:
 *                 break
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->runs(__pyx_v_self, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_3 = __pyx_t_1; __Pyx_INCREF(__pyx_t_3); __pyx_t_6 = 0;
    __pyx_t_7 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_3 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_7 = Py_TYPE(__pyx_t_3)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_7 && PyList_CheckExact(__pyx_t_3)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_7 && PyTuple_CheckExact(__pyx_t_3)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_3)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_3, __pyx_t_6); __Pyx_INCREF(__pyx_t_1); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_3, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_7(__pyx_t_3);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[3]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_r, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":149
 *         val = False
 *         for r in self.runs():
 *             if _from < r[0].timestamp:             # <<<<<<<<<<<<<<
 *                 break
 *             if to <= r[-1].timestamp:
 */
    __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v__from); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __Pyx_GetItemInt(__pyx_v_r, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_1, __pyx_t_2, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    if (__pyx_t_8) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":150
 *         for r in self.runs():
 *             if _from < r[0].timestamp:
 *                 break             # <<<<<<<<<<<<<<
 *             if to <= r[-1].timestamp:
 *                 val = True
 */
      goto __pyx_L4_break;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":151
 *             if _from < r[0].timestamp:
 *                 break
 *             if to <= r[-1].timestamp:             # <<<<<<<<<<<<<<
 *                 val = True
 *                 break
 */
    __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_to); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_r, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyObject_RichCompare(__pyx_t_4, __pyx_t_1, Py_LE); __Pyx_XGOTREF(__pyx_t_2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_8 = __Pyx_PyObject_IsTrue(__pyx_t_2); if (unlikely(__pyx_t_8 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    if (__pyx_t_8) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":152
 *                 break
 *             if to <= r[-1].timestamp:
 *                 val = True             # <<<<<<<<<<<<<<
 *                 break
 *         if val:
 */
      __pyx_v_val = 1;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":153
 *             if to <= r[-1].timestamp:
 *                 val = True
 *                 break             # <<<<<<<<<<<<<<
 *         if val:
 *             return self.er.flux(_from, to)
 */
      goto __pyx_L4_break;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":148
 *     cpdef int flux(self, int _from, int to):
 *         val = False
 *         for r in self.runs():             # <<<<<<<<<<<<<<
 *             if _from < r[0].timestamp:
 *                 break
 */
  }
  __pyx_L4_break:;
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":154
 *                 val = True
 *                 break
 *         if val:             # <<<<<<<<<<<<<<
 *             return self.er.flux(_from, to)
 * 
 */
  __pyx_t_8 = (__pyx_v_val != 0);
  if (__pyx_t_8) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":155
 *                 break
 *         if val:
 *             return self.er.flux(_from, to)             # <<<<<<<<<<<<<<
 * 
 *     cpdef set_station(self, object st):
 */
    __pyx_r = __pyx_v_self->er.flux(__pyx_v__from, __pyx_v_to);
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":146
 *         return station(self.er.getStation())
 * 
 *     cpdef int flux(self, int _from, int to):             # <<<<<<<<<<<<<<
 *         val = False
 *         for r in self.runs():
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_WriteUnraisable("czelta.event_reader.flux", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_21flux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_21flux(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v__from;
  int __pyx_v_to;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("flux (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_from_2,&__pyx_n_s_to,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_from_2)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_to)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("flux", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "flux") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v__from = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v__from == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_to = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_to == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("flux", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader.flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_12event_reader_20flux(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), __pyx_v__from, __pyx_v_to);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_20flux(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v__from, int __pyx_v_to) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("flux", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->flux(__pyx_v_self, __pyx_v__from, __pyx_v_to, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.flux", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":157
 *             return self.er.flux(_from, to)
 * 
 *     cpdef set_station(self, object st):             # <<<<<<<<<<<<<<
 *         "Set station for event_reader. Station is also set for all current events."
 *         cdef int _id
 */

static PyObject *__pyx_pw_6czelta_12event_reader_23set_station(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static PyObject *__pyx_f_6czelta_12event_reader_set_station(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_st, int __pyx_skip_dispatch) {
  int __pyx_v__id;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_station", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_set_station); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_23set_station)) {
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_st);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_st);
      __Pyx_GIVEREF(__pyx_v_st);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":160
 *         "Set station for event_reader. Station is also set for all current events."
 *         cdef int _id
 *         if type(st)==int:             # <<<<<<<<<<<<<<
 *             _id = st
 *         elif type(st)==str:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_st)), ((PyObject *)((PyObject*)(&PyInt_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":161
 *         cdef int _id
 *         if type(st)==int:
 *             _id = st             # <<<<<<<<<<<<<<
 *         elif type(st)==str:
 *             _id = station(st).id
 */
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_v_st); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v__id = __pyx_t_5;
    goto __pyx_L3;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":162
 *         if type(st)==int:
 *             _id = st
 *         elif type(st)==str:             # <<<<<<<<<<<<<<
 *             _id = station(st).id
 *         elif type(st)==station:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_st)), ((PyObject *)((PyObject*)(&PyString_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":163
 *             _id = st
 *         elif type(st)==str:
 *             _id = station(st).id             # <<<<<<<<<<<<<<
 *         elif type(st)==station:
 *             _id = st.id
 */
    __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_INCREF(__pyx_v_st);
    PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_st);
    __Pyx_GIVEREF(__pyx_v_st);
    __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 163; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v__id = __pyx_t_5;
    goto __pyx_L3;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":164
 *         elif type(st)==str:
 *             _id = station(st).id
 *         elif type(st)==station:             # <<<<<<<<<<<<<<
 *             _id = st.id
 *         else:
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_st)), ((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_4 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_4) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":165
 *             _id = station(st).id
 *         elif type(st)==station:
 *             _id = st.id             # <<<<<<<<<<<<<<
 *         else:
 *             raise ValueError("Unknown type of station")
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_st, __pyx_n_s_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v__id = __pyx_t_5;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":167
 *             _id = st.id
 *         else:
 *             raise ValueError("Unknown type of station")             # <<<<<<<<<<<<<<
 *         self.er.setStation(_id)
 * 
 */
    __pyx_t_1 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__13, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_Raise(__pyx_t_1, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":168
 *         else:
 *             raise ValueError("Unknown type of station")
 *         self.er.setStation(_id)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int number_of_events(self, int run = -1):
 */
  __pyx_v_self->er.setStation(__pyx_v__id);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":157
 *             return self.er.flux(_from, to)
 * 
 *     cpdef set_station(self, object st):             # <<<<<<<<<<<<<<
 *         "Set station for event_reader. Station is also set for all current events."
 *         cdef int _id
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event_reader.set_station", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_23set_station(PyObject *__pyx_v_self, PyObject *__pyx_v_st); /*proto*/
static char __pyx_doc_6czelta_12event_reader_22set_station[] = "Set station for event_reader. Station is also set for all current events.";
static PyObject *__pyx_pw_6czelta_12event_reader_23set_station(PyObject *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_station (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_22set_station(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), ((PyObject *)__pyx_v_st));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_22set_station(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_st) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_station", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->set_station(__pyx_v_self, __pyx_v_st, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.set_station", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":170
 *         self.er.setStation(_id)
 * 
 *     cpdef int number_of_events(self, int run = -1):             # <<<<<<<<<<<<<<
 *         "Return number of events in ``event_reader``. Same result have ``len(event_reader)``."
 *         if(run==-1):
 */

static PyObject *__pyx_pw_6czelta_12event_reader_25number_of_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_f_6czelta_12event_reader_number_of_events(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch, struct __pyx_opt_args_6czelta_12event_reader_number_of_events *__pyx_optional_args) {
  int __pyx_v_run = ((int)-1);
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("number_of_events", 0);
  if (__pyx_optional_args) {
    if (__pyx_optional_args->__pyx_n > 0) {
      __pyx_v_run = __pyx_optional_args->run;
    }
  }
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number_of_events); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_25number_of_events)) {
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_run); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":172
 *     cpdef int number_of_events(self, int run = -1):
 *         "Return number of events in ``event_reader``. Same result have ``len(event_reader)``."
 *         if(run==-1):             # <<<<<<<<<<<<<<
 *             return self.er.numberOfEvents()
 *         else:
 */
  __pyx_t_5 = ((__pyx_v_run == -1) != 0);
  if (__pyx_t_5) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":173
 *         "Return number of events in ``event_reader``. Same result have ``len(event_reader)``."
 *         if(run==-1):
 *             return self.er.numberOfEvents()             # <<<<<<<<<<<<<<
 *         else:
 *             return self.er.numberOfEvents(run)
 */
    __pyx_r = __pyx_v_self->er.numberOfEvents();
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":175
 *             return self.er.numberOfEvents()
 *         else:
 *             return self.er.numberOfEvents(run)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int number_of_runs(self):
 */
    __pyx_r = __pyx_v_self->er.numberOfEvents(__pyx_v_run);
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":170
 *         self.er.setStation(_id)
 * 
 *     cpdef int number_of_events(self, int run = -1):             # <<<<<<<<<<<<<<
 *         "Return number of events in ``event_reader``. Same result have ``len(event_reader)``."
 *         if(run==-1):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_WriteUnraisable("czelta.event_reader.number_of_events", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_25number_of_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_6czelta_12event_reader_24number_of_events[] = "Return number of events in ``event_reader``. Same result have ``len(event_reader)``.";
static PyObject *__pyx_pw_6czelta_12event_reader_25number_of_events(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_run;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("number_of_events (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_run,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_run);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "number_of_events") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_run = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_run == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_run = ((int)-1);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("number_of_events", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader.number_of_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_12event_reader_24number_of_events(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), __pyx_v_run);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_24number_of_events(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_run) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  struct __pyx_opt_args_6czelta_12event_reader_number_of_events __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("number_of_events", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2.__pyx_n = 1;
  __pyx_t_2.run = __pyx_v_run;
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->number_of_events(__pyx_v_self, 1, &__pyx_t_2); 
  __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_t_1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 170; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event_reader.number_of_events", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":177
 *             return self.er.numberOfEvents(run)
 * 
 *     cpdef int number_of_runs(self):             # <<<<<<<<<<<<<<
 *         "Return number of runs. Same result have ``len(event_reader.runs())``."
 *         return self.er.numberOfRuns()
 */

static PyObject *__pyx_pw_6czelta_12event_reader_27number_of_runs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_number_of_runs(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("number_of_runs", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_number_of_runs); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_27number_of_runs)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":179
 *     cpdef int number_of_runs(self):
 *         "Return number of runs. Same result have ``len(event_reader.runs())``."
 *         return self.er.numberOfRuns()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int measure_length(self):
 */
  __pyx_r = __pyx_v_self->er.numberOfRuns();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":177
 *             return self.er.numberOfEvents(run)
 * 
 *     cpdef int number_of_runs(self):             # <<<<<<<<<<<<<<
 *         "Return number of runs. Same result have ``len(event_reader.runs())``."
 *         return self.er.numberOfRuns()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.number_of_runs", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_27number_of_runs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6czelta_12event_reader_26number_of_runs[] = "Return number of runs. Same result have ``len(event_reader.runs())``.";
static PyObject *__pyx_pw_6czelta_12event_reader_27number_of_runs(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("number_of_runs (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_26number_of_runs(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_26number_of_runs(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("number_of_runs", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->number_of_runs(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.number_of_runs", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":181
 *         return self.er.numberOfRuns()
 * 
 *     cpdef int measure_length(self):             # <<<<<<<<<<<<<<
 *         return self.er.measurelength()
 * 
 */

static PyObject *__pyx_pw_6czelta_12event_reader_29measure_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_measure_length(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("measure_length", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_measure_length); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_29measure_length)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":182
 * 
 *     cpdef int measure_length(self):
 *         return self.er.measurelength()             # <<<<<<<<<<<<<<
 * 
 *     cdef Event c_item(self, int i):
 */
  __pyx_r = __pyx_v_self->er.measurelength();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":181
 *         return self.er.numberOfRuns()
 * 
 *     cpdef int measure_length(self):             # <<<<<<<<<<<<<<
 *         return self.er.measurelength()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.measure_length", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_29measure_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_29measure_length(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("measure_length (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_28measure_length(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_28measure_length(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("measure_length", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->measure_length(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.measure_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":184
 *         return self.er.measurelength()
 * 
 *     cdef Event c_item(self, int i):             # <<<<<<<<<<<<<<
 *         return self.er.item(i)
 * 
 */

static Event __pyx_f_6czelta_12event_reader_c_item(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_i) {
  Event __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("c_item", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":185
 * 
 *     cdef Event c_item(self, int i):
 *         return self.er.item(i)             # <<<<<<<<<<<<<<
 * 
 *     cpdef event item(self, int i):
 */
  __pyx_r = __pyx_v_self->er.item(__pyx_v_i);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":184
 *         return self.er.measurelength()
 * 
 *     cdef Event c_item(self, int i):             # <<<<<<<<<<<<<<
 *         return self.er.item(i)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":187
 *         return self.er.item(i)
 * 
 *     cpdef event item(self, int i):             # <<<<<<<<<<<<<<
 *         e = event()
 *         e.set(self.er.item(i))
 */

static PyObject *__pyx_pw_6czelta_12event_reader_31item(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static struct __pyx_obj_6czelta_event *__pyx_f_6czelta_12event_reader_item(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_i, int __pyx_skip_dispatch) {
  struct __pyx_obj_6czelta_event *__pyx_v_e = NULL;
  struct __pyx_obj_6czelta_event *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("item", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_item); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_31item)) {
      __Pyx_XDECREF(((PyObject *)__pyx_r));
      __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_i); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
      __Pyx_GIVEREF(__pyx_t_2);
      __pyx_t_2 = 0;
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_3, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (!(likely(((__pyx_t_2) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_2, __pyx_ptype_6czelta_event))))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_r = ((struct __pyx_obj_6czelta_event *)__pyx_t_2);
      __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":188
 * 
 *     cpdef event item(self, int i):
 *         e = event()             # <<<<<<<<<<<<<<
 *         e.set(self.er.item(i))
 *         return e
 */
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_e = ((struct __pyx_obj_6czelta_event *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":189
 *     cpdef event item(self, int i):
 *         e = event()
 *         e.set(self.er.item(i))             # <<<<<<<<<<<<<<
 *         return e
 * 
 */
  ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_e->__pyx_vtab)->set(__pyx_v_e, __pyx_v_self->er.item(__pyx_v_i));

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":190
 *         e = event()
 *         e.set(self.er.item(i))
 *         return e             # <<<<<<<<<<<<<<
 * 
 *     cpdef int measure_time(self):
 */
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_e));
  __pyx_r = __pyx_v_e;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":187
 *         return self.er.item(i)
 * 
 *     cpdef event item(self, int i):             # <<<<<<<<<<<<<<
 *         e = event()
 *         e.set(self.er.item(i))
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.event_reader.item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_31item(PyObject *__pyx_v_self, PyObject *__pyx_arg_i); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_31item(PyObject *__pyx_v_self, PyObject *__pyx_arg_i) {
  int __pyx_v_i;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("item (wrapper)", 0);
  assert(__pyx_arg_i); {
    __pyx_v_i = __Pyx_PyInt_As_int(__pyx_arg_i); if (unlikely((__pyx_v_i == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader.item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_12event_reader_30item(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), ((int)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_30item(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_v_i) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("item", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->item(__pyx_v_self, __pyx_v_i, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.item", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":192
 *         return e
 * 
 *     cpdef int measure_time(self):             # <<<<<<<<<<<<<<
 *         return self.er.measurelength()
 * 
 */

static PyObject *__pyx_pw_6czelta_12event_reader_33measure_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_measure_time(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("measure_time", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_measure_time); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_33measure_time)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":193
 * 
 *     cpdef int measure_time(self):
 *         return self.er.measurelength()             # <<<<<<<<<<<<<<
 * 
 *     #filters
 */
  __pyx_r = __pyx_v_self->er.measurelength();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":192
 *         return e
 * 
 *     cpdef int measure_time(self):             # <<<<<<<<<<<<<<
 *         return self.er.measurelength()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.measure_time", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_33measure_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_12event_reader_33measure_time(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("measure_time (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_32measure_time(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_32measure_time(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("measure_time", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->measure_time(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.measure_time", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":196
 * 
 *     #filters
 *     cpdef int filter(self, filter_func):             # <<<<<<<<<<<<<<
 *         "Custom-filter function. As parameter give a function, which is ready to be called with parameter event object, which return True if you want remove event and False if you want let event in event_reader."
 *         global _filter_func_event
 */

static PyObject *__pyx_pw_6czelta_12event_reader_35filter(PyObject *__pyx_v_self, PyObject *__pyx_v_filter_func); /*proto*/
static int __pyx_f_6czelta_12event_reader_filter(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_filter_func, int __pyx_skip_dispatch) {
  struct __pyx_obj_6czelta_event *__pyx_v_e = NULL;
  CYTHON_UNUSED PyObject *__pyx_v_te = NULL;
  PyObject *__pyx_v_ae = NULL;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filter); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_35filter)) {
      __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_v_filter_func);
      PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_filter_func);
      __Pyx_GIVEREF(__pyx_v_filter_func);
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_r = __pyx_t_4;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":202
 * 
 *         #test
 *         try:             # <<<<<<<<<<<<<<
 *             e = event()
 *             e.set(self.er.item(0))
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_5, &__pyx_t_6, &__pyx_t_7);
    __Pyx_XGOTREF(__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_6);
    __Pyx_XGOTREF(__pyx_t_7);
    /*try:*/ {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":203
 *         #test
 *         try:
 *             e = event()             # <<<<<<<<<<<<<<
 *             e.set(self.er.item(0))
 *             filter_func(e)
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_v_e = ((struct __pyx_obj_6czelta_event *)__pyx_t_1);
      __pyx_t_1 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":204
 *         try:
 *             e = event()
 *             e.set(self.er.item(0))             # <<<<<<<<<<<<<<
 *             filter_func(e)
 *         except TypeError as te:
 */
      ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_e->__pyx_vtab)->set(__pyx_v_e, __pyx_v_self->er.item(0));

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":205
 *             e = event()
 *             e.set(self.er.item(0))
 *             filter_func(e)             # <<<<<<<<<<<<<<
 *         except TypeError as te:
 *             raise TypeError("function must have one parameter (czelta.event)")
 */
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_INCREF(((PyObject *)__pyx_v_e));
      PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_e));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_e));
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_v_filter_func, __pyx_t_1, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    }
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":206
 *             e.set(self.er.item(0))
 *             filter_func(e)
 *         except TypeError as te:             # <<<<<<<<<<<<<<
 *             raise TypeError("function must have one parameter (czelta.event)")
 *         except AttributeError as ae:
 */
    __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_TypeError);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("czelta.event_reader.filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_3, &__pyx_t_1, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 206; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_te = __pyx_t_1;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":207
 *             filter_func(e)
 *         except TypeError as te:
 *             raise TypeError("function must have one parameter (czelta.event)")             # <<<<<<<<<<<<<<
 *         except AttributeError as ae:
 *             raise ae
 */
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_TypeError, __pyx_tuple__14, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L4_exception_handled;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":208
 *         except TypeError as te:
 *             raise TypeError("function must have one parameter (czelta.event)")
 *         except AttributeError as ae:             # <<<<<<<<<<<<<<
 *             raise ae
 *         #real filtering
 */
    __pyx_t_4 = PyErr_ExceptionMatches(__pyx_builtin_AttributeError);
    if (__pyx_t_4) {
      __Pyx_AddTraceback("czelta.event_reader.filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_2, &__pyx_t_1, &__pyx_t_3) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 208; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_1);
      __pyx_v_ae = __pyx_t_1;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":209
 *             raise TypeError("function must have one parameter (czelta.event)")
 *         except AttributeError as ae:
 *             raise ae             # <<<<<<<<<<<<<<
 *         #real filtering
 *         _filter_func_object = filter_func
 */
      __Pyx_Raise(__pyx_v_ae, 0, 0, 0);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    goto __pyx_L1_error;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_XGIVEREF(__pyx_t_6);
    __Pyx_XGIVEREF(__pyx_t_7);
    __Pyx_ExceptionReset(__pyx_t_5, __pyx_t_6, __pyx_t_7);
    __pyx_L10_try_end:;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":211
 *             raise ae
 *         #real filtering
 *         _filter_func_object = filter_func             # <<<<<<<<<<<<<<
 *         _filter_func_event = event()
 *         return self.er.filter(&_filter_func)
 */
  __Pyx_INCREF(__pyx_v_filter_func);
  __Pyx_XGOTREF(__pyx_v_6czelta__filter_func_object);
  __Pyx_DECREF_SET(__pyx_v_6czelta__filter_func_object, __pyx_v_filter_func);
  __Pyx_GIVEREF(__pyx_v_filter_func);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":212
 *         #real filtering
 *         _filter_func_object = filter_func
 *         _filter_func_event = event()             # <<<<<<<<<<<<<<
 *         return self.er.filter(&_filter_func)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_XGOTREF(((PyObject *)__pyx_v_6czelta__filter_func_event));
  __Pyx_DECREF_SET(__pyx_v_6czelta__filter_func_event, ((struct __pyx_obj_6czelta_event *)__pyx_t_3));
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":213
 *         _filter_func_object = filter_func
 *         _filter_func_event = event()
 *         return self.er.filter(&_filter_func)             # <<<<<<<<<<<<<<
 * 
 *     cpdef int filter_calibrations(self):
 */
  __pyx_r = __pyx_v_self->er.filter((&__pyx_f_6czelta__filter_func));
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":196
 * 
 *     #filters
 *     cpdef int filter(self, filter_func):             # <<<<<<<<<<<<<<
 *         "Custom-filter function. As parameter give a function, which is ready to be called with parameter event object, which return True if you want remove event and False if you want let event in event_reader."
 *         global _filter_func_event
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_WriteUnraisable("czelta.event_reader.filter", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_te);
  __Pyx_XDECREF(__pyx_v_ae);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_35filter(PyObject *__pyx_v_self, PyObject *__pyx_v_filter_func); /*proto*/
static char __pyx_doc_6czelta_12event_reader_34filter[] = "Custom-filter function. As parameter give a function, which is ready to be called with parameter event object, which return True if you want remove event and False if you want let event in event_reader.";
static PyObject *__pyx_pw_6czelta_12event_reader_35filter(PyObject *__pyx_v_self, PyObject *__pyx_v_filter_func) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_34filter(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self), ((PyObject *)__pyx_v_filter_func));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_34filter(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, PyObject *__pyx_v_filter_func) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->filter(__pyx_v_self, __pyx_v_filter_func, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.filter", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":215
 *         return self.er.filter(&_filter_func)
 * 
 *     cpdef int filter_calibrations(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events marked as calibration."
 *         return self.er.filterCalibs()
 */

static PyObject *__pyx_pw_6czelta_12event_reader_37filter_calibrations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_filter_calibrations(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_calibrations", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filter_calibrations); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_37filter_calibrations)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":217
 *     cpdef int filter_calibrations(self):
 *         "Predefined fast filter. Filter all events marked as calibration."
 *         return self.er.filterCalibs()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int filter_maximum_TDC(self):
 */
  __pyx_r = __pyx_v_self->er.filterCalibs();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":215
 *         return self.er.filter(&_filter_func)
 * 
 *     cpdef int filter_calibrations(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events marked as calibration."
 *         return self.er.filterCalibs()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.filter_calibrations", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_37filter_calibrations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6czelta_12event_reader_36filter_calibrations[] = "Predefined fast filter. Filter all events marked as calibration.";
static PyObject *__pyx_pw_6czelta_12event_reader_37filter_calibrations(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter_calibrations (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_36filter_calibrations(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_36filter_calibrations(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_calibrations", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->filter_calibrations(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.filter_calibrations", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":219
 *         return self.er.filterCalibs()
 * 
 *     cpdef int filter_maximum_TDC(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events which have at least one TDC chanel equal maximum value (4095). Events with maximum value have bad measured TDC and sky direction can't be determined right."
 *         return self.er.filterMaxTDC()
 */

static PyObject *__pyx_pw_6czelta_12event_reader_39filter_maximum_TDC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_filter_maximum_TDC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_maximum_TDC", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filter_maximum_TDC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_39filter_maximum_TDC)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":221
 *     cpdef int filter_maximum_TDC(self):
 *         "Predefined fast filter. Filter all events which have at least one TDC chanel equal maximum value (4095). Events with maximum value have bad measured TDC and sky direction can't be determined right."
 *         return self.er.filterMaxTDC()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int filter_maximum_ADC(self):
 */
  __pyx_r = __pyx_v_self->er.filterMaxTDC();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":219
 *         return self.er.filterCalibs()
 * 
 *     cpdef int filter_maximum_TDC(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events which have at least one TDC chanel equal maximum value (4095). Events with maximum value have bad measured TDC and sky direction can't be determined right."
 *         return self.er.filterMaxTDC()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.filter_maximum_TDC", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_39filter_maximum_TDC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6czelta_12event_reader_38filter_maximum_TDC[] = "Predefined fast filter. Filter all events which have at least one TDC chanel equal maximum value (4095). Events with maximum value have bad measured TDC and sky direction can't be determined right.";
static PyObject *__pyx_pw_6czelta_12event_reader_39filter_maximum_TDC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter_maximum_TDC (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_38filter_maximum_TDC(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_38filter_maximum_TDC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_maximum_TDC", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->filter_maximum_TDC(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.filter_maximum_TDC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":223
 *         return self.er.filterMaxTDC()
 * 
 *     cpdef int filter_maximum_ADC(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal maximum value(2047)."
 *         return self.er.filterMaxADC()
 */

static PyObject *__pyx_pw_6czelta_12event_reader_41filter_maximum_ADC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_filter_maximum_ADC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_maximum_ADC", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filter_maximum_ADC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_41filter_maximum_ADC)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":225
 *     cpdef int filter_maximum_ADC(self):
 *         "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal maximum value(2047)."
 *         return self.er.filterMaxADC()             # <<<<<<<<<<<<<<
 * 
 *     cpdef int filter_minimum_ADC(self):
 */
  __pyx_r = __pyx_v_self->er.filterMaxADC();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":223
 *         return self.er.filterMaxTDC()
 * 
 *     cpdef int filter_maximum_ADC(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal maximum value(2047)."
 *         return self.er.filterMaxADC()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.filter_maximum_ADC", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_41filter_maximum_ADC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6czelta_12event_reader_40filter_maximum_ADC[] = "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal maximum value(2047).";
static PyObject *__pyx_pw_6czelta_12event_reader_41filter_maximum_ADC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter_maximum_ADC (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_40filter_maximum_ADC(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_40filter_maximum_ADC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_maximum_ADC", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->filter_maximum_ADC(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 223; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.filter_maximum_ADC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":227
 *         return self.er.filterMaxADC()
 * 
 *     cpdef int filter_minimum_ADC(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal zero (Not measured)."
 *         return self.er.filterMinADC()
 */

static PyObject *__pyx_pw_6czelta_12event_reader_43filter_minimum_ADC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_12event_reader_filter_minimum_ADC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_minimum_ADC", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_filter_minimum_ADC); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_12event_reader_43filter_minimum_ADC)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":229
 *     cpdef int filter_minimum_ADC(self):
 *         "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal zero (Not measured)."
 *         return self.er.filterMinADC()             # <<<<<<<<<<<<<<
 * 
 * #filter_func wrapper
 */
  __pyx_r = __pyx_v_self->er.filterMinADC();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":227
 *         return self.er.filterMaxADC()
 * 
 *     cpdef int filter_minimum_ADC(self):             # <<<<<<<<<<<<<<
 *         "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal zero (Not measured)."
 *         return self.er.filterMinADC()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader.filter_minimum_ADC", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_12event_reader_43filter_minimum_ADC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_6czelta_12event_reader_42filter_minimum_ADC[] = "Predefined fast filter. Filter all events which have at least one ADC(energy) channel equal zero (Not measured).";
static PyObject *__pyx_pw_6czelta_12event_reader_43filter_minimum_ADC(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("filter_minimum_ADC (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_12event_reader_42filter_minimum_ADC(((struct __pyx_obj_6czelta_event_reader *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_12event_reader_42filter_minimum_ADC(struct __pyx_obj_6czelta_event_reader *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("filter_minimum_ADC", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_self->__pyx_vtab)->filter_minimum_ADC(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader.filter_minimum_ADC", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":232
 * 
 * #filter_func wrapper
 * cdef bint _filter_func(Event& e):             # <<<<<<<<<<<<<<
 *     global _filter_func_event
 *     global _filter_func_object
 */

static int __pyx_f_6czelta__filter_func(Event &__pyx_v_e) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_filter_func", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":235
 *     global _filter_func_event
 *     global _filter_func_object
 *     try:             # <<<<<<<<<<<<<<
 *         _filter_func_event.set(e)
 *         return _filter_func_object(_filter_func_event)
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":236
 *     global _filter_func_object
 *     try:
 *         _filter_func_event.set(e)             # <<<<<<<<<<<<<<
 *         return _filter_func_object(_filter_func_event)
 *     except:
 */
      ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_6czelta__filter_func_event->__pyx_vtab)->set(__pyx_v_6czelta__filter_func_event, __pyx_v_e);

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":237
 *     try:
 *         _filter_func_event.set(e)
 *         return _filter_func_object(_filter_func_event)             # <<<<<<<<<<<<<<
 *     except:
 *         traceback.print_exc()
 */
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_INCREF(((PyObject *)__pyx_v_6czelta__filter_func_event));
      PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_6czelta__filter_func_event));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_6czelta__filter_func_event));
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_v_6czelta__filter_func_object, __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely((__pyx_t_6 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_r = __pyx_t_6;
      goto __pyx_L7_try_return;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":238
 *         _filter_func_event.set(e)
 *         return _filter_func_object(_filter_func_event)
 *     except:             # <<<<<<<<<<<<<<
 *         traceback.print_exc()
 *         return False
 */
    /*except:*/ {
      __Pyx_AddTraceback("czelta._filter_func", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_7);

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":239
 *         return _filter_func_object(_filter_func_event)
 *     except:
 *         traceback.print_exc()             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
      __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_traceback); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_print_exc); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":240
 *     except:
 *         traceback.print_exc()
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cdef class event_reader_runs:
 */
      __pyx_r = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_except_return;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":232
 * 
 * #filter_func wrapper
 * cdef bint _filter_func(Event& e):             # <<<<<<<<<<<<<<
 *     global _filter_func_event
 *     global _filter_func_object
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_WriteUnraisable("czelta._filter_func", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":244
 * cdef class event_reader_runs:
 *     "Iteratable class for runs of ``czelta.event_reader``."
 *     def __init__(self, event_reader reader):             # <<<<<<<<<<<<<<
 *         self.er = reader
 * 
 */

/* Python wrapper */
static int __pyx_pw_6czelta_17event_reader_runs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6czelta_17event_reader_runs_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6czelta_event_reader *__pyx_v_reader = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reader,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reader)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 1) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
    }
    __pyx_v_reader = ((struct __pyx_obj_6czelta_event_reader *)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 1, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader_runs.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_6czelta_event_reader, 1, "reader", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6czelta_17event_reader_runs___init__(((struct __pyx_obj_6czelta_event_reader_runs *)__pyx_v_self), __pyx_v_reader);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6czelta_17event_reader_runs___init__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self, struct __pyx_obj_6czelta_event_reader *__pyx_v_reader) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":245
 *     "Iteratable class for runs of ``czelta.event_reader``."
 *     def __init__(self, event_reader reader):
 *         self.er = reader             # <<<<<<<<<<<<<<
 * 
 *     def __str__(self):
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
  __Pyx_GOTREF(__pyx_v_self->er);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->er));
  __pyx_v_self->er = __pyx_v_reader;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":244
 * cdef class event_reader_runs:
 *     "Iteratable class for runs of ``czelta.event_reader``."
 *     def __init__(self, event_reader reader):             # <<<<<<<<<<<<<<
 *         self.er = reader
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":247
 *         self.er = reader
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<czelta.event_reader_runs object with %i runs from event_reader: %s>"%(len(self),str(self.er))
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_17event_reader_runs_3__str__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_17event_reader_runs_3__str__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__str__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_17event_reader_runs_2__str__(((struct __pyx_obj_6czelta_event_reader_runs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_17event_reader_runs_2__str__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  Py_ssize_t __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__str__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":248
 * 
 *     def __str__(self):
 *         return "<czelta.event_reader_runs object with %i runs from event_reader: %s>"%(len(self),str(self.er))             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyObject_Length(((PyObject *)__pyx_v_self)); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = PyInt_FromSsize_t(__pyx_t_1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyTuple_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_INCREF(((PyObject *)__pyx_v_self->er));
  PyTuple_SET_ITEM(__pyx_t_3, 0, ((PyObject *)__pyx_v_self->er));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_self->er));
  __pyx_t_4 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyString_Type))), __pyx_t_3, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = PyTuple_New(2); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  PyTuple_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_3, 1, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_2 = 0;
  __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_czelta_event_reader_runs_object, __pyx_t_3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":247
 *         self.er = reader
 * 
 *     def __str__(self):             # <<<<<<<<<<<<<<
 *         return "<czelta.event_reader_runs object with %i runs from event_reader: %s>"%(len(self),str(self.er))
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.event_reader_runs.__str__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":250
 *         return "<czelta.event_reader_runs object with %i runs from event_reader: %s>"%(len(self),str(self.er))
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_17event_reader_runs_5__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_17event_reader_runs_5__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_17event_reader_runs_4__iter__(((struct __pyx_obj_6czelta_event_reader_runs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_17event_reader_runs_4__iter__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":251
 * 
 *     def __iter__(self):
 *         self.i = -1             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->i = -1;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":252
 *     def __iter__(self):
 *         self.i = -1
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":250
 *         return "<czelta.event_reader_runs object with %i runs from event_reader: %s>"%(len(self),str(self.er))
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":254
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i+=1
 *         if self.i < self.er.er.numberOfRuns():
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_17event_reader_runs_7__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_17event_reader_runs_7__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_17event_reader_runs_6__next__(((struct __pyx_obj_6czelta_event_reader_runs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_17event_reader_runs_6__next__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":255
 * 
 *     def __next__(self):
 *         self.i+=1             # <<<<<<<<<<<<<<
 *         if self.i < self.er.er.numberOfRuns():
 *             return self[self.i]
 */
  __pyx_v_self->i = (__pyx_v_self->i + 1);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":256
 *     def __next__(self):
 *         self.i+=1
 *         if self.i < self.er.er.numberOfRuns():             # <<<<<<<<<<<<<<
 *             return self[self.i]
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->i < __pyx_v_self->er->er.numberOfRuns()) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":257
 *         self.i+=1
 *         if self.i < self.er.er.numberOfRuns():
 *             return self[self.i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self), __pyx_v_self->i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":259
 *             return self[self.i]
 *         else:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":254
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i+=1
 *         if self.i < self.er.er.numberOfRuns():
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.event_reader_runs.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":261
 *             raise StopIteration
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.numberOfRuns()
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6czelta_17event_reader_runs_9__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6czelta_17event_reader_runs_9__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_17event_reader_runs_8__len__(((struct __pyx_obj_6czelta_event_reader_runs *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6czelta_17event_reader_runs_8__len__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":262
 * 
 *     def __len__(self):
 *         return self.er.er.numberOfRuns()             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, i):
 */
  __pyx_r = __pyx_v_self->er->er.numberOfRuns();
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":261
 *             raise StopIteration
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.numberOfRuns()
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":264
 *         return self.er.er.numberOfRuns()
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         cdef int ii, start, stop, step
 *         if type(i)==slice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_17event_reader_runs_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6czelta_17event_reader_runs_11__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_17event_reader_runs_10__getitem__(((struct __pyx_obj_6czelta_event_reader_runs *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_17event_reader_runs_10__getitem__(struct __pyx_obj_6czelta_event_reader_runs *__pyx_v_self, PyObject *__pyx_v_i) {
  int __pyx_v_ii;
  int __pyx_v_start;
  int __pyx_v_stop;
  int __pyx_v_step;
  PyObject *__pyx_v_runs = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  int __pyx_t_3;
  int __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":266
 *     def __getitem__(self, i):
 *         cdef int ii, start, stop, step
 *         if type(i)==slice:             # <<<<<<<<<<<<<<
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfRuns()+i.start
 *             stop = self.er.er.numberOfRuns() if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfRuns()+i.stop
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_i)), ((PyObject *)((PyObject*)(&PySlice_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":267
 *         cdef int ii, start, stop, step
 *         if type(i)==slice:
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfRuns()+i.start             # <<<<<<<<<<<<<<
 *             stop = self.er.er.numberOfRuns() if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfRuns()+i.stop
 *             step = i.step if i.step else 1
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    if (((!__pyx_t_2) != 0)) {
      __pyx_t_3 = 0;
    } else {
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_5 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_5); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      if (__pyx_t_6) {
        __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_4 = __pyx_t_7;
      } else {
        __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_self->er->er.numberOfRuns()); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = PyNumber_Add(__pyx_t_5, __pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 267; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_4 = __pyx_t_7;
      }
      __pyx_t_3 = __pyx_t_4;
    }
    __pyx_v_start = __pyx_t_3;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":268
 *         if type(i)==slice:
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfRuns()+i.start
 *             stop = self.er.er.numberOfRuns() if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfRuns()+i.stop             # <<<<<<<<<<<<<<
 *             step = i.step if i.step else 1
 *             if step <= 0:
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (((!__pyx_t_2) != 0)) {
      __pyx_t_3 = __pyx_v_self->er->er.numberOfRuns();
    } else {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_8, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_6) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_4 = __pyx_t_7;
      } else {
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->er->er.numberOfRuns()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyNumber_Add(__pyx_t_1, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_4 = __pyx_t_7;
      }
      __pyx_t_3 = __pyx_t_4;
    }
    __pyx_v_stop = __pyx_t_3;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":269
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfRuns()+i.start
 *             stop = self.er.er.numberOfRuns() if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfRuns()+i.stop
 *             step = i.step if i.step else 1             # <<<<<<<<<<<<<<
 *             if step <= 0:
 *                 raise NotImplementedError
 */
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_step); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_5); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (__pyx_t_2) {
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_step); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_3 = __pyx_t_4;
    } else {
      __pyx_t_3 = 1;
    }
    __pyx_v_step = __pyx_t_3;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":270
 *             stop = self.er.er.numberOfRuns() if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfRuns()+i.stop
 *             step = i.step if i.step else 1
 *             if step <= 0:             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError
 *             runs = []
 */
    __pyx_t_2 = ((__pyx_v_step <= 0) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":271
 *             step = i.step if i.step else 1
 *             if step <= 0:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *             runs = []
 *             #currently not optimized to c loop (17.1.2014)
 */
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":272
 *             if step <= 0:
 *                 raise NotImplementedError
 *             runs = []             # <<<<<<<<<<<<<<
 *             #currently not optimized to c loop (17.1.2014)
 *             #for ii in range(start, stop, step):
 */
    __pyx_t_5 = PyList_New(0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_v_runs = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":276
 *             #for ii in range(start, stop, step):
 *             #deprecated but optimized to c loop
 *             for ii from start <= ii < stop by step:             # <<<<<<<<<<<<<<
 *                 runs.append(event_reader_run(self.er, ii))
 *             return runs
 */
    __pyx_t_3 = __pyx_v_stop;
    __pyx_t_4 = __pyx_v_step;
    for (__pyx_v_ii = __pyx_v_start; __pyx_v_ii < __pyx_t_3; __pyx_v_ii+=__pyx_t_4) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":277
 *             #deprecated but optimized to c loop
 *             for ii from start <= ii < stop by step:
 *                 runs.append(event_reader_run(self.er, ii))             # <<<<<<<<<<<<<<
 *             return runs
 *         else:
 */
      __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_ii); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_INCREF(((PyObject *)__pyx_v_self->er));
      PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_self->er));
      __Pyx_GIVEREF(((PyObject *)__pyx_v_self->er));
      PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
      __Pyx_GIVEREF(__pyx_t_5);
      __pyx_t_5 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event_reader_run)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_runs, __pyx_t_5); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":278
 *             for ii from start <= ii < stop by step:
 *                 runs.append(event_reader_run(self.er, ii))
 *             return runs             # <<<<<<<<<<<<<<
 *         else:
 *             ii = i
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_runs);
    __pyx_r = __pyx_v_runs;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":280
 *             return runs
 *         else:
 *             ii = i             # <<<<<<<<<<<<<<
 *             if ii<0:
 *                 ii += self.er.er.numberOfRuns()
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ii = __pyx_t_4;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":281
 *         else:
 *             ii = i
 *             if ii<0:             # <<<<<<<<<<<<<<
 *                 ii += self.er.er.numberOfRuns()
 *             return event_reader_run(self.er, ii)
 */
    __pyx_t_2 = ((__pyx_v_ii < 0) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":282
 *             ii = i
 *             if ii<0:
 *                 ii += self.er.er.numberOfRuns()             # <<<<<<<<<<<<<<
 *             return event_reader_run(self.er, ii)
 * 
 */
      __pyx_v_ii = (__pyx_v_ii + __pyx_v_self->er->er.numberOfRuns());
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":283
 *             if ii<0:
 *                 ii += self.er.er.numberOfRuns()
 *             return event_reader_run(self.er, ii)             # <<<<<<<<<<<<<<
 * 
 * 
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_ii); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_INCREF(((PyObject *)__pyx_v_self->er));
    PyTuple_SET_ITEM(__pyx_t_8, 0, ((PyObject *)__pyx_v_self->er));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self->er));
    PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event_reader_run)), __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_r = __pyx_t_5;
    __pyx_t_5 = 0;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":264
 *         return self.er.er.numberOfRuns()
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         cdef int ii, start, stop, step
 *         if type(i)==slice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("czelta.event_reader_runs.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_runs);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":288
 * 
 * cdef class event_reader_run:
 *     def __init__(self, event_reader reader, int run_id):             # <<<<<<<<<<<<<<
 *         self.er = reader
 *         self._run_id = run_id
 */

/* Python wrapper */
static int __pyx_pw_6czelta_16event_reader_run_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_6czelta_16event_reader_run_1__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  struct __pyx_obj_6czelta_event_reader *__pyx_v_reader = 0;
  int __pyx_v_run_id;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_reader,&__pyx_n_s_run_id,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_reader)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_run_id)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, 1); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_reader = ((struct __pyx_obj_6czelta_event_reader *)values[0]);
    __pyx_v_run_id = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_run_id == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[3]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.event_reader_run.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return -1;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_reader), __pyx_ptype_6czelta_event_reader, 1, "reader", 0))) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_6czelta_16event_reader_run___init__(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self), __pyx_v_reader, __pyx_v_run_id);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_6czelta_16event_reader_run___init__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, struct __pyx_obj_6czelta_event_reader *__pyx_v_reader, int __pyx_v_run_id) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":289
 * cdef class event_reader_run:
 *     def __init__(self, event_reader reader, int run_id):
 *         self.er = reader             # <<<<<<<<<<<<<<
 *         self._run_id = run_id
 * 
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_reader));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_reader));
  __Pyx_GOTREF(__pyx_v_self->er);
  __Pyx_DECREF(((PyObject *)__pyx_v_self->er));
  __pyx_v_self->er = __pyx_v_reader;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":290
 *     def __init__(self, event_reader reader, int run_id):
 *         self.er = reader
 *         self._run_id = run_id             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_v_self->_run_id = __pyx_v_run_id;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":288
 * 
 * cdef class event_reader_run:
 *     def __init__(self, event_reader reader, int run_id):             # <<<<<<<<<<<<<<
 *         self.er = reader
 *         self._run_id = run_id
 */

  /* function exit code */
  __pyx_r = 0;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":292
 *         self._run_id = run_id
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_16event_reader_run_3__iter__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_16event_reader_run_3__iter__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_2__iter__(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_16event_reader_run_2__iter__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":293
 * 
 *     def __iter__(self):
 *         self.i = -1             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __pyx_v_self->i = -1;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":294
 *     def __iter__(self):
 *         self.i = -1
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __next__(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":292
 *         self._run_id = run_id
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         self.i = -1
 *         return self
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":296
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i+=1
 *         if self.i < self.er.er.numberOfEvents(self._run_id):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_16event_reader_run_5__next__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_6czelta_16event_reader_run_5__next__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_4__next__(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_16event_reader_run_4__next__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":297
 * 
 *     def __next__(self):
 *         self.i+=1             # <<<<<<<<<<<<<<
 *         if self.i < self.er.er.numberOfEvents(self._run_id):
 *             return self[self.i]
 */
  __pyx_v_self->i = (__pyx_v_self->i + 1);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":298
 *     def __next__(self):
 *         self.i+=1
 *         if self.i < self.er.er.numberOfEvents(self._run_id):             # <<<<<<<<<<<<<<
 *             return self[self.i]
 *         else:
 */
  __pyx_t_1 = ((__pyx_v_self->i < __pyx_v_self->er->er.numberOfEvents(__pyx_v_self->_run_id)) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":299
 *         self.i+=1
 *         if self.i < self.er.er.numberOfEvents(self._run_id):
 *             return self[self.i]             # <<<<<<<<<<<<<<
 *         else:
 *             raise StopIteration
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_2 = __Pyx_GetItemInt(((PyObject *)__pyx_v_self), __pyx_v_self->i, int, 1, __Pyx_PyInt_From_int, 0, 1, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_r = __pyx_t_2;
    __pyx_t_2 = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":301
 *             return self[self.i]
 *         else:
 *             raise StopIteration             # <<<<<<<<<<<<<<
 * 
 *     def __len__(self):
 */
    __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
    {__pyx_filename = __pyx_f[3]; __pyx_lineno = 301; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":296
 *         return self
 * 
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         self.i+=1
 *         if self.i < self.er.er.numberOfEvents(self._run_id):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.event_reader_run.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":303
 *             raise StopIteration
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.numberOfEvents(self._run_id)
 * 
 */

/* Python wrapper */
static Py_ssize_t __pyx_pw_6czelta_16event_reader_run_7__len__(PyObject *__pyx_v_self); /*proto*/
static Py_ssize_t __pyx_pw_6czelta_16event_reader_run_7__len__(PyObject *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_6__len__(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static Py_ssize_t __pyx_pf_6czelta_16event_reader_run_6__len__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self) {
  Py_ssize_t __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__len__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":304
 * 
 *     def __len__(self):
 *         return self.er.er.numberOfEvents(self._run_id)             # <<<<<<<<<<<<<<
 * 
 *     def __getitem__(self, i):
 */
  __pyx_r = __pyx_v_self->er->er.numberOfEvents(__pyx_v_self->_run_id);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":303
 *             raise StopIteration
 * 
 *     def __len__(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.numberOfEvents(self._run_id)
 * 
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":306
 *         return self.er.er.numberOfEvents(self._run_id)
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         cdef int ii, start, stop
 *         if type(i)==slice:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_16event_reader_run_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i); /*proto*/
static PyObject *__pyx_pw_6czelta_16event_reader_run_9__getitem__(PyObject *__pyx_v_self, PyObject *__pyx_v_i) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getitem__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_8__getitem__(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self), ((PyObject *)__pyx_v_i));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_16event_reader_run_8__getitem__(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, PyObject *__pyx_v_i) {
  int __pyx_v_ii;
  int __pyx_v_start;
  int __pyx_v_stop;
  PyObject *__pyx_v_es = NULL;
  struct __pyx_obj_6czelta_event *__pyx_v_e = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_t_4;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  int __pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getitem__", 0);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":308
 *     def __getitem__(self, i):
 *         cdef int ii, start, stop
 *         if type(i)==slice:             # <<<<<<<<<<<<<<
 *             if i.step != 0:
 *                 raise NotImplementedError
 */
  __pyx_t_1 = PyObject_RichCompare(((PyObject *)Py_TYPE(__pyx_v_i)), ((PyObject *)((PyObject*)(&PySlice_Type))), Py_EQ); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 308; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (__pyx_t_2) {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":309
 *         cdef int ii, start, stop
 *         if type(i)==slice:
 *             if i.step != 0:             # <<<<<<<<<<<<<<
 *                 raise NotImplementedError
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfEvents(self._run_id)+i.start
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_step); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = PyObject_RichCompare(__pyx_t_1, __pyx_int_0, Py_NE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":310
 *         if type(i)==slice:
 *             if i.step != 0:
 *                 raise NotImplementedError             # <<<<<<<<<<<<<<
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfEvents(self._run_id)+i.start
 *             stop = self.er.er.numberOfEvents(self._run_id) if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfEvents(self._run_id)+i.stop
 */
      __Pyx_Raise(__pyx_builtin_NotImplementedError, 0, 0, 0);
      {__pyx_filename = __pyx_f[3]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":311
 *             if i.step != 0:
 *                 raise NotImplementedError
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfEvents(self._run_id)+i.start             # <<<<<<<<<<<<<<
 *             stop = self.er.er.numberOfEvents(self._run_id) if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfEvents(self._run_id)+i.stop
 *             es = []
 */
    __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    if (((!__pyx_t_2) != 0)) {
      __pyx_t_4 = 0;
    } else {
      __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_1 = PyObject_RichCompare(__pyx_t_3, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      if (__pyx_t_6) {
        __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = __pyx_t_7;
      } else {
        __pyx_t_1 = __Pyx_PyInt_From_int(__pyx_v_self->er->er.numberOfEvents(__pyx_v_self->_run_id)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_start); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = PyNumber_Add(__pyx_t_1, __pyx_t_3); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 311; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_5 = __pyx_t_7;
      }
      __pyx_t_4 = __pyx_t_5;
    }
    __pyx_v_start = __pyx_t_4;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":312
 *                 raise NotImplementedError
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfEvents(self._run_id)+i.start
 *             stop = self.er.er.numberOfEvents(self._run_id) if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfEvents(self._run_id)+i.stop             # <<<<<<<<<<<<<<
 *             es = []
 *             for ii in range(start,stop):
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    if (((!__pyx_t_2) != 0)) {
      __pyx_t_4 = __pyx_v_self->er->er.numberOfEvents(__pyx_v_self->_run_id);
    } else {
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_3 = PyObject_RichCompare(__pyx_t_8, __pyx_int_0, Py_GE); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __pyx_t_5 = __pyx_t_7;
      } else {
        __pyx_t_3 = __Pyx_PyInt_From_int(__pyx_v_self->er->er.numberOfEvents(__pyx_v_self->_run_id)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_i, __pyx_n_s_stop); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_1 = PyNumber_Add(__pyx_t_3, __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_1);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
        __pyx_t_5 = __pyx_t_7;
      }
      __pyx_t_4 = __pyx_t_5;
    }
    __pyx_v_stop = __pyx_t_4;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":313
 *             start = 0 if not i.start else i.start if i.start>=0 else self.er.er.numberOfEvents(self._run_id)+i.start
 *             stop = self.er.er.numberOfEvents(self._run_id) if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfEvents(self._run_id)+i.stop
 *             es = []             # <<<<<<<<<<<<<<
 *             for ii in range(start,stop):
 *                 e = event()
 */
    __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_es = ((PyObject*)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":314
 *             stop = self.er.er.numberOfEvents(self._run_id) if not i.stop else i.stop if i.stop>=0 else self.er.er.numberOfEvents(self._run_id)+i.stop
 *             es = []
 *             for ii in range(start,stop):             # <<<<<<<<<<<<<<
 *                 e = event()
 *                 e.set(self.er.er.item(self._run_id, ii))
 */
    __pyx_t_4 = __pyx_v_stop;
    for (__pyx_t_5 = __pyx_v_start; __pyx_t_5 < __pyx_t_4; __pyx_t_5+=1) {
      __pyx_v_ii = __pyx_t_5;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":315
 *             es = []
 *             for ii in range(start,stop):
 *                 e = event()             # <<<<<<<<<<<<<<
 *                 e.set(self.er.er.item(self._run_id, ii))
 *                 es.append(e)
 */
      __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 315; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_XDECREF_SET(__pyx_v_e, ((struct __pyx_obj_6czelta_event *)__pyx_t_1));
      __pyx_t_1 = 0;

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":316
 *             for ii in range(start,stop):
 *                 e = event()
 *                 e.set(self.er.er.item(self._run_id, ii))             # <<<<<<<<<<<<<<
 *                 es.append(e)
 *             return es
 */
      ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_e->__pyx_vtab)->set(__pyx_v_e, __pyx_v_self->er->er.item(__pyx_v_self->_run_id, __pyx_v_ii));

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":317
 *                 e = event()
 *                 e.set(self.er.er.item(self._run_id, ii))
 *                 es.append(e)             # <<<<<<<<<<<<<<
 *             return es
 *         else:
 */
      __pyx_t_9 = __Pyx_PyList_Append(__pyx_v_es, ((PyObject *)__pyx_v_e)); if (unlikely(__pyx_t_9 == -1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":318
 *                 e.set(self.er.er.item(self._run_id, ii))
 *                 es.append(e)
 *             return es             # <<<<<<<<<<<<<<
 *         else:
 *             ii = i
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(__pyx_v_es);
    __pyx_r = __pyx_v_es;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":320
 *             return es
 *         else:
 *             ii = i             # <<<<<<<<<<<<<<
 *             if ii<0:
 *                 ii+=self.er.er.numberOfEvents(self._run_id)
 */
    __pyx_t_4 = __Pyx_PyInt_As_int(__pyx_v_i); if (unlikely((__pyx_t_4 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_ii = __pyx_t_4;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":321
 *         else:
 *             ii = i
 *             if ii<0:             # <<<<<<<<<<<<<<
 *                 ii+=self.er.er.numberOfEvents(self._run_id)
 *             e = event()
 */
    __pyx_t_2 = ((__pyx_v_ii < 0) != 0);
    if (__pyx_t_2) {

      /* "/home/martin/Plocha/czelta-python/event_reader.pxi":322
 *             ii = i
 *             if ii<0:
 *                 ii+=self.er.er.numberOfEvents(self._run_id)             # <<<<<<<<<<<<<<
 *             e = event()
 *             e.set(self.er.er.item(self._run_id, ii))
 */
      __pyx_v_ii = (__pyx_v_ii + __pyx_v_self->er->er.numberOfEvents(__pyx_v_self->_run_id));
      goto __pyx_L7;
    }
    __pyx_L7:;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":323
 *             if ii<0:
 *                 ii+=self.er.er.numberOfEvents(self._run_id)
 *             e = event()             # <<<<<<<<<<<<<<
 *             e.set(self.er.er.item(self._run_id, ii))
 *             return e
 */
    __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event)), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_v_e = ((struct __pyx_obj_6czelta_event *)__pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":324
 *                 ii+=self.er.er.numberOfEvents(self._run_id)
 *             e = event()
 *             e.set(self.er.er.item(self._run_id, ii))             # <<<<<<<<<<<<<<
 *             return e
 * 
 */
    ((struct __pyx_vtabstruct_6czelta_event *)__pyx_v_e->__pyx_vtab)->set(__pyx_v_e, __pyx_v_self->er->er.item(__pyx_v_self->_run_id, __pyx_v_ii));

    /* "/home/martin/Plocha/czelta-python/event_reader.pxi":325
 *             e = event()
 *             e.set(self.er.er.item(self._run_id, ii))
 *             return e             # <<<<<<<<<<<<<<
 * 
 *     cpdef int run_id(self):
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_e));
    __pyx_r = ((PyObject *)__pyx_v_e);
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":306
 *         return self.er.er.numberOfEvents(self._run_id)
 * 
 *     def __getitem__(self, i):             # <<<<<<<<<<<<<<
 *         cdef int ii, start, stop
 *         if type(i)==slice:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("czelta.event_reader_run.__getitem__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_es);
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":327
 *             return e
 * 
 *     cpdef int run_id(self):             # <<<<<<<<<<<<<<
 *         return self._run_id
 * 
 */

static PyObject *__pyx_pw_6czelta_16event_reader_run_11run_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_16event_reader_run_run_id(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_id", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_run_id); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_16event_reader_run_11run_id)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":328
 * 
 *     cpdef int run_id(self):
 *         return self._run_id             # <<<<<<<<<<<<<<
 * 
 *     cpdef int begin_index(self):
 */
  __pyx_r = __pyx_v_self->_run_id;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":327
 *             return e
 * 
 *     cpdef int run_id(self):             # <<<<<<<<<<<<<<
 *         return self._run_id
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader_run.run_id", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_16event_reader_run_11run_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_16event_reader_run_11run_id(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_id (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_10run_id(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_16event_reader_run_10run_id(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_id", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader_run *)__pyx_v_self->__pyx_vtab)->run_id(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader_run.run_id", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":330
 *         return self._run_id
 * 
 *     cpdef int begin_index(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.runStartIndex(self._run_id)
 *     cpdef int end_index(self):
 */

static PyObject *__pyx_pw_6czelta_16event_reader_run_13begin_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_16event_reader_run_begin_index(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_index", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_begin_index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_16event_reader_run_13begin_index)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":331
 * 
 *     cpdef int begin_index(self):
 *         return self.er.er.runStartIndex(self._run_id)             # <<<<<<<<<<<<<<
 *     cpdef int end_index(self):
 *         return self.er.er.runEndIndex(self._run_id)
 */
  __pyx_r = __pyx_v_self->er->er.runStartIndex(__pyx_v_self->_run_id);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":330
 *         return self._run_id
 * 
 *     cpdef int begin_index(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.runStartIndex(self._run_id)
 *     cpdef int end_index(self):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader_run.begin_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_16event_reader_run_13begin_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_16event_reader_run_13begin_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("begin_index (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_12begin_index(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_16event_reader_run_12begin_index(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("begin_index", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader_run *)__pyx_v_self->__pyx_vtab)->begin_index(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 330; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader_run.begin_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/event_reader.pxi":332
 *     cpdef int begin_index(self):
 *         return self.er.er.runStartIndex(self._run_id)
 *     cpdef int end_index(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.runEndIndex(self._run_id)
 */

static PyObject *__pyx_pw_6czelta_16event_reader_run_15end_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static int __pyx_f_6czelta_16event_reader_run_end_index(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self, int __pyx_skip_dispatch) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_index", 0);
  /* Check if called by wrapper */
  if (unlikely(__pyx_skip_dispatch)) ;
  /* Check if overridden in Python */
  else if (unlikely(Py_TYPE(((PyObject *)__pyx_v_self))->tp_dictoffset != 0)) {
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_end_index); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    if (!PyCFunction_Check(__pyx_t_1) || (PyCFunction_GET_FUNCTION(__pyx_t_1) != (PyCFunction)__pyx_pw_6czelta_16event_reader_run_15end_index)) {
      __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_3 = __Pyx_PyInt_As_int(__pyx_t_2); if (unlikely((__pyx_t_3 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __pyx_r = __pyx_t_3;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      goto __pyx_L0;
    }
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  }

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":333
 *         return self.er.er.runStartIndex(self._run_id)
 *     cpdef int end_index(self):
 *         return self.er.er.runEndIndex(self._run_id)             # <<<<<<<<<<<<<<
 */
  __pyx_r = __pyx_v_self->er->er.runEndIndex(__pyx_v_self->_run_id);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":332
 *     cpdef int begin_index(self):
 *         return self.er.er.runStartIndex(self._run_id)
 *     cpdef int end_index(self):             # <<<<<<<<<<<<<<
 *         return self.er.er.runEndIndex(self._run_id)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_WriteUnraisable("czelta.event_reader_run.end_index", __pyx_clineno, __pyx_lineno, __pyx_filename, 0);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_16event_reader_run_15end_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static PyObject *__pyx_pw_6czelta_16event_reader_run_15end_index(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("end_index (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_16event_reader_run_14end_index(((struct __pyx_obj_6czelta_event_reader_run *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_16event_reader_run_14end_index(struct __pyx_obj_6czelta_event_reader_run *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("end_index", 0);
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyInt_From_int(((struct __pyx_vtabstruct_6czelta_event_reader_run *)__pyx_v_self->__pyx_vtab)->end_index(__pyx_v_self, 1)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("czelta.event_reader_run.end_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":9
 * cimport cython
 * 
 * cdef double delta_dir(float az1, float hor1, float az2, float hor2) nogil:             # <<<<<<<<<<<<<<
 *     cdef double sum = m.sin(hor1)*m.sin(hor2) + m.cos(hor1)*m.cos(hor2)*m.cos(az1-az2)
 *     return m.acos(sum)
 */

static double __pyx_f_6czelta_delta_dir(float __pyx_v_az1, float __pyx_v_hor1, float __pyx_v_az2, float __pyx_v_hor2) {
  double __pyx_v_sum;
  double __pyx_r;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":10
 * 
 * cdef double delta_dir(float az1, float hor1, float az2, float hor2) nogil:
 *     cdef double sum = m.sin(hor1)*m.sin(hor2) + m.cos(hor1)*m.cos(hor2)*m.cos(az1-az2)             # <<<<<<<<<<<<<<
 *     return m.acos(sum)
 * 
 */
  __pyx_v_sum = ((sin(__pyx_v_hor1) * sin(__pyx_v_hor2)) + ((cos(__pyx_v_hor1) * cos(__pyx_v_hor2)) * cos((__pyx_v_az1 - __pyx_v_az2))));

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":11
 * cdef double delta_dir(float az1, float hor1, float az2, float hor2) nogil:
 *     cdef double sum = m.sin(hor1)*m.sin(hor2) + m.cos(hor1)*m.cos(hor2)*m.cos(az1-az2)
 *     return m.acos(sum)             # <<<<<<<<<<<<<<
 * 
 * class MeteoData:
 */
  __pyx_r = acos(__pyx_v_sum);
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":9
 * cimport cython
 * 
 * cdef double delta_dir(float az1, float hor1, float az2, float hor2) nogil:             # <<<<<<<<<<<<<<
 *     cdef double sum = m.sin(hor1)*m.sin(hor2) + m.cos(hor1)*m.cos(hor2)*m.cos(az1-az2)
 *     return m.acos(sum)
 */

  /* function exit code */
  __pyx_L0:;
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":14
 * 
 * class MeteoData:
 *     def __init__(self, path, begin):             # <<<<<<<<<<<<<<
 *         self.path = path
 *         self.time = begin
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_9MeteoData_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_9MeteoData_1__init__ = {__Pyx_NAMESTR("__init__"), (PyCFunction)__pyx_pw_6czelta_9MeteoData_1__init__, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_9MeteoData_1__init__(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_self = 0;
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_begin = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_self,&__pyx_n_s_path,&__pyx_n_s_begin,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_self)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_begin)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__init__") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_self = values[0];
    __pyx_v_path = values[1];
    __pyx_v_begin = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__init__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.MeteoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_9MeteoData___init__(__pyx_self, __pyx_v_self, __pyx_v_path, __pyx_v_begin);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_9MeteoData___init__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self, PyObject *__pyx_v_path, PyObject *__pyx_v_begin) {
  PyObject *__pyx_v_dt = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":15
 * class MeteoData:
 *     def __init__(self, path, begin):
 *         self.path = path             # <<<<<<<<<<<<<<
 *         self.time = begin
 *         dt = datetime.datetime.utcfromtimestamp(begin)
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_path, __pyx_v_path) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":16
 *     def __init__(self, path, begin):
 *         self.path = path
 *         self.time = begin             # <<<<<<<<<<<<<<
 *         dt = datetime.datetime.utcfromtimestamp(begin)
 *         self.file_year = dt.year
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_time, __pyx_v_begin) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":17
 *         self.path = path
 *         self.time = begin
 *         dt = datetime.datetime.utcfromtimestamp(begin)             # <<<<<<<<<<<<<<
 *         self.file_year = dt.year
 *         self.file_month = dt.month
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_datetime); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_utcfromtimestamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyTuple_New(1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_v_begin);
  PyTuple_SET_ITEM(__pyx_t_2, 0, __pyx_v_begin);
  __Pyx_GIVEREF(__pyx_v_begin);
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_2, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_dt = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":18
 *         self.time = begin
 *         dt = datetime.datetime.utcfromtimestamp(begin)
 *         self.file_year = dt.year             # <<<<<<<<<<<<<<
 *         self.file_month = dt.month
 *         self.pressure = 0
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dt, __pyx_n_s_year); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file_year, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":19
 *         dt = datetime.datetime.utcfromtimestamp(begin)
 *         self.file_year = dt.year
 *         self.file_month = dt.month             # <<<<<<<<<<<<<<
 *         self.pressure = 0
 *         self.loadfile()
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_dt, __pyx_n_s_month); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file_month, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 19; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":20
 *         self.file_year = dt.year
 *         self.file_month = dt.month
 *         self.pressure = 0             # <<<<<<<<<<<<<<
 *         self.loadfile()
 * 
 */
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_pressure, __pyx_int_0) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":21
 *         self.file_month = dt.month
 *         self.pressure = 0
 *         self.loadfile()             # <<<<<<<<<<<<<<
 * 
 *     def __iter__(self):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loadfile); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_3, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":14
 * 
 * class MeteoData:
 *     def __init__(self, path, begin):             # <<<<<<<<<<<<<<
 *         self.path = path
 *         self.time = begin
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("czelta.MeteoData.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dt);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":23
 *         self.loadfile()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_9MeteoData_3__iter__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_9MeteoData_3__iter__ = {__Pyx_NAMESTR("__iter__"), (PyCFunction)__pyx_pw_6czelta_9MeteoData_3__iter__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_9MeteoData_3__iter__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_9MeteoData_2__iter__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_9MeteoData_2__iter__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__iter__", 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":24
 * 
 *     def __iter__(self):
 *         return self             # <<<<<<<<<<<<<<
 *     def __next__(self):
 *         return self.next()
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":23
 *         self.loadfile()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":25
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         return self.next()
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_9MeteoData_5__next__(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_9MeteoData_5__next__ = {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_6czelta_9MeteoData_5__next__, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_9MeteoData_5__next__(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__next__ (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_9MeteoData_4__next__(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_9MeteoData_4__next__(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__next__", 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":26
 *         return self
 *     def __next__(self):
 *         return self.next()             # <<<<<<<<<<<<<<
 * 
 *     def next(self):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_next); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 26; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":25
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         return self.next()
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("czelta.MeteoData.__next__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":28
 *         return self.next()
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         try:
 *             line = self.file_iter.__next__()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_9MeteoData_7next(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_9MeteoData_7next = {__Pyx_NAMESTR("next"), (PyCFunction)__pyx_pw_6czelta_9MeteoData_7next, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_9MeteoData_7next(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("next (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_9MeteoData_6next(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_9MeteoData_6next(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_v_line = NULL;
  PyObject *__pyx_v_vals = NULL;
  PyObject *__pyx_v_y = NULL;
  PyObject *__pyx_v_m = NULL;
  PyObject *__pyx_v_d = NULL;
  PyObject *__pyx_v_h = NULL;
  PyObject *__pyx_v_mt = NULL;
  PyObject *__pyx_v_s = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  int __pyx_t_6;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_t_10;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  double __pyx_t_15;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("next", 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":29
 * 
 *     def next(self):
 *         try:             # <<<<<<<<<<<<<<
 *             line = self.file_iter.__next__()
 *             self.line = line
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":30
 *     def next(self):
 *         try:
 *             line = self.file_iter.__next__()             # <<<<<<<<<<<<<<
 *             self.line = line
 *         except StopIteration:
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_iter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_next_2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_v_line = __pyx_t_4;
      __pyx_t_4 = 0;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":31
 *         try:
 *             line = self.file_iter.__next__()
 *             self.line = line             # <<<<<<<<<<<<<<
 *         except StopIteration:
 *             self.file_month+=1
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_line, __pyx_v_line) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":32
 *             line = self.file_iter.__next__()
 *             self.line = line
 *         except StopIteration:             # <<<<<<<<<<<<<<
 *             self.file_month+=1
 *             if self.file_month>12:
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("czelta.MeteoData.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_5, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_7);

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":33
 *             self.line = line
 *         except StopIteration:
 *             self.file_month+=1             # <<<<<<<<<<<<<<
 *             if self.file_month>12:
 *                 self.file_month-=12
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_month); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_9 = PyNumber_InPlaceAdd(__pyx_t_8, __pyx_int_1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file_month, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":34
 *         except StopIteration:
 *             self.file_month+=1
 *             if self.file_month>12:             # <<<<<<<<<<<<<<
 *                 self.file_month-=12
 *                 self.file_year+=1
 */
      __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_month); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __pyx_t_8 = PyObject_RichCompare(__pyx_t_9, __pyx_int_12, Py_GT); __Pyx_XGOTREF(__pyx_t_8); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __pyx_t_10 = __Pyx_PyObject_IsTrue(__pyx_t_8); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_10) {

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":35
 *             self.file_month+=1
 *             if self.file_month>12:
 *                 self.file_month-=12             # <<<<<<<<<<<<<<
 *                 self.file_year+=1
 *             try:
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_month); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_9 = PyNumber_InPlaceSubtract(__pyx_t_8, __pyx_int_12); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file_month, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":36
 *             if self.file_month>12:
 *                 self.file_month-=12
 *                 self.file_year+=1             # <<<<<<<<<<<<<<
 *             try:
 *                 self.loadfile()
 */
        __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_year); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_9);
        __pyx_t_8 = PyNumber_InPlaceAdd(__pyx_t_9, __pyx_int_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file_year, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 36; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        goto __pyx_L13;
      }
      __pyx_L13:;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":37
 *                 self.file_month-=12
 *                 self.file_year+=1
 *             try:             # <<<<<<<<<<<<<<
 *                 self.loadfile()
 *             except:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_11, &__pyx_t_12, &__pyx_t_13);
        __Pyx_XGOTREF(__pyx_t_11);
        __Pyx_XGOTREF(__pyx_t_12);
        __Pyx_XGOTREF(__pyx_t_13);
        /*try:*/ {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":38
 *                 self.file_year+=1
 *             try:
 *                 self.loadfile()             # <<<<<<<<<<<<<<
 *             except:
 *                 raise StopIteration
 */
          __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_loadfile); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L14_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
        }
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
        goto __pyx_L21_try_end;
        __pyx_L14_error:;
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":39
 *             try:
 *                 self.loadfile()
 *             except:             # <<<<<<<<<<<<<<
 *                 raise StopIteration
 *             return self.next()
 */
        /*except:*/ {
          __Pyx_AddTraceback("czelta.MeteoData.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
          if (__Pyx_GetException(&__pyx_t_9, &__pyx_t_8, &__pyx_t_14) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
          __Pyx_GOTREF(__pyx_t_9);
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_GOTREF(__pyx_t_14);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":40
 *                 self.loadfile()
 *             except:
 *                 raise StopIteration             # <<<<<<<<<<<<<<
 *             return self.next()
 *         vals = line.split(" ")
 */
          __Pyx_Raise(__pyx_builtin_StopIteration, 0, 0, 0);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L16_except_error;}
          __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
          goto __pyx_L15_exception_handled;
        }
        __pyx_L16_except_error:;
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        goto __pyx_L5_except_error;
        __pyx_L15_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_11);
        __Pyx_XGIVEREF(__pyx_t_12);
        __Pyx_XGIVEREF(__pyx_t_13);
        __Pyx_ExceptionReset(__pyx_t_11, __pyx_t_12, __pyx_t_13);
        __pyx_L21_try_end:;
      }

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":41
 *             except:
 *                 raise StopIteration
 *             return self.next()             # <<<<<<<<<<<<<<
 *         vals = line.split(" ")
 *         y = int(vals[0])
 */
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_14 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_next); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_14);
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_14, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_14); __pyx_t_14 = 0;
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L6_except_return;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L4_exception_handled;
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L6_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L4_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L10_try_end:;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":42
 *                 raise StopIteration
 *             return self.next()
 *         vals = line.split(" ")             # <<<<<<<<<<<<<<
 *         y = int(vals[0])
 *         m = int(vals[1])
 */
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_v_line, __pyx_n_s_split); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_tuple__16, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_vals = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":43
 *             return self.next()
 *         vals = line.split(" ")
 *         y = int(vals[0])             # <<<<<<<<<<<<<<
 *         m = int(vals[1])
 *         d = int(vals[2])
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_vals, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_y = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":44
 *         vals = line.split(" ")
 *         y = int(vals[0])
 *         m = int(vals[1])             # <<<<<<<<<<<<<<
 *         d = int(vals[2])
 *         h = int(vals[3])
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_vals, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_m = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":45
 *         y = int(vals[0])
 *         m = int(vals[1])
 *         d = int(vals[2])             # <<<<<<<<<<<<<<
 *         h = int(vals[3])
 *         mt = int(vals[4])
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_vals, 2, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_d = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":46
 *         m = int(vals[1])
 *         d = int(vals[2])
 *         h = int(vals[3])             # <<<<<<<<<<<<<<
 *         mt = int(vals[4])
 *         s = int(vals[5])
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_vals, 3, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_h = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":47
 *         d = int(vals[2])
 *         h = int(vals[3])
 *         mt = int(vals[4])             # <<<<<<<<<<<<<<
 *         s = int(vals[5])
 *         self.time = date_to_timestamp(datetime.datetime(y,m,d,h,mt,s))
 */
  __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_vals, 4, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = PyNumber_Int(__pyx_t_5); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_mt = __pyx_t_7;
  __pyx_t_7 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":48
 *         h = int(vals[3])
 *         mt = int(vals[4])
 *         s = int(vals[5])             # <<<<<<<<<<<<<<
 *         self.time = date_to_timestamp(datetime.datetime(y,m,d,h,mt,s))
 *         try:
 */
  __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_vals, 5, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_7);
  __pyx_t_5 = PyNumber_Int(__pyx_t_7); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __pyx_v_s = __pyx_t_5;
  __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":49
 *         mt = int(vals[4])
 *         s = int(vals[5])
 *         self.time = date_to_timestamp(datetime.datetime(y,m,d,h,mt,s))             # <<<<<<<<<<<<<<
 *         try:
 *             self.temp = float(vals[17])
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_datetime); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_datetime); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_7);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(6); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_INCREF(__pyx_v_y);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_v_y);
  __Pyx_GIVEREF(__pyx_v_y);
  __Pyx_INCREF(__pyx_v_m);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_v_m);
  __Pyx_GIVEREF(__pyx_v_m);
  __Pyx_INCREF(__pyx_v_d);
  PyTuple_SET_ITEM(__pyx_t_5, 2, __pyx_v_d);
  __Pyx_GIVEREF(__pyx_v_d);
  __Pyx_INCREF(__pyx_v_h);
  PyTuple_SET_ITEM(__pyx_t_5, 3, __pyx_v_h);
  __Pyx_GIVEREF(__pyx_v_h);
  __Pyx_INCREF(__pyx_v_mt);
  PyTuple_SET_ITEM(__pyx_t_5, 4, __pyx_v_mt);
  __Pyx_GIVEREF(__pyx_v_mt);
  __Pyx_INCREF(__pyx_v_s);
  PyTuple_SET_ITEM(__pyx_t_5, 5, __pyx_v_s);
  __Pyx_GIVEREF(__pyx_v_s);
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_7, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_f_6czelta_date_to_timestamp(__pyx_t_4, 0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_time, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":50
 *         s = int(vals[5])
 *         self.time = date_to_timestamp(datetime.datetime(y,m,d,h,mt,s))
 *         try:             # <<<<<<<<<<<<<<
 *             self.temp = float(vals[17])
 *         except ValueError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_2, &__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_1);
    /*try:*/ {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":51
 *         self.time = date_to_timestamp(datetime.datetime(y,m,d,h,mt,s))
 *         try:
 *             self.temp = float(vals[17])             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             self.temp = None
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_vals, 17, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L24_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_15 = __Pyx_PyObject_AsDouble(__pyx_t_5); if (unlikely(__pyx_t_15 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L24_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __pyx_t_5 = PyFloat_FromDouble(__pyx_t_15); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L24_error;}
      __Pyx_GOTREF(__pyx_t_5);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_temp, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L24_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    goto __pyx_L31_try_end;
    __pyx_L24_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":52
 *         try:
 *             self.temp = float(vals[17])
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             self.temp = None
 *         try:
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("czelta.MeteoData.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_5, &__pyx_t_4, &__pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L26_except_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_7);

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":53
 *             self.temp = float(vals[17])
 *         except ValueError:
 *             self.temp = None             # <<<<<<<<<<<<<<
 *         try:
 *             self.pressure = float(vals[12])
 */
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_temp, Py_None) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L26_except_error;}
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      goto __pyx_L25_exception_handled;
    }
    goto __pyx_L26_except_error;
    __pyx_L26_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    goto __pyx_L1_error;
    __pyx_L25_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_2, __pyx_t_1);
    __pyx_L31_try_end:;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":54
 *         except ValueError:
 *             self.temp = None
 *         try:             # <<<<<<<<<<<<<<
 *             self.pressure = float(vals[12])
 *         except ValueError:
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_1, &__pyx_t_2, &__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_1);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    /*try:*/ {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":55
 *             self.temp = None
 *         try:
 *             self.pressure = float(vals[12])             # <<<<<<<<<<<<<<
 *         except ValueError:
 *             if vals[12]=='null':
 */
      __pyx_t_7 = __Pyx_GetItemInt(__pyx_v_vals, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_7 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L34_error;};
      __Pyx_GOTREF(__pyx_t_7);
      __pyx_t_15 = __Pyx_PyObject_AsDouble(__pyx_t_7); if (unlikely(__pyx_t_15 == ((double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyFloat_FromDouble(__pyx_t_15); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
      __Pyx_GOTREF(__pyx_t_7);
      if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_pressure, __pyx_t_7) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L34_error;}
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    goto __pyx_L41_try_end;
    __pyx_L34_error:;
    __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":56
 *         try:
 *             self.pressure = float(vals[12])
 *         except ValueError:             # <<<<<<<<<<<<<<
 *             if vals[12]=='null':
 *                 return self.next()
 */
    __pyx_t_6 = PyErr_ExceptionMatches(__pyx_builtin_ValueError);
    if (__pyx_t_6) {
      __Pyx_AddTraceback("czelta.MeteoData.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_4, &__pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_GOTREF(__pyx_t_5);

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":57
 *             self.pressure = float(vals[12])
 *         except ValueError:
 *             if vals[12]=='null':             # <<<<<<<<<<<<<<
 *                 return self.next()
 *         return self
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_vals, 12, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_10 = (__Pyx_PyString_Equals(__pyx_t_8, __pyx_n_s_null, Py_EQ)); if (unlikely(__pyx_t_10 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      if (__pyx_t_10) {

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":58
 *         except ValueError:
 *             if vals[12]=='null':
 *                 return self.next()             # <<<<<<<<<<<<<<
 *         return self
 *     def loadfile(self):
 */
        __Pyx_XDECREF(__pyx_r);
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_next); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_14 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_14)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L36_except_error;}
        __Pyx_GOTREF(__pyx_t_14);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_r = __pyx_t_14;
        __pyx_t_14 = 0;
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
        goto __pyx_L37_except_return;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      goto __pyx_L35_exception_handled;
    }
    goto __pyx_L36_except_error;
    __pyx_L36_except_error:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L1_error;
    __pyx_L37_except_return:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    goto __pyx_L0;
    __pyx_L35_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_1);
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_ExceptionReset(__pyx_t_1, __pyx_t_2, __pyx_t_3);
    __pyx_L41_try_end:;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":59
 *             if vals[12]=='null':
 *                 return self.next()
 *         return self             # <<<<<<<<<<<<<<
 *     def loadfile(self):
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))
 */
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_self);
  __pyx_r = __pyx_v_self;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":28
 *         return self.next()
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         try:
 *             line = self.file_iter.__next__()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_14);
  __Pyx_AddTraceback("czelta.MeteoData.next", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_line);
  __Pyx_XDECREF(__pyx_v_vals);
  __Pyx_XDECREF(__pyx_v_y);
  __Pyx_XDECREF(__pyx_v_m);
  __Pyx_XDECREF(__pyx_v_d);
  __Pyx_XDECREF(__pyx_v_h);
  __Pyx_XDECREF(__pyx_v_mt);
  __Pyx_XDECREF(__pyx_v_s);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":60
 *                 return self.next()
 *         return self
 *     def loadfile(self):             # <<<<<<<<<<<<<<
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))
 *         self.file_iter = self.file.__iter__()
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_9MeteoData_9loadfile(PyObject *__pyx_self, PyObject *__pyx_v_self); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_9MeteoData_9loadfile = {__Pyx_NAMESTR("loadfile"), (PyCFunction)__pyx_pw_6czelta_9MeteoData_9loadfile, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_9MeteoData_9loadfile(PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("loadfile (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_9MeteoData_8loadfile(__pyx_self, ((PyObject *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_9MeteoData_8loadfile(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("loadfile", 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":61
 *         return self
 *     def loadfile(self):
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))             # <<<<<<<<<<<<<<
 *         self.file_iter = self.file.__iter__()
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_path); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_year); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file_month); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyTuple_New(3); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_1);
  __Pyx_GIVEREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  PyTuple_SET_ITEM(__pyx_t_4, 2, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_1 = 0;
  __pyx_t_2 = 0;
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyString_Format(__pyx_kp_s_s_i_02i_txt, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_3);
  __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":62
 *     def loadfile(self):
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))
 *         self.file_iter = self.file.__iter__()             # <<<<<<<<<<<<<<
 * 
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):
 */
  __pyx_t_3 = __Pyx_PyObject_GetAttrStr(__pyx_v_self, __pyx_n_s_file); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_3, __pyx_n_s_iter); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (__Pyx_PyObject_SetAttrStr(__pyx_v_self, __pyx_n_s_file_iter, __pyx_t_3) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":60
 *                 return self.next()
 *         return self
 *     def loadfile(self):             # <<<<<<<<<<<<<<
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))
 *         self.file_iter = self.file.__iter__()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.MeteoData.loadfile", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":64
 *         self.file_iter = self.file.__iter__()
 * 
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):             # <<<<<<<<<<<<<<
 *     scale*=2
 *     if scale == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_3mapa_smeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_3mapa_smeru = {__Pyx_NAMESTR("mapa_smeru"), (PyCFunction)__pyx_pw_6czelta_3mapa_smeru, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_3mapa_smeru(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  double __pyx_v_citlivost;
  PyObject *__pyx_v_f = 0;
  PyObject *__pyx_v_path = 0;
  int __pyx_v_scale;
  float __pyx_v_mm;
  float __pyx_v_b;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("mapa_smeru (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_citlivost,&__pyx_n_s_f,&__pyx_n_s_path,&__pyx_n_s_scale,&__pyx_n_s_mm,&__pyx_n_s_b,0};
    PyObject* values[6] = {0,0,0,0,0,0};
    values[1] = ((PyObject *)Py_None);
    values[2] = ((PyObject *)__pyx_kp_s_data_pardubice_spse_dat);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_citlivost);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_f);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_scale);
          if (value) { values[3] = value; kw_args--; }
        }
        case  4:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_mm);
          if (value) { values[4] = value; kw_args--; }
        }
        case  5:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_b);
          if (value) { values[5] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "mapa_smeru") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  6: values[5] = PyTuple_GET_ITEM(__pyx_args, 5);
        case  5: values[4] = PyTuple_GET_ITEM(__pyx_args, 4);
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_citlivost = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_citlivost == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_citlivost = ((double)5.0);
    }
    __pyx_v_f = values[1];
    __pyx_v_path = values[2];
    if (values[3]) {
      __pyx_v_scale = __Pyx_PyInt_As_int(values[3]); if (unlikely((__pyx_v_scale == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_scale = ((int)1);
    }
    if (values[4]) {
      __pyx_v_mm = __pyx_PyFloat_AsFloat(values[4]); if (unlikely((__pyx_v_mm == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_mm = ((float)0.0);
    }
    if (values[5]) {
      __pyx_v_b = __pyx_PyFloat_AsFloat(values[5]); if (unlikely((__pyx_v_b == (float)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_b = ((float)0.0);
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("mapa_smeru", 0, 0, 6, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.mapa_smeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_2mapa_smeru(__pyx_self, __pyx_v_citlivost, __pyx_v_f, __pyx_v_path, __pyx_v_scale, __pyx_v_mm, __pyx_v_b);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_2mapa_smeru(CYTHON_UNUSED PyObject *__pyx_self, double __pyx_v_citlivost, PyObject *__pyx_v_f, PyObject *__pyx_v_path, int __pyx_v_scale, float __pyx_v_mm, float __pyx_v_b) {
  int __pyx_v_pressure_cor;
  struct __pyx_obj_6czelta_event_reader *__pyx_v_er = 0;
  double __pyx_v_avg_flux;
  PyObject *__pyx_v_meteo = NULL;
  PyObject *__pyx_v_sts = NULL;
  int __pyx_v_measure_time;
  PyArrayObject *__pyx_v_data = 0;
  std::vector<float> __pyx_v_RA;
  std::vector<float> __pyx_v_D;
  std::vector<int> __pyx_v_times;
  std::vector<int> __pyx_v_fluxes;
  float *__pyx_v_dir;
  struct __pyx_obj_6czelta_event *__pyx_v_e = 0;
  int __pyx_v_flux_tm;
  int __pyx_v_flux_s;
  int __pyx_v_flux_tm_l;
  int __pyx_v_flux_sum;
  int __pyx_v_flux_length;
  std::vector<double> __pyx_v_measuredt;
  int __pyx_v_t;
  double __pyx_v_ratio;
  PyObject *__pyx_v_me = NULL;
  PyObject *__pyx_v_run = NULL;
  PyObject *__pyx_v_begin = NULL;
  PyObject *__pyx_v_end = NULL;
  int __pyx_v_length;
  std::vector<float> __pyx_v_deltas;
  double __pyx_v_maxdelta;
  int __pyx_v_xx;
  int __pyx_v_yy;
  int __pyx_v_i;
  float __pyx_v_x;
  float __pyx_v_y;
  PyArrayObject *__pyx_v_source = 0;
  CYTHON_UNUSED PyObject *__pyx_v_pos = 0;
  std::vector<double> __pyx_v_multiplyarray;
  PyArrayObject *__pyx_v_expected = 0;
  PyArrayObject *__pyx_v_expected_error = 0;
  PyArrayObject *__pyx_v_result = 0;
  PyObject *__pyx_v_extent = NULL;
  PyObject *__pyx_v_y2 = 0;
  CYTHON_UNUSED PyObject *__pyx_v_x2 = 0;
  CYTHON_UNUSED PyObject *__pyx_v_y4 = 0;
  PyObject *__pyx_v_dy2 = 0;
  PyObject *__pyx_v_data_error = 0;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_expected;
  __Pyx_Buffer __pyx_pybuffer_expected;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_expected_error;
  __Pyx_Buffer __pyx_pybuffer_expected_error;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_result;
  __Pyx_Buffer __pyx_pybuffer_result;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_source;
  __Pyx_Buffer __pyx_pybuffer_source;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  Py_ssize_t __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyObject *(*__pyx_t_12)(PyObject *);
  PyObject *__pyx_t_13 = NULL;
  PyObject *__pyx_t_14 = NULL;
  PyObject *__pyx_t_15 = NULL;
  int __pyx_t_16;
  double __pyx_t_17;
  long __pyx_t_18;
  long __pyx_t_19;
  int __pyx_t_20;
  int __pyx_t_21;
  int __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  PyArrayObject *__pyx_t_25 = NULL;
  int __pyx_t_26;
  int __pyx_t_27;
  PyArrayObject *__pyx_t_28 = NULL;
  PyArrayObject *__pyx_t_29 = NULL;
  long __pyx_t_30;
  long __pyx_t_31;
  long __pyx_t_32;
  int __pyx_t_33;
  int __pyx_t_34;
  int __pyx_t_35;
  long __pyx_t_36;
  int __pyx_t_37;
  int __pyx_t_38;
  int __pyx_t_39;
  PyArrayObject *__pyx_t_40 = NULL;
  int __pyx_t_41;
  int __pyx_t_42;
  int __pyx_t_43;
  __pyx_t_5numpy_double_t __pyx_t_44;
  int __pyx_t_45;
  int __pyx_t_46;
  __pyx_t_5numpy_double_t __pyx_t_47;
  int __pyx_t_48;
  int __pyx_t_49;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("mapa_smeru", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;
  __pyx_pybuffer_source.pybuffer.buf = NULL;
  __pyx_pybuffer_source.refcount = 0;
  __pyx_pybuffernd_source.data = NULL;
  __pyx_pybuffernd_source.rcbuffer = &__pyx_pybuffer_source;
  __pyx_pybuffer_expected.pybuffer.buf = NULL;
  __pyx_pybuffer_expected.refcount = 0;
  __pyx_pybuffernd_expected.data = NULL;
  __pyx_pybuffernd_expected.rcbuffer = &__pyx_pybuffer_expected;
  __pyx_pybuffer_expected_error.pybuffer.buf = NULL;
  __pyx_pybuffer_expected_error.refcount = 0;
  __pyx_pybuffernd_expected_error.data = NULL;
  __pyx_pybuffernd_expected_error.rcbuffer = &__pyx_pybuffer_expected_error;
  __pyx_pybuffer_result.pybuffer.buf = NULL;
  __pyx_pybuffer_result.refcount = 0;
  __pyx_pybuffernd_result.data = NULL;
  __pyx_pybuffernd_result.rcbuffer = &__pyx_pybuffer_result;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":65
 * 
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):
 *     scale*=2             # <<<<<<<<<<<<<<
 *     if scale == 0:
 *         scale = 1
 */
  __pyx_v_scale = (__pyx_v_scale * 2);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":66
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):
 *     scale*=2
 *     if scale == 0:             # <<<<<<<<<<<<<<
 *         scale = 1
 *     citlivost*=m.M_PI/180.0
 */
  __pyx_t_1 = ((__pyx_v_scale == 0) != 0);
  if (__pyx_t_1) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":67
 *     scale*=2
 *     if scale == 0:
 *         scale = 1             # <<<<<<<<<<<<<<
 *     citlivost*=m.M_PI/180.0
 *     cdef bint pressure_cor = mm != 0 and b != 0
 */
    __pyx_v_scale = 1;
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":68
 *     if scale == 0:
 *         scale = 1
 *     citlivost*=m.M_PI/180.0             # <<<<<<<<<<<<<<
 *     cdef bint pressure_cor = mm != 0 and b != 0
 *     #filtering data
 */
  __pyx_v_citlivost = (__pyx_v_citlivost * (M_PI / 180.0));

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":69
 *         scale = 1
 *     citlivost*=m.M_PI/180.0
 *     cdef bint pressure_cor = mm != 0 and b != 0             # <<<<<<<<<<<<<<
 *     #filtering data
 *     cdef event_reader er = event_reader(path)
 */
  __pyx_t_1 = (__pyx_v_mm != 0.0);
  if (__pyx_t_1) {
    __pyx_t_2 = (__pyx_v_b != 0.0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  __pyx_v_pressure_cor = __pyx_t_3;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":71
 *     cdef bint pressure_cor = mm != 0 and b != 0
 *     #filtering data
 *     cdef event_reader er = event_reader(path)             # <<<<<<<<<<<<<<
 *     er.filter_calibrations()
 *     er.filter_maximum_TDC()
 */
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_v_path);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_v_path);
  __Pyx_GIVEREF(__pyx_v_path);
  __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event_reader)), __pyx_t_4, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_er = ((struct __pyx_obj_6czelta_event_reader *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":72
 *     #filtering data
 *     cdef event_reader er = event_reader(path)
 *     er.filter_calibrations()             # <<<<<<<<<<<<<<
 *     er.filter_maximum_TDC()
 *     if f:
 */
  ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter_calibrations(__pyx_v_er, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":73
 *     cdef event_reader er = event_reader(path)
 *     er.filter_calibrations()
 *     er.filter_maximum_TDC()             # <<<<<<<<<<<<<<
 *     if f:
 *         er.filter(f)
 */
  ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter_maximum_TDC(__pyx_v_er, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":74
 *     er.filter_calibrations()
 *     er.filter_maximum_TDC()
 *     if f:             # <<<<<<<<<<<<<<
 *         er.filter(f)
 *     if len(er)==0:
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_f); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":75
 *     er.filter_maximum_TDC()
 *     if f:
 *         er.filter(f)             # <<<<<<<<<<<<<<
 *     if len(er)==0:
 *         return
 */
    ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter(__pyx_v_er, __pyx_v_f, 0);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":76
 *     if f:
 *         er.filter(f)
 *     if len(er)==0:             # <<<<<<<<<<<<<<
 *         return
 *     cdef double avg_flux = er.measure_length()/float(len(er))
 */
  __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_er)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((__pyx_t_6 == 0) != 0);
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":77
 *         er.filter(f)
 *     if len(er)==0:
 *         return             # <<<<<<<<<<<<<<
 *     cdef double avg_flux = er.measure_length()/float(len(er))
 *     meteo = None
 */
    __Pyx_XDECREF(__pyx_r);
    __pyx_r = Py_None; __Pyx_INCREF(Py_None);
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":78
 *     if len(er)==0:
 *         return
 *     cdef double avg_flux = er.measure_length()/float(len(er))             # <<<<<<<<<<<<<<
 *     meteo = None
 *     if pressure_cor:
 */
  __pyx_t_7 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->measure_length(__pyx_v_er, 0);
  __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_er)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(((double)__pyx_t_6) == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "float division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_avg_flux = (__pyx_t_7 / ((double)__pyx_t_6));

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":79
 *         return
 *     cdef double avg_flux = er.measure_length()/float(len(er))
 *     meteo = None             # <<<<<<<<<<<<<<
 *     if pressure_cor:
 *         sts = {
 */
  __Pyx_INCREF(Py_None);
  __pyx_v_meteo = Py_None;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":80
 *     cdef double avg_flux = er.measure_length()/float(len(er))
 *     meteo = None
 *     if pressure_cor:             # <<<<<<<<<<<<<<
 *         sts = {
 *             'praha_utef':'/home/martin/data/Meteodata/Praha/Meteodata_LKPR_',
 */
  __pyx_t_3 = (__pyx_v_pressure_cor != 0);
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":81
 *     meteo = None
 *     if pressure_cor:
 *         sts = {             # <<<<<<<<<<<<<<
 *             'praha_utef':'/home/martin/data/Meteodata/Praha/Meteodata_LKPR_',
 *             'pardubice_spse':'/home/martin/data/Meteodata/Pardubice/Meteodata_LKPD_',
 */
    __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_praha_utef, __pyx_kp_s_home_martin_data_Meteodata_Prah) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pardubice_spse, __pyx_kp_s_home_martin_data_Meteodata_Pard) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_pardubice_gd, __pyx_kp_s_home_martin_data_Meteodata_Pard) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_opava_su, __pyx_kp_s_home_martin_data_Meteodata_Opav) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_opava_mg, __pyx_kp_s_home_martin_data_Meteodata_Opav) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_opava_zsbn, __pyx_kp_s_home_martin_data_Meteodata_Opav) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_sts = ((PyObject*)__pyx_t_5);
    __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":89
 *             'opava_zsbn':'/home/martin/data/Meteodata/Opava/Meteodata_LKMT_'
 *         }
 *         meteo = MeteoData(sts[er.get_station().name()], er[0].timestamp)             # <<<<<<<<<<<<<<
 * 
 *     if len(er)==0:
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_MeteoData); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->get_station(__pyx_v_er, 0)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_sts, __pyx_t_4); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_GetItemInt(((PyObject *)__pyx_v_er), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_4 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = PyTuple_New(2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_4, 1, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    __pyx_t_8 = 0;
    __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF_SET(__pyx_v_meteo, __pyx_t_9);
    __pyx_t_9 = 0;
    goto __pyx_L6;
  }
  __pyx_L6:;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":91
 *         meteo = MeteoData(sts[er.get_station().name()], er[0].timestamp)
 * 
 *     if len(er)==0:             # <<<<<<<<<<<<<<
 *         return None
 * 
 */
  __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_er)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = ((__pyx_t_6 == 0) != 0);
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":92
 * 
 *     if len(er)==0:
 *         return None             # <<<<<<<<<<<<<<
 * 
 *     cdef int measure_time = er.measure_time()
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":94
 *         return None
 * 
 *     cdef int measure_time = er.measure_time()             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] data = np.zeros((360/scale+1,720/scale), dtype=np.double)
 * 
 */
  __pyx_v_measure_time = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->measure_time(__pyx_v_er, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":95
 * 
 *     cdef int measure_time = er.measure_time()
 *     cdef np.ndarray[np.double_t, ndim=2] data = np.zeros((360/scale+1,720/scale), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[float] RA
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __Pyx_PyInt_From_long(__Pyx_div_long(720, __pyx_v_scale)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_8 = PyTuple_New(2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_8, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_9 = 0;
  __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_double); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_10) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_5, __pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_10) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_10, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_10);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_data.diminfo[1].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_data.diminfo[1].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_10);
  __pyx_t_10 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":104
 *     cdef float* dir
 *     cdef event e
 *     cdef int flux_tm, flux_s, flux_tm_l, flux_sum = 0, flux_length = 0             # <<<<<<<<<<<<<<
 *     for e in er:
 *         dir = e.e.calculateEarthDirRadians()
 */
  __pyx_v_flux_sum = 0;
  __pyx_v_flux_length = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":105
 *     cdef event e
 *     cdef int flux_tm, flux_s, flux_tm_l, flux_sum = 0, flux_length = 0
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.e.calculateEarthDirRadians()
 *         if dir:
 */
  if (PyList_CheckExact(((PyObject *)__pyx_v_er)) || PyTuple_CheckExact(((PyObject *)__pyx_v_er))) {
    __pyx_t_10 = ((PyObject *)__pyx_v_er); __Pyx_INCREF(__pyx_t_10); __pyx_t_6 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_10 = PyObject_GetIter(((PyObject *)__pyx_v_er)); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_10)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_10)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_8 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_10, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_10)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_6); __Pyx_INCREF(__pyx_t_8); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_10, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_8 = __pyx_t_12(__pyx_t_10);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_6czelta_event))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_e, ((struct __pyx_obj_6czelta_event *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":106
 *     cdef int flux_tm, flux_s, flux_tm_l, flux_sum = 0, flux_length = 0
 *     for e in er:
 *         dir = e.e.calculateEarthDirRadians()             # <<<<<<<<<<<<<<
 *         if dir:
 *             RA.push_back(dir[0])
 */
    __pyx_v_dir = __pyx_v_e->e.calculateEarthDirRadians();

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":107
 *     for e in er:
 *         dir = e.e.calculateEarthDirRadians()
 *         if dir:             # <<<<<<<<<<<<<<
 *             RA.push_back(dir[0])
 *             D.push_back(dir[1])
 */
    __pyx_t_3 = (__pyx_v_dir != 0);
    if (__pyx_t_3) {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":108
 *         dir = e.e.calculateEarthDirRadians()
 *         if dir:
 *             RA.push_back(dir[0])             # <<<<<<<<<<<<<<
 *             D.push_back(dir[1])
 *             times.push_back(e.timestamp)
 */
      __pyx_v_RA.push_back((__pyx_v_dir[0]));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":109
 *         if dir:
 *             RA.push_back(dir[0])
 *             D.push_back(dir[1])             # <<<<<<<<<<<<<<
 *             times.push_back(e.timestamp)
 *             if pressure_cor:
 */
      __pyx_v_D.push_back((__pyx_v_dir[1]));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":110
 *             RA.push_back(dir[0])
 *             D.push_back(dir[1])
 *             times.push_back(e.timestamp)             # <<<<<<<<<<<<<<
 *             if pressure_cor:
 *                 flux_tm = (e.timestamp+30*60)//(60*60)*(60*60)
 */
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_e), __pyx_n_s_timestamp); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __pyx_v_times.push_back(__pyx_t_7);

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":111
 *             D.push_back(dir[1])
 *             times.push_back(e.timestamp)
 *             if pressure_cor:             # <<<<<<<<<<<<<<
 *                 flux_tm = (e.timestamp+30*60)//(60*60)*(60*60)
 *                 if flux_tm != flux_tm_l:
 */
      __pyx_t_3 = (__pyx_v_pressure_cor != 0);
      if (__pyx_t_3) {

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":112
 *             times.push_back(e.timestamp)
 *             if pressure_cor:
 *                 flux_tm = (e.timestamp+30*60)//(60*60)*(60*60)             # <<<<<<<<<<<<<<
 *                 if flux_tm != flux_tm_l:
 *                     flux_tm_l = flux_tm
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_e), __pyx_n_s_timestamp); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_5 = PyNumber_Add(__pyx_t_8, __pyx_int_1800); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_FloorDivide(__pyx_t_5, __pyx_int_3600); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_5 = PyNumber_Multiply(__pyx_t_8, __pyx_int_3600); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_5); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 112; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_v_flux_tm = __pyx_t_7;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":113
 *             if pressure_cor:
 *                 flux_tm = (e.timestamp+30*60)//(60*60)*(60*60)
 *                 if flux_tm != flux_tm_l:             # <<<<<<<<<<<<<<
 *                     flux_tm_l = flux_tm
 *                     try:
 */
        __pyx_t_3 = ((__pyx_v_flux_tm != __pyx_v_flux_tm_l) != 0);
        if (__pyx_t_3) {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":114
 *                 flux_tm = (e.timestamp+30*60)//(60*60)*(60*60)
 *                 if flux_tm != flux_tm_l:
 *                     flux_tm_l = flux_tm             # <<<<<<<<<<<<<<
 *                     try:
 *                         while meteo.next().time < flux_tm:
 */
          __pyx_v_flux_tm_l = __pyx_v_flux_tm;

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":115
 *                 if flux_tm != flux_tm_l:
 *                     flux_tm_l = flux_tm
 *                     try:             # <<<<<<<<<<<<<<
 *                         while meteo.next().time < flux_tm:
 *                             pass
 */
          {
            __Pyx_ExceptionSave(&__pyx_t_13, &__pyx_t_14, &__pyx_t_15);
            __Pyx_XGOTREF(__pyx_t_13);
            __Pyx_XGOTREF(__pyx_t_14);
            __Pyx_XGOTREF(__pyx_t_15);
            /*try:*/ {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":116
 *                     flux_tm_l = flux_tm
 *                     try:
 *                         while meteo.next().time < flux_tm:             # <<<<<<<<<<<<<<
 *                             pass
 *                     except StopIteration:
 */
              while (1) {
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_v_meteo, __pyx_n_s_next); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_GOTREF(__pyx_t_5);
                __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_GOTREF(__pyx_t_8);
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_time); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_GOTREF(__pyx_t_5);
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_flux_tm); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_GOTREF(__pyx_t_8);
                __pyx_t_4 = PyObject_RichCompare(__pyx_t_5, __pyx_t_8, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
                __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
                __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L13_error;}
                __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
                if (!__pyx_t_3) break;
              }
            }
            __Pyx_XDECREF(__pyx_t_13); __pyx_t_13 = 0;
            __Pyx_XDECREF(__pyx_t_14); __pyx_t_14 = 0;
            __Pyx_XDECREF(__pyx_t_15); __pyx_t_15 = 0;
            goto __pyx_L20_try_end;
            __pyx_L13_error:;
            __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
            __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
            __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
            __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":118
 *                         while meteo.next().time < flux_tm:
 *                             pass
 *                     except StopIteration:             # <<<<<<<<<<<<<<
 *                         break
 *                     flux_s = er.flux(flux_tm-30*60, flux_tm+30*60)
 */
            __pyx_t_7 = PyErr_ExceptionMatches(__pyx_builtin_StopIteration);
            if (__pyx_t_7) {
              __Pyx_AddTraceback("czelta.mapa_smeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
              if (__Pyx_GetException(&__pyx_t_4, &__pyx_t_8, &__pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L15_except_error;}
              __Pyx_GOTREF(__pyx_t_4);
              __Pyx_GOTREF(__pyx_t_8);
              __Pyx_GOTREF(__pyx_t_5);

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":119
 *                             pass
 *                     except StopIteration:
 *                         break             # <<<<<<<<<<<<<<
 *                     flux_s = er.flux(flux_tm-30*60, flux_tm+30*60)
 *                     if flux_s < avg_flux/3:
 */
              goto __pyx_L23_except_break;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              goto __pyx_L14_exception_handled;
              __pyx_L23_except_break:;
              __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
              __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
              __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
              goto __pyx_L18_try_break;
            }
            goto __pyx_L15_except_error;
            __pyx_L15_except_error:;
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            goto __pyx_L1_error;
            __pyx_L18_try_break:;
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            goto __pyx_L9_break;
            __pyx_L14_exception_handled:;
            __Pyx_XGIVEREF(__pyx_t_13);
            __Pyx_XGIVEREF(__pyx_t_14);
            __Pyx_XGIVEREF(__pyx_t_15);
            __Pyx_ExceptionReset(__pyx_t_13, __pyx_t_14, __pyx_t_15);
            __pyx_L20_try_end:;
          }

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":120
 *                     except StopIteration:
 *                         break
 *                     flux_s = er.flux(flux_tm-30*60, flux_tm+30*60)             # <<<<<<<<<<<<<<
 *                     if flux_s < avg_flux/3:
 *                         flux_s = 0
 */
          __pyx_v_flux_s = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->flux(__pyx_v_er, (__pyx_v_flux_tm - 1800), (__pyx_v_flux_tm + 1800), 0);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":121
 *                         break
 *                     flux_s = er.flux(flux_tm-30*60, flux_tm+30*60)
 *                     if flux_s < avg_flux/3:             # <<<<<<<<<<<<<<
 *                         flux_s = 0
 *                     flux_sum += flux_s
 */
          __pyx_t_3 = ((__pyx_v_flux_s < (__pyx_v_avg_flux / 3.0)) != 0);
          if (__pyx_t_3) {

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":122
 *                     flux_s = er.flux(flux_tm-30*60, flux_tm+30*60)
 *                     if flux_s < avg_flux/3:
 *                         flux_s = 0             # <<<<<<<<<<<<<<
 *                     flux_sum += flux_s
 *                     if flux_s > 0:
 */
            __pyx_v_flux_s = 0;
            goto __pyx_L25;
          }
          __pyx_L25:;

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":123
 *                     if flux_s < avg_flux/3:
 *                         flux_s = 0
 *                     flux_sum += flux_s             # <<<<<<<<<<<<<<
 *                     if flux_s > 0:
 *                         flux_length += 1
 */
          __pyx_v_flux_sum = (__pyx_v_flux_sum + __pyx_v_flux_s);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":124
 *                         flux_s = 0
 *                     flux_sum += flux_s
 *                     if flux_s > 0:             # <<<<<<<<<<<<<<
 *                         flux_length += 1
 * 
 */
          __pyx_t_3 = ((__pyx_v_flux_s > 0) != 0);
          if (__pyx_t_3) {

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":125
 *                     flux_sum += flux_s
 *                     if flux_s > 0:
 *                         flux_length += 1             # <<<<<<<<<<<<<<
 * 
 *                 fluxes.push_back(flux_s)
 */
            __pyx_v_flux_length = (__pyx_v_flux_length + 1);
            goto __pyx_L26;
          }
          __pyx_L26:;
          goto __pyx_L12;
        }
        __pyx_L12:;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":127
 *                         flux_length += 1
 * 
 *                 fluxes.push_back(flux_s)             # <<<<<<<<<<<<<<
 *     #for each second of SIDEREAL time is calculated how many time it is (for longtitude 0)
 *     cdef vector[double] measuredt
 */
        __pyx_v_fluxes.push_back(__pyx_v_flux_s);
        goto __pyx_L11;
      }
      __pyx_L11:;
      goto __pyx_L10;
    }
    __pyx_L10:;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":105
 *     cdef event e
 *     cdef int flux_tm, flux_s, flux_tm_l, flux_sum = 0, flux_length = 0
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.e.calculateEarthDirRadians()
 *         if dir:
 */
  }
  __pyx_L9_break:;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":130
 *     #for each second of SIDEREAL time is calculated how many time it is (for longtitude 0)
 *     cdef vector[double] measuredt
 *     measuredt.resize(86400)             # <<<<<<<<<<<<<<
 * 
 *     cdef int t
 */
  __pyx_v_measuredt.resize(86400);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":134
 *     cdef int t
 *     cdef double ratio
 *     if pressure_cor:             # <<<<<<<<<<<<<<
 *         avg_flux = flux_sum/flux_length
 *         for me in MeteoData(sts[er.get_station().name()], er[0].timestamp):
 */
  __pyx_t_3 = (__pyx_v_pressure_cor != 0);
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":135
 *     cdef double ratio
 *     if pressure_cor:
 *         avg_flux = flux_sum/flux_length             # <<<<<<<<<<<<<<
 *         for me in MeteoData(sts[er.get_station().name()], er[0].timestamp):
 *             flux_s = er.flux(me.time-30*60, me.time+30*60)
 */
    if (unlikely(__pyx_v_flux_length == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(int) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_flux_length == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_v_flux_sum))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 135; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_avg_flux = __Pyx_div_int(__pyx_v_flux_sum, __pyx_v_flux_length);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":136
 *     if pressure_cor:
 *         avg_flux = flux_sum/flux_length
 *         for me in MeteoData(sts[er.get_station().name()], er[0].timestamp):             # <<<<<<<<<<<<<<
 *             flux_s = er.flux(me.time-30*60, me.time+30*60)
 *             if flux_s > 0:
 */
    __pyx_t_10 = __Pyx_GetModuleGlobalName(__pyx_n_s_MeteoData); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    if (unlikely(!__pyx_v_sts)) { __Pyx_RaiseUnboundLocalError("sts"); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;} }
    __pyx_t_5 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->get_station(__pyx_v_er, 0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyDict_GetItem(__pyx_v_sts, __pyx_t_5); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_GetItemInt(((PyObject *)__pyx_v_er), 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_8 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_5, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    if (PyList_CheckExact(__pyx_t_4) || PyTuple_CheckExact(__pyx_t_4)) {
      __pyx_t_5 = __pyx_t_4; __Pyx_INCREF(__pyx_t_5); __pyx_t_6 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_5 = PyObject_GetIter(__pyx_t_4); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_12 = Py_TYPE(__pyx_t_5)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    for (;;) {
      if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_5)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_5)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_5)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_5, __pyx_t_6); __Pyx_INCREF(__pyx_t_4); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_5, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_4 = __pyx_t_12(__pyx_t_5);
        if (unlikely(!__pyx_t_4)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_4);
      }
      __Pyx_XDECREF_SET(__pyx_v_me, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":137
 *         avg_flux = flux_sum/flux_length
 *         for me in MeteoData(sts[er.get_station().name()], er[0].timestamp):
 *             flux_s = er.flux(me.time-30*60, me.time+30*60)             # <<<<<<<<<<<<<<
 *             if flux_s > 0:
 *                 ratio = (mm*me.pressure+b)/avg_flux
 */
      __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_me, __pyx_n_s_time); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_10 = PyNumber_Subtract(__pyx_t_4, __pyx_int_1800); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_me, __pyx_n_s_time); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_4 = PyNumber_Add(__pyx_t_10, __pyx_int_1800); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
      __pyx_t_16 = __Pyx_PyInt_As_int(__pyx_t_4); if (unlikely((__pyx_t_16 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_v_flux_s = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->flux(__pyx_v_er, __pyx_t_7, __pyx_t_16, 0);

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":138
 *         for me in MeteoData(sts[er.get_station().name()], er[0].timestamp):
 *             flux_s = er.flux(me.time-30*60, me.time+30*60)
 *             if flux_s > 0:             # <<<<<<<<<<<<<<
 *                 ratio = (mm*me.pressure+b)/avg_flux
 *                 #print(ratio,mm*me.pressure+b, me.pressure, avg_flux, flux_s)
 */
      __pyx_t_3 = ((__pyx_v_flux_s > 0) != 0);
      if (__pyx_t_3) {

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":139
 *             flux_s = er.flux(me.time-30*60, me.time+30*60)
 *             if flux_s > 0:
 *                 ratio = (mm*me.pressure+b)/avg_flux             # <<<<<<<<<<<<<<
 *                 #print(ratio,mm*me.pressure+b, me.pressure, avg_flux, flux_s)
 *                 for t in range(me.time-30*60,me.time+30*60):
 */
        __pyx_t_4 = PyFloat_FromDouble(__pyx_v_mm); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_me, __pyx_n_s_pressure); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyNumber_Multiply(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_b); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_4 = PyNumber_Add(__pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = PyFloat_FromDouble(__pyx_v_avg_flux); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_10); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_17 = __pyx_PyFloat_AsDouble(__pyx_t_8); if (unlikely((__pyx_t_17 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_ratio = __pyx_t_17;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":141
 *                 ratio = (mm*me.pressure+b)/avg_flux
 *                 #print(ratio,mm*me.pressure+b, me.pressure, avg_flux, flux_s)
 *                 for t in range(me.time-30*60,me.time+30*60):             # <<<<<<<<<<<<<<
 *                     t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)
 *                     measuredt[t] += ratio
 */
        __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_v_me, __pyx_n_s_time); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __pyx_t_10 = PyNumber_Add(__pyx_t_8, __pyx_int_1800); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_18 = __Pyx_PyInt_As_long(__pyx_t_10); if (unlikely((__pyx_t_18 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_v_me, __pyx_n_s_time); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_10);
        __pyx_t_8 = PyNumber_Subtract(__pyx_t_10, __pyx_int_1800); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
        __pyx_t_19 = __Pyx_PyInt_As_long(__pyx_t_8); if (unlikely((__pyx_t_19 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        for (__pyx_t_16 = __pyx_t_19; __pyx_t_16 < __pyx_t_18; __pyx_t_16+=1) {
          __pyx_v_t = __pyx_t_16;

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":142
 *                 #print(ratio,mm*me.pressure+b, me.pressure, avg_flux, flux_s)
 *                 for t in range(me.time-30*60,me.time+30*60):
 *                     t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)             # <<<<<<<<<<<<<<
 *                     measuredt[t] += ratio
 *     else:
 */
          __pyx_t_17 = (lSideRealFromUnix(__pyx_v_t, 0.0) / 2.0);
          if (unlikely(M_PI == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "float division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_8 = PyFloat_FromDouble(((__pyx_t_17 / M_PI) * 86400.0)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __pyx_t_10 = PyTuple_New(1); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_8);
          __Pyx_GIVEREF(__pyx_t_8);
          __pyx_t_8 = 0;
          __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_10, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_8);
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_t_10 = PyNumber_Subtract(__pyx_int_86400, __pyx_t_8); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_GOTREF(__pyx_t_10);
          __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
          __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_10); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
          __pyx_v_t = __pyx_t_7;

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":143
 *                 for t in range(me.time-30*60,me.time+30*60):
 *                     t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)
 *                     measuredt[t] += ratio             # <<<<<<<<<<<<<<
 *     else:
 *         for run in er.runs():
 */
          __pyx_t_7 = __pyx_v_t;
          (__pyx_v_measuredt[__pyx_t_7]) = ((__pyx_v_measuredt[__pyx_t_7]) + __pyx_v_ratio);
        }
        goto __pyx_L30;
      }
      __pyx_L30:;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":136
 *     if pressure_cor:
 *         avg_flux = flux_sum/flux_length
 *         for me in MeteoData(sts[er.get_station().name()], er[0].timestamp):             # <<<<<<<<<<<<<<
 *             flux_s = er.flux(me.time-30*60, me.time+30*60)
 *             if flux_s > 0:
 */
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L27;
  }
  /*else*/ {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":145
 *                     measuredt[t] += ratio
 *     else:
 *         for run in er.runs():             # <<<<<<<<<<<<<<
 *             begin = run[0].timestamp
 *             end = run[-1].timestamp
 */
    __pyx_t_5 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->runs(__pyx_v_er, 0); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    if (PyList_CheckExact(__pyx_t_5) || PyTuple_CheckExact(__pyx_t_5)) {
      __pyx_t_10 = __pyx_t_5; __Pyx_INCREF(__pyx_t_10); __pyx_t_6 = 0;
      __pyx_t_12 = NULL;
    } else {
      __pyx_t_6 = -1; __pyx_t_10 = PyObject_GetIter(__pyx_t_5); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_10);
      __pyx_t_12 = Py_TYPE(__pyx_t_10)->tp_iternext;
    }
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    for (;;) {
      if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_10)) {
        if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyList_GET_ITEM(__pyx_t_10, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_10, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_10)) {
        if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_10)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_10, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_5 = PySequence_ITEM(__pyx_t_10, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #endif
      } else {
        __pyx_t_5 = __pyx_t_12(__pyx_t_10);
        if (unlikely(!__pyx_t_5)) {
          PyObject* exc_type = PyErr_Occurred();
          if (exc_type) {
            if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
            else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          break;
        }
        __Pyx_GOTREF(__pyx_t_5);
      }
      __Pyx_XDECREF_SET(__pyx_v_run, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":146
 *     else:
 *         for run in er.runs():
 *             begin = run[0].timestamp             # <<<<<<<<<<<<<<
 *             end = run[-1].timestamp
 *             for t in range(begin, end):
 */
      __pyx_t_5 = __Pyx_GetItemInt(__pyx_v_run, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_5 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_5);
      __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
      __Pyx_XDECREF_SET(__pyx_v_begin, __pyx_t_8);
      __pyx_t_8 = 0;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":147
 *         for run in er.runs():
 *             begin = run[0].timestamp
 *             end = run[-1].timestamp             # <<<<<<<<<<<<<<
 *             for t in range(begin, end):
 *                 t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)
 */
      __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_run, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 147; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      __Pyx_XDECREF_SET(__pyx_v_end, __pyx_t_5);
      __pyx_t_5 = 0;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":148
 *             begin = run[0].timestamp
 *             end = run[-1].timestamp
 *             for t in range(begin, end):             # <<<<<<<<<<<<<<
 *                 t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)
 *                 measuredt[t] += 1
 */
      __pyx_t_18 = __Pyx_PyInt_As_long(__pyx_v_end); if (unlikely((__pyx_t_18 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_t_19 = __Pyx_PyInt_As_long(__pyx_v_begin); if (unlikely((__pyx_t_19 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      for (__pyx_t_16 = __pyx_t_19; __pyx_t_16 < __pyx_t_18; __pyx_t_16+=1) {
        __pyx_v_t = __pyx_t_16;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":149
 *             end = run[-1].timestamp
 *             for t in range(begin, end):
 *                 t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)             # <<<<<<<<<<<<<<
 *                 measuredt[t] += 1
 *     print(sum(measuredt)*avg_flux/60)
 */
        __pyx_t_17 = (lSideRealFromUnix(__pyx_v_t, 0.0) / 2.0);
        if (unlikely(M_PI == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_5 = PyFloat_FromDouble(((__pyx_t_17 / M_PI) * 86400.0)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_5);
        __Pyx_GIVEREF(__pyx_t_5);
        __pyx_t_5 = 0;
        __pyx_t_5 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyInt_Type))), __pyx_t_8, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_5);
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_t_8 = PyNumber_Subtract(__pyx_int_86400, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_8);
        __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
        __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
        __pyx_v_t = __pyx_t_7;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":150
 *             for t in range(begin, end):
 *                 t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)
 *                 measuredt[t] += 1             # <<<<<<<<<<<<<<
 *     print(sum(measuredt)*avg_flux/60)
 *     print(flux_sum, flux_length, measure_time, len(er))
 */
        __pyx_t_7 = __pyx_v_t;
        (__pyx_v_measuredt[__pyx_t_7]) = ((__pyx_v_measuredt[__pyx_t_7]) + 1.0);
      }

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":145
 *                     measuredt[t] += ratio
 *     else:
 *         for run in er.runs():             # <<<<<<<<<<<<<<
 *             begin = run[0].timestamp
 *             end = run[-1].timestamp
 */
    }
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  }
  __pyx_L27:;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":151
 *                 t = 86400-int(lSideRealFromUnix(t,0)/2/m.M_PI*86400)
 *                 measuredt[t] += 1
 *     print(sum(measuredt)*avg_flux/60)             # <<<<<<<<<<<<<<
 *     print(flux_sum, flux_length, measure_time, len(er))
 * 
 */
  __pyx_t_10 = __pyx_convert_vector_to_py_double(__pyx_v_measuredt); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = __Pyx_PyObject_Call(__pyx_builtin_sum, __pyx_t_8, NULL); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyFloat_FromDouble(__pyx_v_avg_flux); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_10, __pyx_t_8); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyNumber_Divide(__pyx_t_5, __pyx_int_60); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":152
 *                 measuredt[t] += 1
 *     print(sum(measuredt)*avg_flux/60)
 *     print(flux_sum, flux_length, measure_time, len(er))             # <<<<<<<<<<<<<<
 * 
 *     cdef int length = RA.size()
 */
  __pyx_t_8 = __Pyx_PyInt_From_int(__pyx_v_flux_sum); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_flux_length); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_10 = __Pyx_PyInt_From_int(__pyx_v_measure_time); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_6 = PyObject_Length(((PyObject *)__pyx_v_er)); if (unlikely(__pyx_t_6 == -1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyInt_FromSsize_t(__pyx_t_6); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyTuple_New(4); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_9, 2, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_9, 3, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  __pyx_t_8 = 0;
  __pyx_t_5 = 0;
  __pyx_t_10 = 0;
  __pyx_t_4 = 0;
  if (__Pyx_PrintOne(0, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":154
 *     print(flux_sum, flux_length, measure_time, len(er))
 * 
 *     cdef int length = RA.size()             # <<<<<<<<<<<<<<
 *     cdef vector[float] deltas
 *     deltas.resize(length)
 */
  __pyx_v_length = __pyx_v_RA.size();

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":156
 *     cdef int length = RA.size()
 *     cdef vector[float] deltas
 *     deltas.resize(length)             # <<<<<<<<<<<<<<
 *     cdef double maxdelta = 1
 *     cdef int xx, yy, i
 */
  __pyx_v_deltas.resize(__pyx_v_length);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":157
 *     cdef vector[float] deltas
 *     deltas.resize(length)
 *     cdef double maxdelta = 1             # <<<<<<<<<<<<<<
 *     cdef int xx, yy, i
 *     cdef float x,y
 */
  __pyx_v_maxdelta = 1.0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":160
 *     cdef int xx, yy, i
 *     cdef float x,y
 *     print()             # <<<<<<<<<<<<<<
 *     for yy in range(360/scale+1):
 *         with nogil:
 */
  if (__Pyx_PrintOne(0, __pyx_empty_tuple) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":161
 *     cdef float x,y
 *     print()
 *     for yy in range(360/scale+1):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             y = (scale*yy-180)/360.0*m.M_PI
 */
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_18 = (__Pyx_div_long(360, __pyx_v_scale) + 1);
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_18; __pyx_t_16+=1) {
    __pyx_v_yy = __pyx_t_16;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":162
 *     print()
 *     for yy in range(360/scale+1):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":163
 *     for yy in range(360/scale+1):
 *         with nogil:
 *             y = (scale*yy-180)/360.0*m.M_PI             # <<<<<<<<<<<<<<
 *             maxdelta = scale/360.0*m.M_PI
 *             for i in range(length):
 */
          __pyx_v_y = ((((__pyx_v_scale * __pyx_v_yy) - 180) / 360.0) * M_PI);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":164
 *         with nogil:
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI             # <<<<<<<<<<<<<<
 *             for i in range(length):
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 */
          __pyx_v_maxdelta = ((__pyx_v_scale / 360.0) * M_PI);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":165
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI
 *             for i in range(length):             # <<<<<<<<<<<<<<
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 *                     deltas[i]+=maxdelta
 */
          __pyx_t_7 = __pyx_v_length;
          for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_7; __pyx_t_20+=1) {
            __pyx_v_i = __pyx_t_20;

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":166
 *             maxdelta = scale/360.0*m.M_PI
 *             for i in range(length):
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:             # <<<<<<<<<<<<<<
 *                     deltas[i]+=maxdelta
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:
 */
            __pyx_t_3 = (((__pyx_v_deltas[__pyx_v_i]) < __pyx_v_citlivost) != 0);
            if (__pyx_t_3) {
              __pyx_t_1 = ((((__pyx_v_deltas[__pyx_v_i]) + __pyx_v_maxdelta) < __pyx_v_citlivost) != 0);
              if (__pyx_t_1) {
                __pyx_t_2 = ((__pyx_v_yy != 0) != 0);
                __pyx_t_21 = __pyx_t_2;
              } else {
                __pyx_t_21 = __pyx_t_1;
              }
              __pyx_t_1 = __pyx_t_21;
            } else {
              __pyx_t_1 = __pyx_t_3;
            }
            if (__pyx_t_1) {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":167
 *             for i in range(length):
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 *                     deltas[i]+=maxdelta             # <<<<<<<<<<<<<<
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:
 *                     deltas[i]-=maxdelta
 */
              __pyx_t_22 = __pyx_v_i;
              (__pyx_v_deltas[__pyx_t_22]) = ((__pyx_v_deltas[__pyx_t_22]) + __pyx_v_maxdelta);
              goto __pyx_L46;
            }

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":168
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 *                     deltas[i]+=maxdelta
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:             # <<<<<<<<<<<<<<
 *                     deltas[i]-=maxdelta
 *                 else:
 */
            __pyx_t_1 = (((__pyx_v_deltas[__pyx_v_i]) > __pyx_v_citlivost) != 0);
            if (__pyx_t_1) {
              __pyx_t_3 = ((((__pyx_v_deltas[__pyx_v_i]) - __pyx_v_maxdelta) > __pyx_v_citlivost) != 0);
              if (__pyx_t_3) {
                __pyx_t_21 = ((__pyx_v_yy != 0) != 0);
                __pyx_t_2 = __pyx_t_21;
              } else {
                __pyx_t_2 = __pyx_t_3;
              }
              __pyx_t_3 = __pyx_t_2;
            } else {
              __pyx_t_3 = __pyx_t_1;
            }
            if (__pyx_t_3) {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":169
 *                     deltas[i]+=maxdelta
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:
 *                     deltas[i]-=maxdelta             # <<<<<<<<<<<<<<
 *                 else:
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])
 */
              __pyx_t_22 = __pyx_v_i;
              (__pyx_v_deltas[__pyx_t_22]) = ((__pyx_v_deltas[__pyx_t_22]) - __pyx_v_maxdelta);
              goto __pyx_L46;
            }
            /*else*/ {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":171
 *                     deltas[i]-=maxdelta
 *                 else:
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])             # <<<<<<<<<<<<<<
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         #remove last progress and replace with new
 */
              (__pyx_v_deltas[__pyx_v_i]) = __pyx_f_6czelta_delta_dir(0.0, __pyx_v_y, (__pyx_v_RA[__pyx_v_i]), (__pyx_v_D[__pyx_v_i]));
            }
            __pyx_L46:;
          }
        }

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":162
 *     print()
 *     for yy in range(360/scale+1):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L43;
          }
          __pyx_L43:;
        }
    }

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":172
 *                 else:
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)             # <<<<<<<<<<<<<<
 *         #remove last progress and replace with new
 *         sys.stdout.write("\033[F")
 */
    __pyx_v_maxdelta = __pyx_f_6czelta_delta_dir(0.0, __pyx_v_y, ((__pyx_v_scale / 360.0) * M_PI), __pyx_v_y);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":174
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         #remove last progress and replace with new
 *         sys.stdout.write("\033[F")             # <<<<<<<<<<<<<<
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1))
 */
    __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_stdout); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_write); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__17, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":175
 *         #remove last progress and replace with new
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")             # <<<<<<<<<<<<<<
 *         print("%i/%i"%(yy+1,360/scale+1))
 *         with nogil, cython.boundscheck(False):
 */
    __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_stdout); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_write); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_tuple__18, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":176
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1))             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False):
 *             for xx in range(720/scale):
 */
    __pyx_t_9 = __Pyx_PyInt_From_long((__pyx_v_yy + 1)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    if (unlikely(__pyx_v_scale == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_4 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9);
    __Pyx_GIVEREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_4);
    __pyx_t_9 = 0;
    __pyx_t_4 = 0;
    __pyx_t_4 = __Pyx_PyString_Format(__pyx_kp_s_i_i, __pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":177
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1))
 *         with nogil, cython.boundscheck(False):             # <<<<<<<<<<<<<<
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":178
 *         print("%i/%i"%(yy+1,360/scale+1))
 *         with nogil, cython.boundscheck(False):
 *             for xx in range(720/scale):             # <<<<<<<<<<<<<<
 *                 x = scale*xx/360.0*m.M_PI
 *                 for i in range(length):
 */
          if (unlikely(__pyx_v_scale == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L50_error;}
          }
          else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L50_error;}
          }
          __pyx_t_19 = __Pyx_div_long(720, __pyx_v_scale);
          for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_19; __pyx_t_7+=1) {
            __pyx_v_xx = __pyx_t_7;

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":179
 *         with nogil, cython.boundscheck(False):
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI             # <<<<<<<<<<<<<<
 *                 for i in range(length):
 *                     if not pressure_cor or fluxes[i]>0:
 */
            __pyx_v_x = (((__pyx_v_scale * __pyx_v_xx) / 360.0) * M_PI);

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":180
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI
 *                 for i in range(length):             # <<<<<<<<<<<<<<
 *                     if not pressure_cor or fluxes[i]>0:
 *                         if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 */
            __pyx_t_20 = __pyx_v_length;
            for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_20; __pyx_t_22+=1) {
              __pyx_v_i = __pyx_t_22;

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":181
 *                 x = scale*xx/360.0*m.M_PI
 *                 for i in range(length):
 *                     if not pressure_cor or fluxes[i]>0:             # <<<<<<<<<<<<<<
 *                         if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 *                             deltas[i]+=maxdelta
 */
              __pyx_t_3 = ((!(__pyx_v_pressure_cor != 0)) != 0);
              if (!__pyx_t_3) {
                __pyx_t_1 = (((__pyx_v_fluxes[__pyx_v_i]) > 0) != 0);
                __pyx_t_2 = __pyx_t_1;
              } else {
                __pyx_t_2 = __pyx_t_3;
              }
              if (__pyx_t_2) {

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":182
 *                 for i in range(length):
 *                     if not pressure_cor or fluxes[i]>0:
 *                         if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:             # <<<<<<<<<<<<<<
 *                             deltas[i]+=maxdelta
 *                         elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:
 */
                __pyx_t_2 = (((__pyx_v_deltas[__pyx_v_i]) < __pyx_v_citlivost) != 0);
                if (__pyx_t_2) {
                  __pyx_t_3 = ((((__pyx_v_deltas[__pyx_v_i]) + __pyx_v_maxdelta) < __pyx_v_citlivost) != 0);
                  __pyx_t_1 = __pyx_t_3;
                } else {
                  __pyx_t_1 = __pyx_t_2;
                }
                if (__pyx_t_1) {

                  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":183
 *                     if not pressure_cor or fluxes[i]>0:
 *                         if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 *                             deltas[i]+=maxdelta             # <<<<<<<<<<<<<<
 *                         elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:
 *                             deltas[i]-=maxdelta
 */
                  __pyx_t_23 = __pyx_v_i;
                  (__pyx_v_deltas[__pyx_t_23]) = ((__pyx_v_deltas[__pyx_t_23]) + __pyx_v_maxdelta);
                  goto __pyx_L57;
                }

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":184
 *                         if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 *                             deltas[i]+=maxdelta
 *                         elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:             # <<<<<<<<<<<<<<
 *                             deltas[i]-=maxdelta
 *                         else:
 */
                __pyx_t_1 = (((__pyx_v_deltas[__pyx_v_i]) > __pyx_v_citlivost) != 0);
                if (__pyx_t_1) {
                  __pyx_t_2 = ((((__pyx_v_deltas[__pyx_v_i]) - __pyx_v_maxdelta) > __pyx_v_citlivost) != 0);
                  __pyx_t_3 = __pyx_t_2;
                } else {
                  __pyx_t_3 = __pyx_t_1;
                }
                if (__pyx_t_3) {

                  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":185
 *                             deltas[i]+=maxdelta
 *                         elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:
 *                             deltas[i]-=maxdelta             # <<<<<<<<<<<<<<
 *                         else:
 *                             deltas[i] = delta_dir(x, y, RA[i], D[i])
 */
                  __pyx_t_23 = __pyx_v_i;
                  (__pyx_v_deltas[__pyx_t_23]) = ((__pyx_v_deltas[__pyx_t_23]) - __pyx_v_maxdelta);
                  goto __pyx_L57;
                }
                /*else*/ {

                  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":187
 *                             deltas[i]-=maxdelta
 *                         else:
 *                             deltas[i] = delta_dir(x, y, RA[i], D[i])             # <<<<<<<<<<<<<<
 *                         if deltas[i]<citlivost:
 *                             data[yy, xx]+=1
 */
                  (__pyx_v_deltas[__pyx_v_i]) = __pyx_f_6czelta_delta_dir(__pyx_v_x, __pyx_v_y, (__pyx_v_RA[__pyx_v_i]), (__pyx_v_D[__pyx_v_i]));
                }
                __pyx_L57:;

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":188
 *                         else:
 *                             deltas[i] = delta_dir(x, y, RA[i], D[i])
 *                         if deltas[i]<citlivost:             # <<<<<<<<<<<<<<
 *                             data[yy, xx]+=1
 * 
 */
                __pyx_t_3 = (((__pyx_v_deltas[__pyx_v_i]) < __pyx_v_citlivost) != 0);
                if (__pyx_t_3) {

                  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":189
 *                             deltas[i] = delta_dir(x, y, RA[i], D[i])
 *                         if deltas[i]<citlivost:
 *                             data[yy, xx]+=1             # <<<<<<<<<<<<<<
 * 
 *     #calc of "source" array for calculating expected values
 */
                  __pyx_t_23 = __pyx_v_yy;
                  __pyx_t_24 = __pyx_v_xx;
                  if (__pyx_t_23 < 0) __pyx_t_23 += __pyx_pybuffernd_data.diminfo[0].shape;
                  if (__pyx_t_24 < 0) __pyx_t_24 += __pyx_pybuffernd_data.diminfo[1].shape;
                  *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_23, __pyx_pybuffernd_data.diminfo[0].strides, __pyx_t_24, __pyx_pybuffernd_data.diminfo[1].strides) += 1.0;
                  goto __pyx_L58;
                }
                __pyx_L58:;
                goto __pyx_L56;
              }
              __pyx_L56:;
            }
          }
        }

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":177
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1))
 *         with nogil, cython.boundscheck(False):             # <<<<<<<<<<<<<<
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L51;
          }
          __pyx_L50_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L51:;
        }
    }
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":192
 * 
 *     #calc of "source" array for calculating expected values
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((360/scale+1,720/scale), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     cdef object pos = list(er.get_station().gps_position())
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_9 = __Pyx_PyInt_From_long(__Pyx_div_long(720, __pyx_v_scale)); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = PyTuple_New(2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_5, 1, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_4 = 0;
  __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = PyDict_New(); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_5, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, __pyx_t_5); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_25 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_source.rcbuffer->pybuffer, (PyObject*)__pyx_t_25, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_source = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_source.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_source.diminfo[0].strides = __pyx_pybuffernd_source.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_source.diminfo[0].shape = __pyx_pybuffernd_source.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_source.diminfo[1].strides = __pyx_pybuffernd_source.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_source.diminfo[1].shape = __pyx_pybuffernd_source.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_25 = 0;
  __pyx_v_source = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":194
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((360/scale+1,720/scale), dtype=np.double)
 * 
 *     cdef object pos = list(er.get_station().gps_position())             # <<<<<<<<<<<<<<
 * 
 *     RA.clear()
 */
  __pyx_t_8 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->get_station(__pyx_v_er, 0)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_gps_position); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = PyTuple_New(1); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_5, 0, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)(&PyList_Type))), __pyx_t_5, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 194; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_v_pos = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":196
 *     cdef object pos = list(er.get_station().gps_position())
 * 
 *     RA.clear()             # <<<<<<<<<<<<<<
 *     D.clear()
 *     for e in er:
 */
  __pyx_v_RA.clear();

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":197
 * 
 *     RA.clear()
 *     D.clear()             # <<<<<<<<<<<<<<
 *     for e in er:
 *         dir = e.e.calculateDirRadians()
 */
  __pyx_v_D.clear();

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":198
 *     RA.clear()
 *     D.clear()
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.e.calculateDirRadians()
 *         if dir:
 */
  if (PyList_CheckExact(((PyObject *)__pyx_v_er)) || PyTuple_CheckExact(((PyObject *)__pyx_v_er))) {
    __pyx_t_8 = ((PyObject *)__pyx_v_er); __Pyx_INCREF(__pyx_t_8); __pyx_t_6 = 0;
    __pyx_t_12 = NULL;
  } else {
    __pyx_t_6 = -1; __pyx_t_8 = PyObject_GetIter(((PyObject *)__pyx_v_er)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_12 = Py_TYPE(__pyx_t_8)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_12 && PyList_CheckExact(__pyx_t_8)) {
      if (__pyx_t_6 >= PyList_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_12 && PyTuple_CheckExact(__pyx_t_8)) {
      if (__pyx_t_6 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_5 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_6); __Pyx_INCREF(__pyx_t_5); __pyx_t_6++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_5 = PySequence_ITEM(__pyx_t_8, __pyx_t_6); __pyx_t_6++; if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_5 = __pyx_t_12(__pyx_t_8);
      if (unlikely(!__pyx_t_5)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_5);
    }
    if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_6czelta_event))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 198; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_e, ((struct __pyx_obj_6czelta_event *)__pyx_t_5));
    __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":199
 *     D.clear()
 *     for e in er:
 *         dir = e.e.calculateDirRadians()             # <<<<<<<<<<<<<<
 *         if dir:
 *             dir = localToAGlobalDirection(dir, e.e.getRStation().GPSPosition())
 */
    __pyx_v_dir = __pyx_v_e->e.calculateDirRadians();

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":200
 *     for e in er:
 *         dir = e.e.calculateDirRadians()
 *         if dir:             # <<<<<<<<<<<<<<
 *             dir = localToAGlobalDirection(dir, e.e.getRStation().GPSPosition())
 *             RA.push_back(dir[0])
 */
    __pyx_t_3 = (__pyx_v_dir != 0);
    if (__pyx_t_3) {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":201
 *         dir = e.e.calculateDirRadians()
 *         if dir:
 *             dir = localToAGlobalDirection(dir, e.e.getRStation().GPSPosition())             # <<<<<<<<<<<<<<
 *             RA.push_back(dir[0])
 *             D.push_back(dir[1])
 */
      __pyx_v_dir = localToAGlobalDirection(__pyx_v_dir, __pyx_v_e->e.getRStation().GPSPosition());

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":202
 *         if dir:
 *             dir = localToAGlobalDirection(dir, e.e.getRStation().GPSPosition())
 *             RA.push_back(dir[0])             # <<<<<<<<<<<<<<
 *             D.push_back(dir[1])
 *     print()
 */
      __pyx_v_RA.push_back((__pyx_v_dir[0]));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":203
 *             dir = localToAGlobalDirection(dir, e.e.getRStation().GPSPosition())
 *             RA.push_back(dir[0])
 *             D.push_back(dir[1])             # <<<<<<<<<<<<<<
 *     print()
 *     for yy in range(360/scale+1):
 */
      __pyx_v_D.push_back((__pyx_v_dir[1]));
      goto __pyx_L61;
    }
    __pyx_L61:;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":198
 *     RA.clear()
 *     D.clear()
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.e.calculateDirRadians()
 *         if dir:
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":204
 *             RA.push_back(dir[0])
 *             D.push_back(dir[1])
 *     print()             # <<<<<<<<<<<<<<
 *     for yy in range(360/scale+1):
 *         with nogil:
 */
  if (__Pyx_PrintOne(0, __pyx_empty_tuple) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 204; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":205
 *             D.push_back(dir[1])
 *     print()
 *     for yy in range(360/scale+1):             # <<<<<<<<<<<<<<
 *         with nogil:
 *             y = (scale*yy-180)/360.0*m.M_PI
 */
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_18 = (__Pyx_div_long(360, __pyx_v_scale) + 1);
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_18; __pyx_t_16+=1) {
    __pyx_v_yy = __pyx_t_16;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":206
 *     print()
 *     for yy in range(360/scale+1):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":207
 *     for yy in range(360/scale+1):
 *         with nogil:
 *             y = (scale*yy-180)/360.0*m.M_PI             # <<<<<<<<<<<<<<
 *             maxdelta = scale/360.0*m.M_PI
 *             for i in range(length):
 */
          __pyx_v_y = ((((__pyx_v_scale * __pyx_v_yy) - 180) / 360.0) * M_PI);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":208
 *         with nogil:
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI             # <<<<<<<<<<<<<<
 *             for i in range(length):
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 */
          __pyx_v_maxdelta = ((__pyx_v_scale / 360.0) * M_PI);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":209
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI
 *             for i in range(length):             # <<<<<<<<<<<<<<
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 *                     deltas[i]+=maxdelta
 */
          __pyx_t_7 = __pyx_v_length;
          for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_7; __pyx_t_20+=1) {
            __pyx_v_i = __pyx_t_20;

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":210
 *             maxdelta = scale/360.0*m.M_PI
 *             for i in range(length):
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:             # <<<<<<<<<<<<<<
 *                     deltas[i]+=maxdelta
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:
 */
            __pyx_t_3 = (((__pyx_v_deltas[__pyx_v_i]) < __pyx_v_citlivost) != 0);
            if (__pyx_t_3) {
              __pyx_t_1 = ((((__pyx_v_deltas[__pyx_v_i]) + __pyx_v_maxdelta) < __pyx_v_citlivost) != 0);
              if (__pyx_t_1) {
                __pyx_t_2 = ((__pyx_v_yy != 0) != 0);
                __pyx_t_21 = __pyx_t_2;
              } else {
                __pyx_t_21 = __pyx_t_1;
              }
              __pyx_t_1 = __pyx_t_21;
            } else {
              __pyx_t_1 = __pyx_t_3;
            }
            if (__pyx_t_1) {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":211
 *             for i in range(length):
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 *                     deltas[i]+=maxdelta             # <<<<<<<<<<<<<<
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:
 *                     deltas[i]-=maxdelta
 */
              __pyx_t_22 = __pyx_v_i;
              (__pyx_v_deltas[__pyx_t_22]) = ((__pyx_v_deltas[__pyx_t_22]) + __pyx_v_maxdelta);
              goto __pyx_L71;
            }

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":212
 *                 if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost and yy!=0:
 *                     deltas[i]+=maxdelta
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:             # <<<<<<<<<<<<<<
 *                     deltas[i]-=maxdelta
 *                 else:
 */
            __pyx_t_1 = (((__pyx_v_deltas[__pyx_v_i]) > __pyx_v_citlivost) != 0);
            if (__pyx_t_1) {
              __pyx_t_3 = ((((__pyx_v_deltas[__pyx_v_i]) - __pyx_v_maxdelta) > __pyx_v_citlivost) != 0);
              if (__pyx_t_3) {
                __pyx_t_21 = ((__pyx_v_yy != 0) != 0);
                __pyx_t_2 = __pyx_t_21;
              } else {
                __pyx_t_2 = __pyx_t_3;
              }
              __pyx_t_3 = __pyx_t_2;
            } else {
              __pyx_t_3 = __pyx_t_1;
            }
            if (__pyx_t_3) {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":213
 *                     deltas[i]+=maxdelta
 *                 elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost and yy!=0:
 *                     deltas[i]-=maxdelta             # <<<<<<<<<<<<<<
 *                 else:
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])
 */
              __pyx_t_22 = __pyx_v_i;
              (__pyx_v_deltas[__pyx_t_22]) = ((__pyx_v_deltas[__pyx_t_22]) - __pyx_v_maxdelta);
              goto __pyx_L71;
            }
            /*else*/ {

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":215
 *                     deltas[i]-=maxdelta
 *                 else:
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])             # <<<<<<<<<<<<<<
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         sys.stdout.write("\033[F")
 */
              (__pyx_v_deltas[__pyx_v_i]) = __pyx_f_6czelta_delta_dir(0.0, __pyx_v_y, (__pyx_v_RA[__pyx_v_i]), (__pyx_v_D[__pyx_v_i]));
            }
            __pyx_L71:;
          }
        }

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":206
 *     print()
 *     for yy in range(360/scale+1):
 *         with nogil:             # <<<<<<<<<<<<<<
 *             y = (scale*yy-180)/360.0*m.M_PI
 *             maxdelta = scale/360.0*m.M_PI
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L68;
          }
          __pyx_L68:;
        }
    }

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":216
 *                 else:
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)             # <<<<<<<<<<<<<<
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")
 */
    __pyx_v_maxdelta = __pyx_f_6czelta_delta_dir(0.0, __pyx_v_y, ((__pyx_v_scale / 360.0) * M_PI), __pyx_v_y);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":217
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         sys.stdout.write("\033[F")             # <<<<<<<<<<<<<<
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 */
    __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_stdout); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_write); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_tuple__19, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":218
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")             # <<<<<<<<<<<<<<
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 *         with nogil, cython.boundscheck(False):
 */
    __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_stdout); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_write); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_5, __pyx_tuple__20, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":219
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress             # <<<<<<<<<<<<<<
 *         with nogil, cython.boundscheck(False):
 *             for xx in range(720/scale):
 */
    __pyx_t_8 = __Pyx_PyInt_From_long((__pyx_v_yy + 1)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    if (unlikely(__pyx_v_scale == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_5 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_5);
    __pyx_t_8 = 0;
    __pyx_t_5 = 0;
    __pyx_t_5 = __Pyx_PyString_Format(__pyx_kp_s_i_i, __pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    if (__Pyx_PrintOne(0, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":220
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 *         with nogil, cython.boundscheck(False):             # <<<<<<<<<<<<<<
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI
 */
    {
        #ifdef WITH_THREAD
        PyThreadState *_save;
        Py_UNBLOCK_THREADS
        #endif
        /*try:*/ {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":221
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 *         with nogil, cython.boundscheck(False):
 *             for xx in range(720/scale):             # <<<<<<<<<<<<<<
 *                 x = scale*xx/360.0*m.M_PI
 *                 for i in range(length):
 */
          if (unlikely(__pyx_v_scale == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L75_error;}
          }
          else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L75_error;}
          }
          __pyx_t_19 = __Pyx_div_long(720, __pyx_v_scale);
          for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_19; __pyx_t_7+=1) {
            __pyx_v_xx = __pyx_t_7;

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":222
 *         with nogil, cython.boundscheck(False):
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI             # <<<<<<<<<<<<<<
 *                 for i in range(length):
 *                     if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 */
            __pyx_v_x = (((__pyx_v_scale * __pyx_v_xx) / 360.0) * M_PI);

            /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":223
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI
 *                 for i in range(length):             # <<<<<<<<<<<<<<
 *                     if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 *                         deltas[i]+=maxdelta
 */
            __pyx_t_20 = __pyx_v_length;
            for (__pyx_t_22 = 0; __pyx_t_22 < __pyx_t_20; __pyx_t_22+=1) {
              __pyx_v_i = __pyx_t_22;

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":224
 *                 x = scale*xx/360.0*m.M_PI
 *                 for i in range(length):
 *                     if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:             # <<<<<<<<<<<<<<
 *                         deltas[i]+=maxdelta
 *                     elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:
 */
              __pyx_t_3 = (((__pyx_v_deltas[__pyx_v_i]) < __pyx_v_citlivost) != 0);
              if (__pyx_t_3) {
                __pyx_t_1 = ((((__pyx_v_deltas[__pyx_v_i]) + __pyx_v_maxdelta) < __pyx_v_citlivost) != 0);
                __pyx_t_2 = __pyx_t_1;
              } else {
                __pyx_t_2 = __pyx_t_3;
              }
              if (__pyx_t_2) {

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":225
 *                 for i in range(length):
 *                     if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 *                         deltas[i]+=maxdelta             # <<<<<<<<<<<<<<
 *                     elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:
 *                         deltas[i]-=maxdelta
 */
                __pyx_t_26 = __pyx_v_i;
                (__pyx_v_deltas[__pyx_t_26]) = ((__pyx_v_deltas[__pyx_t_26]) + __pyx_v_maxdelta);
                goto __pyx_L81;
              }

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":226
 *                     if deltas[i]<citlivost and deltas[i]+maxdelta<citlivost:
 *                         deltas[i]+=maxdelta
 *                     elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:             # <<<<<<<<<<<<<<
 *                         deltas[i]-=maxdelta
 *                     else:
 */
              __pyx_t_2 = (((__pyx_v_deltas[__pyx_v_i]) > __pyx_v_citlivost) != 0);
              if (__pyx_t_2) {
                __pyx_t_3 = ((((__pyx_v_deltas[__pyx_v_i]) - __pyx_v_maxdelta) > __pyx_v_citlivost) != 0);
                __pyx_t_1 = __pyx_t_3;
              } else {
                __pyx_t_1 = __pyx_t_2;
              }
              if (__pyx_t_1) {

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":227
 *                         deltas[i]+=maxdelta
 *                     elif deltas[i]>citlivost and deltas[i]-maxdelta>citlivost:
 *                         deltas[i]-=maxdelta             # <<<<<<<<<<<<<<
 *                     else:
 *                         deltas[i] = delta_dir(x, y, RA[i], D[i])
 */
                __pyx_t_26 = __pyx_v_i;
                (__pyx_v_deltas[__pyx_t_26]) = ((__pyx_v_deltas[__pyx_t_26]) - __pyx_v_maxdelta);
                goto __pyx_L81;
              }
              /*else*/ {

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":229
 *                         deltas[i]-=maxdelta
 *                     else:
 *                         deltas[i] = delta_dir(x, y, RA[i], D[i])             # <<<<<<<<<<<<<<
 *                     if deltas[i]<citlivost:
 *                         source[yy, xx]+=1
 */
                (__pyx_v_deltas[__pyx_v_i]) = __pyx_f_6czelta_delta_dir(__pyx_v_x, __pyx_v_y, (__pyx_v_RA[__pyx_v_i]), (__pyx_v_D[__pyx_v_i]));
              }
              __pyx_L81:;

              /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":230
 *                     else:
 *                         deltas[i] = delta_dir(x, y, RA[i], D[i])
 *                     if deltas[i]<citlivost:             # <<<<<<<<<<<<<<
 *                         source[yy, xx]+=1
 * 
 */
              __pyx_t_1 = (((__pyx_v_deltas[__pyx_v_i]) < __pyx_v_citlivost) != 0);
              if (__pyx_t_1) {

                /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":231
 *                         deltas[i] = delta_dir(x, y, RA[i], D[i])
 *                     if deltas[i]<citlivost:
 *                         source[yy, xx]+=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
                __pyx_t_26 = __pyx_v_yy;
                __pyx_t_27 = __pyx_v_xx;
                if (__pyx_t_26 < 0) __pyx_t_26 += __pyx_pybuffernd_source.diminfo[0].shape;
                if (__pyx_t_27 < 0) __pyx_t_27 += __pyx_pybuffernd_source.diminfo[1].shape;
                *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_source.rcbuffer->pybuffer.buf, __pyx_t_26, __pyx_pybuffernd_source.diminfo[0].strides, __pyx_t_27, __pyx_pybuffernd_source.diminfo[1].strides) += 1.0;
                goto __pyx_L82;
              }
              __pyx_L82:;
            }
          }
        }

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":220
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 *         with nogil, cython.boundscheck(False):             # <<<<<<<<<<<<<<
 *             for xx in range(720/scale):
 *                 x = scale*xx/360.0*m.M_PI
 */
        /*finally:*/ {
          /*normal exit:*/{
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L76;
          }
          __pyx_L75_error: {
            #ifdef WITH_THREAD
            Py_BLOCK_THREADS
            #endif
            goto __pyx_L1_error;
          }
          __pyx_L76:;
        }
    }
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":237
 *     #converting measuredt array to multiply array, which parse data into final expecting values
 *     cdef vector[double] multiplyarray
 *     multiplyarray.resize(720/scale)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(86400):
 */
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 237; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_multiplyarray.resize(__Pyx_div_long(720, __pyx_v_scale));

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":239
 *     multiplyarray.resize(720/scale)
 * 
 *     for i in range(86400):             # <<<<<<<<<<<<<<
 *         ratio = i%(86400/720*scale)/(86400.0/720*scale)
 *         xx = i*720/scale/86400+1
 */
  for (__pyx_t_16 = 0; __pyx_t_16 < 86400; __pyx_t_16+=1) {
    __pyx_v_i = __pyx_t_16;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":240
 * 
 *     for i in range(86400):
 *         ratio = i%(86400/720*scale)/(86400.0/720*scale)             # <<<<<<<<<<<<<<
 *         xx = i*720/scale/86400+1
 *         xx = xx if xx!=360 else 0
 */
    __pyx_t_18 = (120 * __pyx_v_scale);
    if (unlikely(__pyx_t_18 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_19 = __Pyx_mod_long(__pyx_v_i, __pyx_t_18);
    __pyx_t_17 = ((86400.0 / 720.0) * __pyx_v_scale);
    if (unlikely(__pyx_t_17 == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "float division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 240; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_ratio = (__pyx_t_19 / __pyx_t_17);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":241
 *     for i in range(86400):
 *         ratio = i%(86400/720*scale)/(86400.0/720*scale)
 *         xx = i*720/scale/86400+1             # <<<<<<<<<<<<<<
 *         xx = xx if xx!=360 else 0
 *         if pressure_cor:
 */
    __pyx_t_19 = (__pyx_v_i * 720);
    if (unlikely(__pyx_v_scale == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_19))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_v_xx = (__Pyx_div_long(__Pyx_div_long(__pyx_t_19, __pyx_v_scale), 86400) + 1);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":242
 *         ratio = i%(86400/720*scale)/(86400.0/720*scale)
 *         xx = i*720/scale/86400+1
 *         xx = xx if xx!=360 else 0             # <<<<<<<<<<<<<<
 *         if pressure_cor:
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/(flux_length*60*60)
 */
    if (((__pyx_v_xx != 360) != 0)) {
      __pyx_t_7 = __pyx_v_xx;
    } else {
      __pyx_t_7 = 0;
    }
    __pyx_v_xx = __pyx_t_7;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":243
 *         xx = i*720/scale/86400+1
 *         xx = xx if xx!=360 else 0
 *         if pressure_cor:             # <<<<<<<<<<<<<<
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/(flux_length*60*60)
 *             multiplyarray[xx]+=ratio*measuredt[i]/(flux_length*60*60)
 */
    __pyx_t_1 = (__pyx_v_pressure_cor != 0);
    if (__pyx_t_1) {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":244
 *         xx = xx if xx!=360 else 0
 *         if pressure_cor:
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/(flux_length*60*60)             # <<<<<<<<<<<<<<
 *             multiplyarray[xx]+=ratio*measuredt[i]/(flux_length*60*60)
 *         else:
 */
      __pyx_t_19 = (__pyx_v_i * 720);
      if (unlikely(__pyx_v_scale == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_19))) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_18 = __Pyx_div_long(__Pyx_div_long(__pyx_t_19, __pyx_v_scale), 86400);
      __pyx_t_17 = ((1.0 - __pyx_v_ratio) * (__pyx_v_measuredt[__pyx_v_i]));
      __pyx_t_19 = ((__pyx_v_flux_length * 60) * 60);
      if (unlikely(__pyx_t_19 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_multiplyarray[__pyx_t_18]) = ((__pyx_v_multiplyarray[__pyx_t_18]) + (__pyx_t_17 / __pyx_t_19));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":245
 *         if pressure_cor:
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/(flux_length*60*60)
 *             multiplyarray[xx]+=ratio*measuredt[i]/(flux_length*60*60)             # <<<<<<<<<<<<<<
 *         else:
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/measure_time
 */
      __pyx_t_7 = __pyx_v_xx;
      __pyx_t_17 = (__pyx_v_ratio * (__pyx_v_measuredt[__pyx_v_i]));
      __pyx_t_18 = ((__pyx_v_flux_length * 60) * 60);
      if (unlikely(__pyx_t_18 == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_multiplyarray[__pyx_t_7]) = ((__pyx_v_multiplyarray[__pyx_t_7]) + (__pyx_t_17 / __pyx_t_18));
      goto __pyx_L85;
    }
    /*else*/ {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":247
 *             multiplyarray[xx]+=ratio*measuredt[i]/(flux_length*60*60)
 *         else:
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/measure_time             # <<<<<<<<<<<<<<
 *             multiplyarray[xx]+=ratio*measuredt[i]/measure_time
 * 
 */
      __pyx_t_18 = (__pyx_v_i * 720);
      if (unlikely(__pyx_v_scale == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(__pyx_t_18))) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_19 = __Pyx_div_long(__Pyx_div_long(__pyx_t_18, __pyx_v_scale), 86400);
      __pyx_t_17 = ((1.0 - __pyx_v_ratio) * (__pyx_v_measuredt[__pyx_v_i]));
      if (unlikely(__pyx_v_measure_time == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_multiplyarray[__pyx_t_19]) = ((__pyx_v_multiplyarray[__pyx_t_19]) + (__pyx_t_17 / __pyx_v_measure_time));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":248
 *         else:
 *             multiplyarray[i*720/scale/86400]+=(1-ratio)*measuredt[i]/measure_time
 *             multiplyarray[xx]+=ratio*measuredt[i]/measure_time             # <<<<<<<<<<<<<<
 * 
 * 
 */
      __pyx_t_7 = __pyx_v_xx;
      __pyx_t_17 = (__pyx_v_ratio * (__pyx_v_measuredt[__pyx_v_i]));
      if (unlikely(__pyx_v_measure_time == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "float division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      (__pyx_v_multiplyarray[__pyx_t_7]) = ((__pyx_v_multiplyarray[__pyx_t_7]) + (__pyx_t_17 / __pyx_v_measure_time));
    }
    __pyx_L85:;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":252
 * 
 *     #apply multiplyarray into expected
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((360/scale+1,720/scale), dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] expected_error = np.zeros((360/scale+1,720/scale), dtype=np.double)
 * 
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = __Pyx_PyInt_From_long(__Pyx_div_long(720, __pyx_v_scale)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_28 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_expected.rcbuffer->pybuffer, (PyObject*)__pyx_t_28, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_expected = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_expected.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_expected.diminfo[0].strides = __pyx_pybuffernd_expected.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_expected.diminfo[0].shape = __pyx_pybuffernd_expected.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_expected.diminfo[1].strides = __pyx_pybuffernd_expected.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_expected.diminfo[1].shape = __pyx_pybuffernd_expected.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_28 = 0;
  __pyx_v_expected = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":253
 *     #apply multiplyarray into expected
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((360/scale+1,720/scale), dtype=np.double)
 *     cdef np.ndarray[np.double_t, ndim=2] expected_error = np.zeros((360/scale+1,720/scale), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     for i in range(720/scale):
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_zeros); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_4 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = __Pyx_PyInt_From_long(__Pyx_div_long(720, __pyx_v_scale)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = PyTuple_New(2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_4);
  __Pyx_GIVEREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_9, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_4 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_double); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_5) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_5, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_29 = ((PyArrayObject *)__pyx_t_5);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_expected_error.rcbuffer->pybuffer, (PyObject*)__pyx_t_29, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_expected_error = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_expected_error.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_expected_error.diminfo[0].strides = __pyx_pybuffernd_expected_error.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_expected_error.diminfo[0].shape = __pyx_pybuffernd_expected_error.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_expected_error.diminfo[1].strides = __pyx_pybuffernd_expected_error.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_expected_error.diminfo[1].shape = __pyx_pybuffernd_expected_error.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_29 = 0;
  __pyx_v_expected_error = ((PyArrayObject *)__pyx_t_5);
  __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":255
 *     cdef np.ndarray[np.double_t, ndim=2] expected_error = np.zeros((360/scale+1,720/scale), dtype=np.double)
 * 
 *     for i in range(720/scale):             # <<<<<<<<<<<<<<
 *         for xx in range(720/scale):
 *             for yy in range(360/scale+1):
 */
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_19 = __Pyx_div_long(720, __pyx_v_scale);
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_19; __pyx_t_16+=1) {
    __pyx_v_i = __pyx_t_16;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":256
 * 
 *     for i in range(720/scale):
 *         for xx in range(720/scale):             # <<<<<<<<<<<<<<
 *             for yy in range(360/scale+1):
 *                 expected[yy,xx] += multiplyarray[i] * source[yy,xx+i if xx+i<720/scale else xx+i-720/scale]
 */
    if (unlikely(__pyx_v_scale == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 256; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_18 = __Pyx_div_long(720, __pyx_v_scale);
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_18; __pyx_t_7+=1) {
      __pyx_v_xx = __pyx_t_7;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":257
 *     for i in range(720/scale):
 *         for xx in range(720/scale):
 *             for yy in range(360/scale+1):             # <<<<<<<<<<<<<<
 *                 expected[yy,xx] += multiplyarray[i] * source[yy,xx+i if xx+i<720/scale else xx+i-720/scale]
 *                 expected_error[yy,xx] += multiplyarray[i] * m.sqrt(source[yy,xx+i if xx+i<720/scale else xx+i-720/scale])
 */
      if (unlikely(__pyx_v_scale == 0)) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
        #ifdef WITH_THREAD
        PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
        #endif
        PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
        #ifdef WITH_THREAD
        PyGILState_Release(__pyx_gilstate_save);
        #endif
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_30 = (__Pyx_div_long(360, __pyx_v_scale) + 1);
      for (__pyx_t_20 = 0; __pyx_t_20 < __pyx_t_30; __pyx_t_20+=1) {
        __pyx_v_yy = __pyx_t_20;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":258
 *         for xx in range(720/scale):
 *             for yy in range(360/scale+1):
 *                 expected[yy,xx] += multiplyarray[i] * source[yy,xx+i if xx+i<720/scale else xx+i-720/scale]             # <<<<<<<<<<<<<<
 *                 expected_error[yy,xx] += multiplyarray[i] * m.sqrt(source[yy,xx+i if xx+i<720/scale else xx+i-720/scale])
 * 
 */
        if (unlikely(__pyx_v_scale == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        if ((((__pyx_v_xx + __pyx_v_i) < __Pyx_div_long(720, __pyx_v_scale)) != 0)) {
          __pyx_t_31 = (__pyx_v_xx + __pyx_v_i);
        } else {
          if (unlikely(__pyx_v_scale == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_31 = ((__pyx_v_xx + __pyx_v_i) - __Pyx_div_long(720, __pyx_v_scale));
        }
        __pyx_t_22 = __pyx_v_yy;
        __pyx_t_32 = __pyx_t_31;
        __pyx_t_33 = -1;
        if (__pyx_t_22 < 0) {
          __pyx_t_22 += __pyx_pybuffernd_source.diminfo[0].shape;
          if (unlikely(__pyx_t_22 < 0)) __pyx_t_33 = 0;
        } else if (unlikely(__pyx_t_22 >= __pyx_pybuffernd_source.diminfo[0].shape)) __pyx_t_33 = 0;
        if (__pyx_t_32 < 0) {
          __pyx_t_32 += __pyx_pybuffernd_source.diminfo[1].shape;
          if (unlikely(__pyx_t_32 < 0)) __pyx_t_33 = 1;
        } else if (unlikely(__pyx_t_32 >= __pyx_pybuffernd_source.diminfo[1].shape)) __pyx_t_33 = 1;
        if (unlikely(__pyx_t_33 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_33);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_33 = __pyx_v_yy;
        __pyx_t_34 = __pyx_v_xx;
        __pyx_t_35 = -1;
        if (__pyx_t_33 < 0) {
          __pyx_t_33 += __pyx_pybuffernd_expected.diminfo[0].shape;
          if (unlikely(__pyx_t_33 < 0)) __pyx_t_35 = 0;
        } else if (unlikely(__pyx_t_33 >= __pyx_pybuffernd_expected.diminfo[0].shape)) __pyx_t_35 = 0;
        if (__pyx_t_34 < 0) {
          __pyx_t_34 += __pyx_pybuffernd_expected.diminfo[1].shape;
          if (unlikely(__pyx_t_34 < 0)) __pyx_t_35 = 1;
        } else if (unlikely(__pyx_t_34 >= __pyx_pybuffernd_expected.diminfo[1].shape)) __pyx_t_35 = 1;
        if (unlikely(__pyx_t_35 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_35);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 258; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_expected.rcbuffer->pybuffer.buf, __pyx_t_33, __pyx_pybuffernd_expected.diminfo[0].strides, __pyx_t_34, __pyx_pybuffernd_expected.diminfo[1].strides) += ((__pyx_v_multiplyarray[__pyx_v_i]) * (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_source.rcbuffer->pybuffer.buf, __pyx_t_22, __pyx_pybuffernd_source.diminfo[0].strides, __pyx_t_32, __pyx_pybuffernd_source.diminfo[1].strides)));

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":259
 *             for yy in range(360/scale+1):
 *                 expected[yy,xx] += multiplyarray[i] * source[yy,xx+i if xx+i<720/scale else xx+i-720/scale]
 *                 expected_error[yy,xx] += multiplyarray[i] * m.sqrt(source[yy,xx+i if xx+i<720/scale else xx+i-720/scale])             # <<<<<<<<<<<<<<
 * 
 *     #result array is data / expected values
 */
        if (unlikely(__pyx_v_scale == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        if ((((__pyx_v_xx + __pyx_v_i) < __Pyx_div_long(720, __pyx_v_scale)) != 0)) {
          __pyx_t_31 = (__pyx_v_xx + __pyx_v_i);
        } else {
          if (unlikely(__pyx_v_scale == 0)) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
            #ifdef WITH_THREAD
            PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
            #endif
            PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
            #ifdef WITH_THREAD
            PyGILState_Release(__pyx_gilstate_save);
            #endif
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          __pyx_t_31 = ((__pyx_v_xx + __pyx_v_i) - __Pyx_div_long(720, __pyx_v_scale));
        }
        __pyx_t_35 = __pyx_v_yy;
        __pyx_t_36 = __pyx_t_31;
        __pyx_t_37 = -1;
        if (__pyx_t_35 < 0) {
          __pyx_t_35 += __pyx_pybuffernd_source.diminfo[0].shape;
          if (unlikely(__pyx_t_35 < 0)) __pyx_t_37 = 0;
        } else if (unlikely(__pyx_t_35 >= __pyx_pybuffernd_source.diminfo[0].shape)) __pyx_t_37 = 0;
        if (__pyx_t_36 < 0) {
          __pyx_t_36 += __pyx_pybuffernd_source.diminfo[1].shape;
          if (unlikely(__pyx_t_36 < 0)) __pyx_t_37 = 1;
        } else if (unlikely(__pyx_t_36 >= __pyx_pybuffernd_source.diminfo[1].shape)) __pyx_t_37 = 1;
        if (unlikely(__pyx_t_37 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_37);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_37 = __pyx_v_yy;
        __pyx_t_38 = __pyx_v_xx;
        __pyx_t_39 = -1;
        if (__pyx_t_37 < 0) {
          __pyx_t_37 += __pyx_pybuffernd_expected_error.diminfo[0].shape;
          if (unlikely(__pyx_t_37 < 0)) __pyx_t_39 = 0;
        } else if (unlikely(__pyx_t_37 >= __pyx_pybuffernd_expected_error.diminfo[0].shape)) __pyx_t_39 = 0;
        if (__pyx_t_38 < 0) {
          __pyx_t_38 += __pyx_pybuffernd_expected_error.diminfo[1].shape;
          if (unlikely(__pyx_t_38 < 0)) __pyx_t_39 = 1;
        } else if (unlikely(__pyx_t_38 >= __pyx_pybuffernd_expected_error.diminfo[1].shape)) __pyx_t_39 = 1;
        if (unlikely(__pyx_t_39 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_39);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 259; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_expected_error.rcbuffer->pybuffer.buf, __pyx_t_37, __pyx_pybuffernd_expected_error.diminfo[0].strides, __pyx_t_38, __pyx_pybuffernd_expected_error.diminfo[1].strides) += ((__pyx_v_multiplyarray[__pyx_v_i]) * sqrt((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_source.rcbuffer->pybuffer.buf, __pyx_t_35, __pyx_pybuffernd_source.diminfo[0].strides, __pyx_t_36, __pyx_pybuffernd_source.diminfo[1].strides))));
      }
    }
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":262
 * 
 *     #result array is data / expected values
 *     cdef np.ndarray[np.double_t, ndim=2] result = np.zeros((360/scale+1,720/scale), dtype=np.double)             # <<<<<<<<<<<<<<
 *     for xx in range(720/scale):
 *         for yy in range(360/scale+1):
 */
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_5 = __Pyx_PyInt_From_long((__Pyx_div_long(360, __pyx_v_scale) + 1)); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_8 = __Pyx_PyInt_From_long(__Pyx_div_long(720, __pyx_v_scale)); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_10 = PyTuple_New(2); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  PyTuple_SET_ITEM(__pyx_t_10, 1, __pyx_t_8);
  __Pyx_GIVEREF(__pyx_t_8);
  __pyx_t_5 = 0;
  __pyx_t_8 = 0;
  __pyx_t_8 = PyTuple_New(1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  PyTuple_SET_ITEM(__pyx_t_8, 0, __pyx_t_10);
  __Pyx_GIVEREF(__pyx_t_10);
  __pyx_t_10 = 0;
  __pyx_t_10 = PyDict_New(); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __pyx_t_5 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_t_5, __pyx_n_s_double); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  if (PyDict_SetItem(__pyx_t_10, __pyx_n_s_dtype, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_t_8, __pyx_t_10); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  if (!(likely(((__pyx_t_4) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_4, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_40 = ((PyArrayObject *)__pyx_t_4);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_result.rcbuffer->pybuffer, (PyObject*)__pyx_t_40, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_result = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_result.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_result.diminfo[0].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_result.diminfo[0].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_result.diminfo[1].strides = __pyx_pybuffernd_result.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_result.diminfo[1].shape = __pyx_pybuffernd_result.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_40 = 0;
  __pyx_v_result = ((PyArrayObject *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":263
 *     #result array is data / expected values
 *     cdef np.ndarray[np.double_t, ndim=2] result = np.zeros((360/scale+1,720/scale), dtype=np.double)
 *     for xx in range(720/scale):             # <<<<<<<<<<<<<<
 *         for yy in range(360/scale+1):
 *             if expected[yy,xx]!=0:
 */
  if (unlikely(__pyx_v_scale == 0)) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(720))) {
    #ifdef WITH_THREAD
    PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
    #endif
    PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
    #ifdef WITH_THREAD
    PyGILState_Release(__pyx_gilstate_save);
    #endif
    {__pyx_filename = __pyx_f[4]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_19 = __Pyx_div_long(720, __pyx_v_scale);
  for (__pyx_t_16 = 0; __pyx_t_16 < __pyx_t_19; __pyx_t_16+=1) {
    __pyx_v_xx = __pyx_t_16;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":264
 *     cdef np.ndarray[np.double_t, ndim=2] result = np.zeros((360/scale+1,720/scale), dtype=np.double)
 *     for xx in range(720/scale):
 *         for yy in range(360/scale+1):             # <<<<<<<<<<<<<<
 *             if expected[yy,xx]!=0:
 *                 result[yy, xx] = data[yy, xx]/expected[yy, xx]
 */
    if (unlikely(__pyx_v_scale == 0)) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_ZeroDivisionError, "integer division or modulo by zero");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    else if (sizeof(long) == sizeof(long) && (!(((int)-1) > 0)) && unlikely(__pyx_v_scale == (int)-1)  && unlikely(UNARY_NEG_WOULD_OVERFLOW(360))) {
      #ifdef WITH_THREAD
      PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
      #endif
      PyErr_SetString(PyExc_OverflowError, "value too large to perform division");
      #ifdef WITH_THREAD
      PyGILState_Release(__pyx_gilstate_save);
      #endif
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    __pyx_t_18 = (__Pyx_div_long(360, __pyx_v_scale) + 1);
    for (__pyx_t_7 = 0; __pyx_t_7 < __pyx_t_18; __pyx_t_7+=1) {
      __pyx_v_yy = __pyx_t_7;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":265
 *     for xx in range(720/scale):
 *         for yy in range(360/scale+1):
 *             if expected[yy,xx]!=0:             # <<<<<<<<<<<<<<
 *                 result[yy, xx] = data[yy, xx]/expected[yy, xx]
 * 
 */
      __pyx_t_20 = __pyx_v_yy;
      __pyx_t_39 = __pyx_v_xx;
      __pyx_t_41 = -1;
      if (__pyx_t_20 < 0) {
        __pyx_t_20 += __pyx_pybuffernd_expected.diminfo[0].shape;
        if (unlikely(__pyx_t_20 < 0)) __pyx_t_41 = 0;
      } else if (unlikely(__pyx_t_20 >= __pyx_pybuffernd_expected.diminfo[0].shape)) __pyx_t_41 = 0;
      if (__pyx_t_39 < 0) {
        __pyx_t_39 += __pyx_pybuffernd_expected.diminfo[1].shape;
        if (unlikely(__pyx_t_39 < 0)) __pyx_t_41 = 1;
      } else if (unlikely(__pyx_t_39 >= __pyx_pybuffernd_expected.diminfo[1].shape)) __pyx_t_41 = 1;
      if (unlikely(__pyx_t_41 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_41);
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_t_1 = (((*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_expected.rcbuffer->pybuffer.buf, __pyx_t_20, __pyx_pybuffernd_expected.diminfo[0].strides, __pyx_t_39, __pyx_pybuffernd_expected.diminfo[1].strides)) != 0.0) != 0);
      if (__pyx_t_1) {

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":266
 *         for yy in range(360/scale+1):
 *             if expected[yy,xx]!=0:
 *                 result[yy, xx] = data[yy, xx]/expected[yy, xx]             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_t_41 = __pyx_v_yy;
        __pyx_t_42 = __pyx_v_xx;
        __pyx_t_43 = -1;
        if (__pyx_t_41 < 0) {
          __pyx_t_41 += __pyx_pybuffernd_data.diminfo[0].shape;
          if (unlikely(__pyx_t_41 < 0)) __pyx_t_43 = 0;
        } else if (unlikely(__pyx_t_41 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_43 = 0;
        if (__pyx_t_42 < 0) {
          __pyx_t_42 += __pyx_pybuffernd_data.diminfo[1].shape;
          if (unlikely(__pyx_t_42 < 0)) __pyx_t_43 = 1;
        } else if (unlikely(__pyx_t_42 >= __pyx_pybuffernd_data.diminfo[1].shape)) __pyx_t_43 = 1;
        if (unlikely(__pyx_t_43 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_43);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_44 = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_41, __pyx_pybuffernd_data.diminfo[0].strides, __pyx_t_42, __pyx_pybuffernd_data.diminfo[1].strides));
        __pyx_t_43 = __pyx_v_yy;
        __pyx_t_45 = __pyx_v_xx;
        __pyx_t_46 = -1;
        if (__pyx_t_43 < 0) {
          __pyx_t_43 += __pyx_pybuffernd_expected.diminfo[0].shape;
          if (unlikely(__pyx_t_43 < 0)) __pyx_t_46 = 0;
        } else if (unlikely(__pyx_t_43 >= __pyx_pybuffernd_expected.diminfo[0].shape)) __pyx_t_46 = 0;
        if (__pyx_t_45 < 0) {
          __pyx_t_45 += __pyx_pybuffernd_expected.diminfo[1].shape;
          if (unlikely(__pyx_t_45 < 0)) __pyx_t_46 = 1;
        } else if (unlikely(__pyx_t_45 >= __pyx_pybuffernd_expected.diminfo[1].shape)) __pyx_t_46 = 1;
        if (unlikely(__pyx_t_46 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_46);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_47 = (*__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_expected.rcbuffer->pybuffer.buf, __pyx_t_43, __pyx_pybuffernd_expected.diminfo[0].strides, __pyx_t_45, __pyx_pybuffernd_expected.diminfo[1].strides));
        if (unlikely(__pyx_t_47 == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_t_46 = __pyx_v_yy;
        __pyx_t_48 = __pyx_v_xx;
        __pyx_t_49 = -1;
        if (__pyx_t_46 < 0) {
          __pyx_t_46 += __pyx_pybuffernd_result.diminfo[0].shape;
          if (unlikely(__pyx_t_46 < 0)) __pyx_t_49 = 0;
        } else if (unlikely(__pyx_t_46 >= __pyx_pybuffernd_result.diminfo[0].shape)) __pyx_t_49 = 0;
        if (__pyx_t_48 < 0) {
          __pyx_t_48 += __pyx_pybuffernd_result.diminfo[1].shape;
          if (unlikely(__pyx_t_48 < 0)) __pyx_t_49 = 1;
        } else if (unlikely(__pyx_t_48 >= __pyx_pybuffernd_result.diminfo[1].shape)) __pyx_t_49 = 1;
        if (unlikely(__pyx_t_49 != -1)) {
          __Pyx_RaiseBufferIndexError(__pyx_t_49);
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_result.rcbuffer->pybuffer.buf, __pyx_t_46, __pyx_pybuffernd_result.diminfo[0].strides, __pyx_t_48, __pyx_pybuffernd_result.diminfo[1].strides) = (__pyx_t_44 / __pyx_t_47);
        goto __pyx_L96;
      }
      __pyx_L96:;
    }
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":269
 * 
 * 
 *     extent = [0, 360, -90, 90]             # <<<<<<<<<<<<<<
 *     cdef object y2 = expected * expected
 *     cdef object x2 = data*data
 */
  __pyx_t_4 = PyList_New(4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 269; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(__pyx_int_0);
  PyList_SET_ITEM(__pyx_t_4, 0, __pyx_int_0);
  __Pyx_GIVEREF(__pyx_int_0);
  __Pyx_INCREF(__pyx_int_360);
  PyList_SET_ITEM(__pyx_t_4, 1, __pyx_int_360);
  __Pyx_GIVEREF(__pyx_int_360);
  __Pyx_INCREF(__pyx_int_neg_90);
  PyList_SET_ITEM(__pyx_t_4, 2, __pyx_int_neg_90);
  __Pyx_GIVEREF(__pyx_int_neg_90);
  __Pyx_INCREF(__pyx_int_90);
  PyList_SET_ITEM(__pyx_t_4, 3, __pyx_int_90);
  __Pyx_GIVEREF(__pyx_int_90);
  __pyx_v_extent = ((PyObject*)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":270
 * 
 *     extent = [0, 360, -90, 90]
 *     cdef object y2 = expected * expected             # <<<<<<<<<<<<<<
 *     cdef object x2 = data*data
 *     cdef object y4 = y2*y2
 */
  __pyx_t_4 = PyNumber_Multiply(((PyObject *)__pyx_v_expected), ((PyObject *)__pyx_v_expected)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 270; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_y2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":271
 *     extent = [0, 360, -90, 90]
 *     cdef object y2 = expected * expected
 *     cdef object x2 = data*data             # <<<<<<<<<<<<<<
 *     cdef object y4 = y2*y2
 *     cdef object dy2 = expected_error
 */
  __pyx_t_4 = PyNumber_Multiply(((PyObject *)__pyx_v_data), ((PyObject *)__pyx_v_data)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_x2 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":272
 *     cdef object y2 = expected * expected
 *     cdef object x2 = data*data
 *     cdef object y4 = y2*y2             # <<<<<<<<<<<<<<
 *     cdef object dy2 = expected_error
 *     cdef object data_error = np.sqrt(data)
 */
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_y2, __pyx_v_y2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_v_y4 = __pyx_t_4;
  __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":273
 *     cdef object x2 = data*data
 *     cdef object y4 = y2*y2
 *     cdef object dy2 = expected_error             # <<<<<<<<<<<<<<
 *     cdef object data_error = np.sqrt(data)
 *     return {
 */
  __Pyx_INCREF(((PyObject *)__pyx_v_expected_error));
  __pyx_v_dy2 = ((PyObject *)__pyx_v_expected_error);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":274
 *     cdef object y4 = y2*y2
 *     cdef object dy2 = expected_error
 *     cdef object data_error = np.sqrt(data)             # <<<<<<<<<<<<<<
 *     return {
 *       "data": data,
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  PyTuple_SET_ITEM(__pyx_t_4, 0, ((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_data_error = __pyx_t_8;
  __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":275
 *     cdef object dy2 = expected_error
 *     cdef object data_error = np.sqrt(data)
 *     return {             # <<<<<<<<<<<<<<
 *       "data": data,
 *       "data_error": data_error,
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":276
 *     cdef object data_error = np.sqrt(data)
 *     return {
 *       "data": data,             # <<<<<<<<<<<<<<
 *       "data_error": data_error,
 *       "source": source,
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_data, ((PyObject *)__pyx_v_data)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":277
 *     return {
 *       "data": data,
 *       "data_error": data_error,             # <<<<<<<<<<<<<<
 *       "source": source,
 *       "expected": expected,
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_data_error, __pyx_v_data_error) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":278
 *       "data": data,
 *       "data_error": data_error,
 *       "source": source,             # <<<<<<<<<<<<<<
 *       "expected": expected,
 *       "expected_error": expected_error,
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_source, ((PyObject *)__pyx_v_source)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":279
 *       "data_error": data_error,
 *       "source": source,
 *       "expected": expected,             # <<<<<<<<<<<<<<
 *       "expected_error": expected_error,
 *       "result": result,
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_expected, ((PyObject *)__pyx_v_expected)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":280
 *       "source": source,
 *       "expected": expected,
 *       "expected_error": expected_error,             # <<<<<<<<<<<<<<
 *       "result": result,
 *       "result_error": data_error*np.sqrt((1+data/y2*dy2)/y2),
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_expected_error, ((PyObject *)__pyx_v_expected_error)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":281
 *       "expected": expected,
 *       "expected_error": expected_error,
 *       "result": result,             # <<<<<<<<<<<<<<
 *       "result_error": data_error*np.sqrt((1+data/y2*dy2)/y2),
 *       "result_sigma": (result-1)/(data_error*np.sqrt((1+data/y2*dy2)/y2)),
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_result, ((PyObject *)__pyx_v_result)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":282
 *       "expected_error": expected_error,
 *       "result": result,
 *       "result_error": data_error*np.sqrt((1+data/y2*dy2)/y2),             # <<<<<<<<<<<<<<
 *       "result_sigma": (result-1)/(data_error*np.sqrt((1+data/y2*dy2)/y2)),
 *       "extent": extent
 */
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_4, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_data), __pyx_v_y2); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = PyNumber_Multiply(__pyx_t_4, __pyx_v_dy2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Add(__pyx_int_1, __pyx_t_9); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_v_y2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_9);
  __Pyx_GIVEREF(__pyx_t_9);
  __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_4, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_t_4 = PyNumber_Multiply(__pyx_v_data_error, __pyx_t_9); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_result_error, __pyx_t_4) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":283
 *       "result": result,
 *       "result_error": data_error*np.sqrt((1+data/y2*dy2)/y2),
 *       "result_sigma": (result-1)/(data_error*np.sqrt((1+data/y2*dy2)/y2)),             # <<<<<<<<<<<<<<
 *       "extent": extent
 *     }
 */
  __pyx_t_4 = PyNumber_Subtract(((PyObject *)__pyx_v_result), __pyx_int_1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_10 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_10);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyNumber_Divide(((PyObject *)__pyx_v_data), __pyx_v_y2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_5 = PyNumber_Multiply(__pyx_t_9, __pyx_v_dy2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Add(__pyx_int_1, __pyx_t_5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_9, __pyx_v_y2); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyTuple_New(1); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  PyTuple_SET_ITEM(__pyx_t_9, 0, __pyx_t_5);
  __Pyx_GIVEREF(__pyx_t_5);
  __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_10, __pyx_t_9, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyNumber_Multiply(__pyx_v_data_error, __pyx_t_5); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;
  __pyx_t_5 = __Pyx_PyNumber_Divide(__pyx_t_4, __pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_5);
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_result_sigma, __pyx_t_5) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_5); __pyx_t_5 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":285
 *       "result_sigma": (result-1)/(data_error*np.sqrt((1+data/y2*dy2)/y2)),
 *       "extent": extent
 *     }             # <<<<<<<<<<<<<<
 * 
 *     #example of draw plot
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_extent, __pyx_v_extent) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 275; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":64
 *         self.file_iter = self.file.__iter__()
 * 
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):             # <<<<<<<<<<<<<<
 *     scale*=2
 *     if scale == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_expected.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_expected_error.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_source.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("czelta.mapa_smeru", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_expected.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_expected_error.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_result.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_source.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_er);
  __Pyx_XDECREF(__pyx_v_meteo);
  __Pyx_XDECREF(__pyx_v_sts);
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_me);
  __Pyx_XDECREF(__pyx_v_run);
  __Pyx_XDECREF(__pyx_v_begin);
  __Pyx_XDECREF(__pyx_v_end);
  __Pyx_XDECREF((PyObject *)__pyx_v_source);
  __Pyx_XDECREF(__pyx_v_pos);
  __Pyx_XDECREF((PyObject *)__pyx_v_expected);
  __Pyx_XDECREF((PyObject *)__pyx_v_expected_error);
  __Pyx_XDECREF((PyObject *)__pyx_v_result);
  __Pyx_XDECREF(__pyx_v_extent);
  __Pyx_XDECREF(__pyx_v_y2);
  __Pyx_XDECREF(__pyx_v_x2);
  __Pyx_XDECREF(__pyx_v_y4);
  __Pyx_XDECREF(__pyx_v_dy2);
  __Pyx_XDECREF(__pyx_v_data_error);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":294
 * 
 * #closed
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):             # <<<<<<<<<<<<<<
 *     cdef event_reader er = event_reader(path)
 *     def f(e):
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_5moon_check(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_5moon_check = {__Pyx_NAMESTR("moon_check"), (PyCFunction)__pyx_pw_6czelta_5moon_check, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_5moon_check(PyObject *__pyx_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED double __pyx_v_citlivost;
  PyObject *__pyx_v_path = 0;
  PyObject *__pyx_v_filter = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("moon_check (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_citlivost,&__pyx_n_s_path,&__pyx_n_s_filter,0};
    PyObject* values[3] = {0,0,0};
    values[1] = ((PyObject *)__pyx_kp_s_data_pardubice_spse_dat);
    values[2] = ((PyObject *)Py_None);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_citlivost);
          if (value) { values[0] = value; kw_args--; }
        }
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_path);
          if (value) { values[1] = value; kw_args--; }
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_filter);
          if (value) { values[2] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "moon_check") < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_citlivost = __pyx_PyFloat_AsDouble(values[0]); if (unlikely((__pyx_v_citlivost == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_citlivost = ((double)5.0);
    }
    __pyx_v_path = values[1];
    __pyx_v_filter = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("moon_check", 0, 0, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("czelta.moon_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_6czelta_4moon_check(__pyx_self, __pyx_v_citlivost, __pyx_v_path, __pyx_v_filter);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":296
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):
 *     cdef event_reader er = event_reader(path)
 *     def f(e):             # <<<<<<<<<<<<<<
 *         dir = e.AH_direction
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 */

/* Python wrapper */
static PyObject *__pyx_pw_6czelta_10moon_check_1f(PyObject *__pyx_self, PyObject *__pyx_v_e); /*proto*/
static PyMethodDef __pyx_mdef_6czelta_10moon_check_1f = {__Pyx_NAMESTR("f"), (PyCFunction)__pyx_pw_6czelta_10moon_check_1f, METH_O, __Pyx_DOCSTR(0)};
static PyObject *__pyx_pw_6czelta_10moon_check_1f(PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("f (wrapper)", 0);
  __pyx_r = __pyx_pf_6czelta_10moon_check_f(__pyx_self, ((PyObject *)__pyx_v_e));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_6czelta_10moon_check_f(CYTHON_UNUSED PyObject *__pyx_self, PyObject *__pyx_v_e) {
  PyObject *__pyx_v_dir = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("f", 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":297
 *     cdef event_reader er = event_reader(path)
 *     def f(e):
 *         dir = e.AH_direction             # <<<<<<<<<<<<<<
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 *         return not dir or dir[1] < 40
 */
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_v_e, __pyx_n_s_AH_direction); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 297; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_dir = __pyx_t_1;
  __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":299
 *         dir = e.AH_direction
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 *         return not dir or dir[1] < 40             # <<<<<<<<<<<<<<
 *     er.filter(f)
 *     er.filter_calibrations()
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_v_dir); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_1 = __Pyx_PyBool_FromLong((!__pyx_t_2)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_IsTrue(__pyx_t_1); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (!__pyx_t_2) {
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_3 = __Pyx_GetItemInt(__pyx_v_dir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_int_40, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_3 = __pyx_t_4;
    __pyx_t_4 = 0;
  } else {
    __pyx_t_3 = __pyx_t_1;
    __pyx_t_1 = 0;
  }
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":296
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):
 *     cdef event_reader er = event_reader(path)
 *     def f(e):             # <<<<<<<<<<<<<<
 *         dir = e.AH_direction
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("czelta.moon_check.f", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dir);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/home/martin/Plocha/czelta-python/my_analysis.pxi":294
 * 
 * #closed
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):             # <<<<<<<<<<<<<<
 *     cdef event_reader er = event_reader(path)
 *     def f(e):
 */

static PyObject *__pyx_pf_6czelta_4moon_check(CYTHON_UNUSED PyObject *__pyx_self, CYTHON_UNUSED double __pyx_v_citlivost, PyObject *__pyx_v_path, PyObject *__pyx_v_filter) {
  struct __pyx_obj_6czelta_event_reader *__pyx_v_er = 0;
  PyObject *__pyx_v_f = 0;
  std::vector<double> __pyx_v_RA;
  std::vector<double> __pyx_v_D;
  std::vector<double> __pyx_v_relative_alt;
  std::vector<double> __pyx_v_relative_az;
  double __pyx_v_JD;
  struct ln_equ_posn __pyx_v_moon;
  struct ln_equ_posn __pyx_v_zenit;
  struct ln_equ_posn __pyx_v_e_dir;
  struct ln_hrz_posn __pyx_v_ob;
  struct ln_lnlat_posn __pyx_v_station;
  std::vector<int> __pyx_v_timestamps;
  struct __pyx_obj_6czelta_event *__pyx_v_e = 0;
  PyObject *__pyx_v_dir = 0;
  long __pyx_v_i;
  int __pyx_v_k;
  int __pyx_v_x;
  int __pyx_v_y;
  CYTHON_UNUSED int __pyx_v_measure_time;
  PyArrayObject *__pyx_v_data = 0;
  PyArrayObject *__pyx_v_source = 0;
  PyArrayObject *__pyx_v_expected = 0;
  PyObject *__pyx_v_run = NULL;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_data;
  __Pyx_Buffer __pyx_pybuffer_data;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_expected;
  __Pyx_Buffer __pyx_pybuffer_expected;
  __Pyx_LocalBuf_ND __pyx_pybuffernd_source;
  __Pyx_Buffer __pyx_pybuffer_source;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  double __pyx_t_4;
  Py_ssize_t __pyx_t_5;
  PyObject *(*__pyx_t_6)(PyObject *);
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyArrayObject *__pyx_t_10 = NULL;
  PyArrayObject *__pyx_t_11 = NULL;
  PyArrayObject *__pyx_t_12 = NULL;
  PyObject *__pyx_t_13 = NULL;
  int __pyx_t_14;
  int __pyx_t_15;
  int __pyx_t_16;
  int __pyx_t_17;
  int __pyx_t_18;
  int __pyx_t_19;
  long __pyx_t_20;
  long __pyx_t_21;
  long __pyx_t_22;
  int __pyx_t_23;
  int __pyx_t_24;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("moon_check", 0);
  __pyx_pybuffer_data.pybuffer.buf = NULL;
  __pyx_pybuffer_data.refcount = 0;
  __pyx_pybuffernd_data.data = NULL;
  __pyx_pybuffernd_data.rcbuffer = &__pyx_pybuffer_data;
  __pyx_pybuffer_source.pybuffer.buf = NULL;
  __pyx_pybuffer_source.refcount = 0;
  __pyx_pybuffernd_source.data = NULL;
  __pyx_pybuffernd_source.rcbuffer = &__pyx_pybuffer_source;
  __pyx_pybuffer_expected.pybuffer.buf = NULL;
  __pyx_pybuffer_expected.refcount = 0;
  __pyx_pybuffernd_expected.data = NULL;
  __pyx_pybuffernd_expected.rcbuffer = &__pyx_pybuffer_expected;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":295
 * #closed
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):
 *     cdef event_reader er = event_reader(path)             # <<<<<<<<<<<<<<
 *     def f(e):
 *         dir = e.AH_direction
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_v_path);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_v_path);
  __Pyx_GIVEREF(__pyx_v_path);
  __pyx_t_2 = __Pyx_PyObject_Call(((PyObject *)((PyObject*)__pyx_ptype_6czelta_event_reader)), __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_er = ((struct __pyx_obj_6czelta_event_reader *)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":296
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):
 *     cdef event_reader er = event_reader(path)
 *     def f(e):             # <<<<<<<<<<<<<<
 *         dir = e.AH_direction
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 */
  __pyx_t_2 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6czelta_10moon_check_1f, 0, __pyx_n_s_moon_check_locals_f, NULL, __pyx_n_s_czelta, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__22)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_f = __pyx_t_2;
  __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":300
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 *         return not dir or dir[1] < 40
 *     er.filter(f)             # <<<<<<<<<<<<<<
 *     er.filter_calibrations()
 *     er.filter_maximum_TDC()
 */
  ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter(__pyx_v_er, __pyx_v_f, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":301
 *         return not dir or dir[1] < 40
 *     er.filter(f)
 *     er.filter_calibrations()             # <<<<<<<<<<<<<<
 *     er.filter_maximum_TDC()
 *     if filter:
 */
  ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter_calibrations(__pyx_v_er, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":302
 *     er.filter(f)
 *     er.filter_calibrations()
 *     er.filter_maximum_TDC()             # <<<<<<<<<<<<<<
 *     if filter:
 *         er.filter(filter)
 */
  ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter_maximum_TDC(__pyx_v_er, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":303
 *     er.filter_calibrations()
 *     er.filter_maximum_TDC()
 *     if filter:             # <<<<<<<<<<<<<<
 *         er.filter(filter)
 * 
 */
  __pyx_t_3 = __Pyx_PyObject_IsTrue(__pyx_v_filter); if (unlikely(__pyx_t_3 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 303; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__pyx_t_3) {

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":304
 *     er.filter_maximum_TDC()
 *     if filter:
 *         er.filter(filter)             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[double] RA
 */
    ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->filter(__pyx_v_er, __pyx_v_filter, 0);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":316
 * 
 *     cdef ln_lnlat_posn station
 *     station.lng = er.get_station().gps_position()[0]             # <<<<<<<<<<<<<<
 *     station.lat = er.get_station().gps_position()[1]
 * 
 */
  __pyx_t_2 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->get_station(__pyx_v_er, 0)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_gps_position); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_GetItemInt(__pyx_t_2, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_v_station.lng = __pyx_t_4;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":317
 *     cdef ln_lnlat_posn station
 *     station.lng = er.get_station().gps_position()[0]
 *     station.lat = er.get_station().gps_position()[1]             # <<<<<<<<<<<<<<
 * 
 *     cdef vector[int] timestamps
 */
  __pyx_t_1 = ((PyObject *)((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->get_station(__pyx_v_er, 0)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_gps_position); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_GetItemInt(__pyx_t_1, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_v_station.lat = __pyx_t_4;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":323
 *     cdef object dir
 *     cdef long int i
 *     cdef int j, k = 0, x, y, g             # <<<<<<<<<<<<<<
 *     cdef int measure_time = er.measure_time()
 *     for e in er:
 */
  __pyx_v_k = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":324
 *     cdef long int i
 *     cdef int j, k = 0, x, y, g
 *     cdef int measure_time = er.measure_time()             # <<<<<<<<<<<<<<
 *     for e in er:
 *         dir = e.RAD_direction
 */
  __pyx_v_measure_time = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->measure_time(__pyx_v_er, 0);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":325
 *     cdef int j, k = 0, x, y, g
 *     cdef int measure_time = er.measure_time()
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.RAD_direction
 *         D.push_back(dir[1])
 */
  if (PyList_CheckExact(((PyObject *)__pyx_v_er)) || PyTuple_CheckExact(((PyObject *)__pyx_v_er))) {
    __pyx_t_2 = ((PyObject *)__pyx_v_er); __Pyx_INCREF(__pyx_t_2); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_2 = PyObject_GetIter(((PyObject *)__pyx_v_er)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_6 = Py_TYPE(__pyx_t_2)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_2)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_2)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_2)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_2, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_2, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_2);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_6czelta_event))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_e, ((struct __pyx_obj_6czelta_event *)__pyx_t_1));
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":326
 *     cdef int measure_time = er.measure_time()
 *     for e in er:
 *         dir = e.RAD_direction             # <<<<<<<<<<<<<<
 *         D.push_back(dir[1])
 *         RA.push_back(dir[0])
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_e), __pyx_n_s_RAD_direction); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 326; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_XDECREF_SET(__pyx_v_dir, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":327
 *     for e in er:
 *         dir = e.RAD_direction
 *         D.push_back(dir[1])             # <<<<<<<<<<<<<<
 *         RA.push_back(dir[0])
 *         timestamps.push_back(e.timestamp)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_D.push_back(__pyx_t_4);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":328
 *         dir = e.RAD_direction
 *         D.push_back(dir[1])
 *         RA.push_back(dir[0])             # <<<<<<<<<<<<<<
 *         timestamps.push_back(e.timestamp)
 * 
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_dir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_1); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_RA.push_back(__pyx_t_4);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":329
 *         D.push_back(dir[1])
 *         RA.push_back(dir[0])
 *         timestamps.push_back(e.timestamp)             # <<<<<<<<<<<<<<
 * 
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)
 */
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_e), __pyx_n_s_timestamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_1); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_v_timestamps.push_back(__pyx_t_7);

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":325
 *     cdef int j, k = 0, x, y, g
 *     cdef int measure_time = er.measure_time()
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.RAD_direction
 *         D.push_back(dir[1])
 */
  }
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":331
 *         timestamps.push_back(e.timestamp)
 * 
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((181,181), dtype=np.double)
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_zeros); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_int); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (PyDict_SetItem(__pyx_t_2, __pyx_n_s_dtype, __pyx_t_9) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_tuple__24, __pyx_t_2); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (!(likely(((__pyx_t_9) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_9, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_10 = ((PyArrayObject *)__pyx_t_9);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_data.rcbuffer->pybuffer, (PyObject*)__pyx_t_10, &__Pyx_TypeInfo_nn___pyx_t_5numpy_int_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_data = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_data.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_data.diminfo[0].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_data.diminfo[0].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_data.diminfo[1].strides = __pyx_pybuffernd_data.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_data.diminfo[1].shape = __pyx_pybuffernd_data.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_10 = 0;
  __pyx_v_data = ((PyArrayObject *)__pyx_t_9);
  __pyx_t_9 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":332
 * 
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((181,181), dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)
 * 
 */
  __pyx_t_9 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_9, __pyx_n_s_zeros); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __pyx_t_9 = PyDict_New(); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_8 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_double); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_9, __pyx_n_s_dtype, __pyx_t_8) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_tuple__26, __pyx_t_9); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_11 = ((PyArrayObject *)__pyx_t_8);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_source.rcbuffer->pybuffer, (PyObject*)__pyx_t_11, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES| PyBUF_WRITABLE, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_source = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_source.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_source.diminfo[0].strides = __pyx_pybuffernd_source.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_source.diminfo[0].shape = __pyx_pybuffernd_source.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_source.diminfo[1].strides = __pyx_pybuffernd_source.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_source.diminfo[1].shape = __pyx_pybuffernd_source.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_11 = 0;
  __pyx_v_source = ((PyArrayObject *)__pyx_t_8);
  __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":333
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((181,181), dtype=np.double)
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     for e in er:
 */
  __pyx_t_8 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_9 = __Pyx_PyObject_GetAttrStr(__pyx_t_8, __pyx_n_s_zeros); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_9);
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_double); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_dtype, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_PyObject_Call(__pyx_t_9, __pyx_tuple__28, __pyx_t_8); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
  if (!(likely(((__pyx_t_1) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_1, __pyx_ptype_5numpy_ndarray))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_12 = ((PyArrayObject *)__pyx_t_1);
  {
    __Pyx_BufFmt_StackElem __pyx_stack[1];
    if (unlikely(__Pyx_GetBufferAndValidate(&__pyx_pybuffernd_expected.rcbuffer->pybuffer, (PyObject*)__pyx_t_12, &__Pyx_TypeInfo_nn___pyx_t_5numpy_double_t, PyBUF_FORMAT| PyBUF_STRIDES, 2, 0, __pyx_stack) == -1)) {
      __pyx_v_expected = ((PyArrayObject *)Py_None); __Pyx_INCREF(Py_None); __pyx_pybuffernd_expected.rcbuffer->pybuffer.buf = NULL;
      {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    } else {__pyx_pybuffernd_expected.diminfo[0].strides = __pyx_pybuffernd_expected.rcbuffer->pybuffer.strides[0]; __pyx_pybuffernd_expected.diminfo[0].shape = __pyx_pybuffernd_expected.rcbuffer->pybuffer.shape[0]; __pyx_pybuffernd_expected.diminfo[1].strides = __pyx_pybuffernd_expected.rcbuffer->pybuffer.strides[1]; __pyx_pybuffernd_expected.diminfo[1].shape = __pyx_pybuffernd_expected.rcbuffer->pybuffer.shape[1];
    }
  }
  __pyx_t_12 = 0;
  __pyx_v_expected = ((PyArrayObject *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":335
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)
 * 
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.AH_direction
 *         x = int(90+(90-dir[1])*m.sin(dir[0]/180*m.M_PI))
 */
  if (PyList_CheckExact(((PyObject *)__pyx_v_er)) || PyTuple_CheckExact(((PyObject *)__pyx_v_er))) {
    __pyx_t_1 = ((PyObject *)__pyx_v_er); __Pyx_INCREF(__pyx_t_1); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_1 = PyObject_GetIter(((PyObject *)__pyx_v_er)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_6 = Py_TYPE(__pyx_t_1)->tp_iternext;
  }
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_1)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_8 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_1)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_8 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_5); __Pyx_INCREF(__pyx_t_8); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_8 = PySequence_ITEM(__pyx_t_1, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_8 = __pyx_t_6(__pyx_t_1);
      if (unlikely(!__pyx_t_8)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_8);
    }
    if (!(likely(((__pyx_t_8) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_8, __pyx_ptype_6czelta_event))))) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_e, ((struct __pyx_obj_6czelta_event *)__pyx_t_8));
    __pyx_t_8 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":336
 * 
 *     for e in er:
 *         dir = e.AH_direction             # <<<<<<<<<<<<<<
 *         x = int(90+(90-dir[1])*m.sin(dir[0]/180*m.M_PI))
 *         y = int(90+(90-dir[1])*m.cos(dir[0]/180*m.M_PI))
 */
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_e), __pyx_n_s_AH_direction); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_XDECREF_SET(__pyx_v_dir, __pyx_t_8);
    __pyx_t_8 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":337
 *     for e in er:
 *         dir = e.AH_direction
 *         x = int(90+(90-dir[1])*m.sin(dir[0]/180*m.M_PI))             # <<<<<<<<<<<<<<
 *         y = int(90+(90-dir[1])*m.cos(dir[0]/180*m.M_PI))
 *         if x>=0 and x<181 and y>=0 and y<181:
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_dir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = PyNumber_Subtract(__pyx_int_90, __pyx_t_8); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_dir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_int_180); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(M_PI); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = PyNumber_Multiply(__pyx_t_2, __pyx_t_8); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_13); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = PyFloat_FromDouble(sin(__pyx_t_4)); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __pyx_t_8 = PyNumber_Multiply(__pyx_t_9, __pyx_t_13); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_13 = PyNumber_Add(__pyx_int_90, __pyx_t_8); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Int(__pyx_t_13); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_x = __pyx_t_7;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":338
 *         dir = e.AH_direction
 *         x = int(90+(90-dir[1])*m.sin(dir[0]/180*m.M_PI))
 *         y = int(90+(90-dir[1])*m.cos(dir[0]/180*m.M_PI))             # <<<<<<<<<<<<<<
 *         if x>=0 and x<181 and y>=0 and y<181:
 *             source[y, x]+=1
 */
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_dir, 1, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_13 = PyNumber_Subtract(__pyx_int_90, __pyx_t_8); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_13);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = __Pyx_GetItemInt(__pyx_v_dir, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_8 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyNumber_Divide(__pyx_t_8, __pyx_int_180); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble(M_PI); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_2 = PyNumber_Multiply(__pyx_t_9, __pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_4 = __pyx_PyFloat_AsDouble(__pyx_t_2); if (unlikely((__pyx_t_4 == (double)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyFloat_FromDouble(cos(__pyx_t_4)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_8 = PyNumber_Multiply(__pyx_t_13, __pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = PyNumber_Add(__pyx_int_90, __pyx_t_8); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyNumber_Int(__pyx_t_2); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_7 = __Pyx_PyInt_As_int(__pyx_t_8); if (unlikely((__pyx_t_7 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_v_y = __pyx_t_7;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":339
 *         x = int(90+(90-dir[1])*m.sin(dir[0]/180*m.M_PI))
 *         y = int(90+(90-dir[1])*m.cos(dir[0]/180*m.M_PI))
 *         if x>=0 and x<181 and y>=0 and y<181:             # <<<<<<<<<<<<<<
 *             source[y, x]+=1
 * 
 */
    __pyx_t_3 = ((__pyx_v_x >= 0) != 0);
    if (__pyx_t_3) {
      __pyx_t_14 = ((__pyx_v_x < 181) != 0);
      if (__pyx_t_14) {
        __pyx_t_15 = ((__pyx_v_y >= 0) != 0);
        if (__pyx_t_15) {
          __pyx_t_16 = ((__pyx_v_y < 181) != 0);
          __pyx_t_17 = __pyx_t_16;
        } else {
          __pyx_t_17 = __pyx_t_15;
        }
        __pyx_t_15 = __pyx_t_17;
      } else {
        __pyx_t_15 = __pyx_t_14;
      }
      __pyx_t_14 = __pyx_t_15;
    } else {
      __pyx_t_14 = __pyx_t_3;
    }
    if (__pyx_t_14) {

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":340
 *         y = int(90+(90-dir[1])*m.cos(dir[0]/180*m.M_PI))
 *         if x>=0 and x<181 and y>=0 and y<181:
 *             source[y, x]+=1             # <<<<<<<<<<<<<<
 * 
 *     for run in er.runs():
 */
      __pyx_t_7 = __pyx_v_y;
      __pyx_t_18 = __pyx_v_x;
      __pyx_t_19 = -1;
      if (__pyx_t_7 < 0) {
        __pyx_t_7 += __pyx_pybuffernd_source.diminfo[0].shape;
        if (unlikely(__pyx_t_7 < 0)) __pyx_t_19 = 0;
      } else if (unlikely(__pyx_t_7 >= __pyx_pybuffernd_source.diminfo[0].shape)) __pyx_t_19 = 0;
      if (__pyx_t_18 < 0) {
        __pyx_t_18 += __pyx_pybuffernd_source.diminfo[1].shape;
        if (unlikely(__pyx_t_18 < 0)) __pyx_t_19 = 1;
      } else if (unlikely(__pyx_t_18 >= __pyx_pybuffernd_source.diminfo[1].shape)) __pyx_t_19 = 1;
      if (unlikely(__pyx_t_19 != -1)) {
        __Pyx_RaiseBufferIndexError(__pyx_t_19);
        {__pyx_filename = __pyx_f[4]; __pyx_lineno = 340; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_double_t *, __pyx_pybuffernd_source.rcbuffer->pybuffer.buf, __pyx_t_7, __pyx_pybuffernd_source.diminfo[0].strides, __pyx_t_18, __pyx_pybuffernd_source.diminfo[1].strides) += 1.0;
      goto __pyx_L8;
    }
    __pyx_L8:;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":335
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)
 * 
 *     for e in er:             # <<<<<<<<<<<<<<
 *         dir = e.AH_direction
 *         x = int(90+(90-dir[1])*m.sin(dir[0]/180*m.M_PI))
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":342
 *             source[y, x]+=1
 * 
 *     for run in er.runs():             # <<<<<<<<<<<<<<
 *         for i in range(run[0].timestamp, run[-1].timestamp, 60):
 *             JD = ln_get_julian_from_timet(&i)
 */
  __pyx_t_1 = ((struct __pyx_vtabstruct_6czelta_event_reader *)__pyx_v_er->__pyx_vtab)->runs(__pyx_v_er, 0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyList_CheckExact(__pyx_t_1) || PyTuple_CheckExact(__pyx_t_1)) {
    __pyx_t_8 = __pyx_t_1; __Pyx_INCREF(__pyx_t_8); __pyx_t_5 = 0;
    __pyx_t_6 = NULL;
  } else {
    __pyx_t_5 = -1; __pyx_t_8 = PyObject_GetIter(__pyx_t_1); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_6 = Py_TYPE(__pyx_t_8)->tp_iternext;
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  for (;;) {
    if (!__pyx_t_6 && PyList_CheckExact(__pyx_t_8)) {
      if (__pyx_t_5 >= PyList_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyList_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else if (!__pyx_t_6 && PyTuple_CheckExact(__pyx_t_8)) {
      if (__pyx_t_5 >= PyTuple_GET_SIZE(__pyx_t_8)) break;
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_1 = PyTuple_GET_ITEM(__pyx_t_8, __pyx_t_5); __Pyx_INCREF(__pyx_t_1); __pyx_t_5++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #else
      __pyx_t_1 = PySequence_ITEM(__pyx_t_8, __pyx_t_5); __pyx_t_5++; if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      #endif
    } else {
      __pyx_t_1 = __pyx_t_6(__pyx_t_8);
      if (unlikely(!__pyx_t_1)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[4]; __pyx_lineno = 342; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_1);
    }
    __Pyx_XDECREF_SET(__pyx_v_run, __pyx_t_1);
    __pyx_t_1 = 0;

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":343
 * 
 *     for run in er.runs():
 *         for i in range(run[0].timestamp, run[-1].timestamp, 60):             # <<<<<<<<<<<<<<
 *             JD = ln_get_julian_from_timet(&i)
 *             ln_get_lunar_equ_coords_prec(JD , &moon, 0.01)
 */
    __pyx_t_1 = __Pyx_GetItemInt(__pyx_v_run, -1, long, 1, __Pyx_PyInt_From_long, 0, 1, 1); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    __pyx_t_20 = __Pyx_PyInt_As_long(__pyx_t_2); if (unlikely((__pyx_t_20 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_2 = __Pyx_GetItemInt(__pyx_v_run, 0, long, 1, __Pyx_PyInt_From_long, 0, 0, 1); if (unlikely(__pyx_t_2 == NULL)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_timestamp); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    __pyx_t_21 = __Pyx_PyInt_As_long(__pyx_t_1); if (unlikely((__pyx_t_21 == (long)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 343; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
    for (__pyx_t_22 = __pyx_t_21; __pyx_t_22 < __pyx_t_20; __pyx_t_22+=60) {
      __pyx_v_i = __pyx_t_22;

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":344
 *     for run in er.runs():
 *         for i in range(run[0].timestamp, run[-1].timestamp, 60):
 *             JD = ln_get_julian_from_timet(&i)             # <<<<<<<<<<<<<<
 *             ln_get_lunar_equ_coords_prec(JD , &moon, 0.01)
 *             ln_get_hrz_from_equ(&moon, &station, JD, &ob)
 */
      __pyx_v_JD = ln_get_julian_from_timet((&__pyx_v_i));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":345
 *         for i in range(run[0].timestamp, run[-1].timestamp, 60):
 *             JD = ln_get_julian_from_timet(&i)
 *             ln_get_lunar_equ_coords_prec(JD , &moon, 0.01)             # <<<<<<<<<<<<<<
 *             ln_get_hrz_from_equ(&moon, &station, JD, &ob)
 *             x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 */
      ln_get_lunar_equ_coords_prec(__pyx_v_JD, (&__pyx_v_moon), 0.01);

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":346
 *             JD = ln_get_julian_from_timet(&i)
 *             ln_get_lunar_equ_coords_prec(JD , &moon, 0.01)
 *             ln_get_hrz_from_equ(&moon, &station, JD, &ob)             # <<<<<<<<<<<<<<
 *             x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 *             y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))
 */
      ln_get_hrz_from_equ((&__pyx_v_moon), (&__pyx_v_station), __pyx_v_JD, (&__pyx_v_ob));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":347
 *             ln_get_lunar_equ_coords_prec(JD , &moon, 0.01)
 *             ln_get_hrz_from_equ(&moon, &station, JD, &ob)
 *             x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))             # <<<<<<<<<<<<<<
 *             y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))
 *             #for j in range(181):
 */
      __pyx_v_x = ((int)(90.0 + ((90.0 - __pyx_v_ob.alt) * sin(((__pyx_v_ob.az / 180.0) * M_PI)))));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":348
 *             ln_get_hrz_from_equ(&moon, &station, JD, &ob)
 *             x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 *             y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))             # <<<<<<<<<<<<<<
 *             #for j in range(181):
 *             #    for g in range(181):
 */
      __pyx_v_y = ((int)(90.0 + ((90.0 - __pyx_v_ob.alt) * cos(((__pyx_v_ob.az / 180.0) * M_PI)))));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":354
 *             #            expected[j+y, g+x] += source[j, g]/measure_time*60
 * 
 *             ln_get_equ_from_hrz(&ob, &station, JD, &zenit)             # <<<<<<<<<<<<<<
 *             if ln_get_angular_separation(&zenit, &moon)>90:
 *                 continue
 */
      ln_get_equ_from_hrz((&__pyx_v_ob), (&__pyx_v_station), __pyx_v_JD, (&__pyx_v_zenit));

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":355
 * 
 *             ln_get_equ_from_hrz(&ob, &station, JD, &zenit)
 *             if ln_get_angular_separation(&zenit, &moon)>90:             # <<<<<<<<<<<<<<
 *                 continue
 * 
 */
      __pyx_t_14 = ((ln_get_angular_separation((&__pyx_v_zenit), (&__pyx_v_moon)) > 90.0) != 0);
      if (__pyx_t_14) {

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":356
 *             ln_get_equ_from_hrz(&ob, &station, JD, &zenit)
 *             if ln_get_angular_separation(&zenit, &moon)>90:
 *                 continue             # <<<<<<<<<<<<<<
 * 
 *             while timestamps[k]<i+60:
 */
        goto __pyx_L11_continue;
      }

      /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":358
 *                 continue
 * 
 *             while timestamps[k]<i+60:             # <<<<<<<<<<<<<<
 *                 e_dir.ra = RA[k]/m.M_PI*180
 *                 e_dir.dec = D[k]/m.M_PI*180
 */
      while (1) {
        __pyx_t_14 = (((__pyx_v_timestamps[__pyx_v_k]) < (__pyx_v_i + 60)) != 0);
        if (!__pyx_t_14) break;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":359
 * 
 *             while timestamps[k]<i+60:
 *                 e_dir.ra = RA[k]/m.M_PI*180             # <<<<<<<<<<<<<<
 *                 e_dir.dec = D[k]/m.M_PI*180
 *                 ob.alt = 90-ln_get_angular_separation(&moon, &e_dir)
 */
        __pyx_t_4 = (__pyx_v_RA[__pyx_v_k]);
        if (unlikely(M_PI == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_e_dir.ra = ((__pyx_t_4 / M_PI) * 180.0);

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":360
 *             while timestamps[k]<i+60:
 *                 e_dir.ra = RA[k]/m.M_PI*180
 *                 e_dir.dec = D[k]/m.M_PI*180             # <<<<<<<<<<<<<<
 *                 ob.alt = 90-ln_get_angular_separation(&moon, &e_dir)
 *                 ob.az = ln_get_rel_posn_angle(&moon, &e_dir)
 */
        __pyx_t_4 = (__pyx_v_D[__pyx_v_k]);
        if (unlikely(M_PI == 0)) {
          #ifdef WITH_THREAD
          PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();
          #endif
          PyErr_SetString(PyExc_ZeroDivisionError, "float division");
          #ifdef WITH_THREAD
          PyGILState_Release(__pyx_gilstate_save);
          #endif
          {__pyx_filename = __pyx_f[4]; __pyx_lineno = 360; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        __pyx_v_e_dir.dec = ((__pyx_t_4 / M_PI) * 180.0);

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":361
 *                 e_dir.ra = RA[k]/m.M_PI*180
 *                 e_dir.dec = D[k]/m.M_PI*180
 *                 ob.alt = 90-ln_get_angular_separation(&moon, &e_dir)             # <<<<<<<<<<<<<<
 *                 ob.az = ln_get_rel_posn_angle(&moon, &e_dir)
 *                 #ln_get_hrz_from_equ(&e_dir, <ln_lnlat_posn*>&moon, JD, &ob)
 */
        __pyx_v_ob.alt = (90.0 - ln_get_angular_separation((&__pyx_v_moon), (&__pyx_v_e_dir)));

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":362
 *                 e_dir.dec = D[k]/m.M_PI*180
 *                 ob.alt = 90-ln_get_angular_separation(&moon, &e_dir)
 *                 ob.az = ln_get_rel_posn_angle(&moon, &e_dir)             # <<<<<<<<<<<<<<
 *                 #ln_get_hrz_from_equ(&e_dir, <ln_lnlat_posn*>&moon, JD, &ob)
 *                 if  ob.alt <= 0:
 */
        __pyx_v_ob.az = ln_get_rel_posn_angle((&__pyx_v_moon), (&__pyx_v_e_dir));

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":364
 *                 ob.az = ln_get_rel_posn_angle(&moon, &e_dir)
 *                 #ln_get_hrz_from_equ(&e_dir, <ln_lnlat_posn*>&moon, JD, &ob)
 *                 if  ob.alt <= 0:             # <<<<<<<<<<<<<<
 *                     k+=1
 *                     continue
 */
        __pyx_t_14 = ((__pyx_v_ob.alt <= 0.0) != 0);
        if (__pyx_t_14) {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":365
 *                 #ln_get_hrz_from_equ(&e_dir, <ln_lnlat_posn*>&moon, JD, &ob)
 *                 if  ob.alt <= 0:
 *                     k+=1             # <<<<<<<<<<<<<<
 *                     continue
 *                 x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 */
          __pyx_v_k = (__pyx_v_k + 1);

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":366
 *                 if  ob.alt <= 0:
 *                     k+=1
 *                     continue             # <<<<<<<<<<<<<<
 *                 x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 *                 y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))
 */
          goto __pyx_L14_continue;
        }

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":367
 *                     k+=1
 *                     continue
 *                 x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))             # <<<<<<<<<<<<<<
 *                 y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))
 *                 if x>=0 and x<181 and y>=0 and y<181:
 */
        __pyx_v_x = ((int)(90.0 + ((90.0 - __pyx_v_ob.alt) * sin(((__pyx_v_ob.az / 180.0) * M_PI)))));

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":368
 *                     continue
 *                 x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 *                 y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))             # <<<<<<<<<<<<<<
 *                 if x>=0 and x<181 and y>=0 and y<181:
 *                     data[y, x]+=1
 */
        __pyx_v_y = ((int)(90.0 + ((90.0 - __pyx_v_ob.alt) * cos(((__pyx_v_ob.az / 180.0) * M_PI)))));

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":369
 *                 x = int(90+(90-ob.alt)*m.sin(ob.az/180*m.M_PI))
 *                 y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))
 *                 if x>=0 and x<181 and y>=0 and y<181:             # <<<<<<<<<<<<<<
 *                     data[y, x]+=1
 *                     relative_alt.push_back(ob.alt/180*m.M_PI)
 */
        __pyx_t_14 = ((__pyx_v_x >= 0) != 0);
        if (__pyx_t_14) {
          __pyx_t_3 = ((__pyx_v_x < 181) != 0);
          if (__pyx_t_3) {
            __pyx_t_15 = ((__pyx_v_y >= 0) != 0);
            if (__pyx_t_15) {
              __pyx_t_17 = ((__pyx_v_y < 181) != 0);
              __pyx_t_16 = __pyx_t_17;
            } else {
              __pyx_t_16 = __pyx_t_15;
            }
            __pyx_t_15 = __pyx_t_16;
          } else {
            __pyx_t_15 = __pyx_t_3;
          }
          __pyx_t_3 = __pyx_t_15;
        } else {
          __pyx_t_3 = __pyx_t_14;
        }
        if (__pyx_t_3) {

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":370
 *                 y = int(90+(90-ob.alt)*m.cos(ob.az/180*m.M_PI))
 *                 if x>=0 and x<181 and y>=0 and y<181:
 *                     data[y, x]+=1             # <<<<<<<<<<<<<<
 *                     relative_alt.push_back(ob.alt/180*m.M_PI)
 *                     relative_az.push_back(ob.az/180*m.M_PI)
 */
          __pyx_t_19 = __pyx_v_y;
          __pyx_t_23 = __pyx_v_x;
          __pyx_t_24 = -1;
          if (__pyx_t_19 < 0) {
            __pyx_t_19 += __pyx_pybuffernd_data.diminfo[0].shape;
            if (unlikely(__pyx_t_19 < 0)) __pyx_t_24 = 0;
          } else if (unlikely(__pyx_t_19 >= __pyx_pybuffernd_data.diminfo[0].shape)) __pyx_t_24 = 0;
          if (__pyx_t_23 < 0) {
            __pyx_t_23 += __pyx_pybuffernd_data.diminfo[1].shape;
            if (unlikely(__pyx_t_23 < 0)) __pyx_t_24 = 1;
          } else if (unlikely(__pyx_t_23 >= __pyx_pybuffernd_data.diminfo[1].shape)) __pyx_t_24 = 1;
          if (unlikely(__pyx_t_24 != -1)) {
            __Pyx_RaiseBufferIndexError(__pyx_t_24);
            {__pyx_filename = __pyx_f[4]; __pyx_lineno = 370; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
          }
          *__Pyx_BufPtrStrided2d(__pyx_t_5numpy_int_t *, __pyx_pybuffernd_data.rcbuffer->pybuffer.buf, __pyx_t_19, __pyx_pybuffernd_data.diminfo[0].strides, __pyx_t_23, __pyx_pybuffernd_data.diminfo[1].strides) += 1;

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":371
 *                 if x>=0 and x<181 and y>=0 and y<181:
 *                     data[y, x]+=1
 *                     relative_alt.push_back(ob.alt/180*m.M_PI)             # <<<<<<<<<<<<<<
 *                     relative_az.push_back(ob.az/180*m.M_PI)
 *                 k+=1
 */
          __pyx_v_relative_alt.push_back(((__pyx_v_ob.alt / 180.0) * M_PI));

          /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":372
 *                     data[y, x]+=1
 *                     relative_alt.push_back(ob.alt/180*m.M_PI)
 *                     relative_az.push_back(ob.az/180*m.M_PI)             # <<<<<<<<<<<<<<
 *                 k+=1
 * 
 */
          __pyx_v_relative_az.push_back(((__pyx_v_ob.az / 180.0) * M_PI));
          goto __pyx_L17;
        }
        __pyx_L17:;

        /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":373
 *                     relative_alt.push_back(ob.alt/180*m.M_PI)
 *                     relative_az.push_back(ob.az/180*m.M_PI)
 *                 k+=1             # <<<<<<<<<<<<<<
 * 
 * 
 */
        __pyx_v_k = (__pyx_v_k + 1);
        __pyx_L14_continue:;
      }
      __pyx_L11_continue:;
    }

    /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":342
 *             source[y, x]+=1
 * 
 *     for run in er.runs():             # <<<<<<<<<<<<<<
 *         for i in range(run[0].timestamp, run[-1].timestamp, 60):
 *             JD = ln_get_julian_from_timet(&i)
 */
  }
  __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":376
 * 
 * 
 *     return {             # <<<<<<<<<<<<<<
 *         "data":data,
 *         "data_error":np.sqrt(data),
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_8 = PyDict_New(); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_8);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":377
 * 
 *     return {
 *         "data":data,             # <<<<<<<<<<<<<<
 *         "data_error":np.sqrt(data),
 *         "source":source,
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_data, ((PyObject *)__pyx_v_data)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":378
 *     return {
 *         "data":data,
 *         "data_error":np.sqrt(data),             # <<<<<<<<<<<<<<
 *         "source":source,
 *         "source_error":np.sqrt(source),
 */
  __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(((PyObject *)__pyx_v_data));
  PyTuple_SET_ITEM(__pyx_t_1, 0, ((PyObject *)__pyx_v_data));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_data));
  __pyx_t_13 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 378; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_data_error, __pyx_t_13) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":379
 *         "data":data,
 *         "data_error":np.sqrt(data),
 *         "source":source,             # <<<<<<<<<<<<<<
 *         "source_error":np.sqrt(source),
 *         "expected":expected
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_source, ((PyObject *)__pyx_v_source)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":380
 *         "data_error":np.sqrt(data),
 *         "source":source,
 *         "source_error":np.sqrt(source),             # <<<<<<<<<<<<<<
 *         "expected":expected
 *     }
 */
  __pyx_t_13 = __Pyx_GetModuleGlobalName(__pyx_n_s_np); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_13, __pyx_n_s_sqrt); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  __pyx_t_13 = PyTuple_New(1); if (unlikely(!__pyx_t_13)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_13);
  __Pyx_INCREF(((PyObject *)__pyx_v_source));
  PyTuple_SET_ITEM(__pyx_t_13, 0, ((PyObject *)__pyx_v_source));
  __Pyx_GIVEREF(((PyObject *)__pyx_v_source));
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_t_13, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 380; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_13); __pyx_t_13 = 0;
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_source_error, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":382
 *         "source_error":np.sqrt(source),
 *         "expected":expected
 *     }             # <<<<<<<<<<<<<<
 * 
 * 
 */
  if (PyDict_SetItem(__pyx_t_8, __pyx_n_s_expected, ((PyObject *)__pyx_v_expected)) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 376; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_t_8;
  __pyx_t_8 = 0;
  goto __pyx_L0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":294
 * 
 * #closed
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):             # <<<<<<<<<<<<<<
 *     cdef event_reader er = event_reader(path)
 *     def f(e):
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_13);
  { PyObject *__pyx_type, *__pyx_value, *__pyx_tb;
    __Pyx_ErrFetch(&__pyx_type, &__pyx_value, &__pyx_tb);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_expected.rcbuffer->pybuffer);
    __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_source.rcbuffer->pybuffer);
  __Pyx_ErrRestore(__pyx_type, __pyx_value, __pyx_tb);}
  __Pyx_AddTraceback("czelta.moon_check", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  goto __pyx_L2;
  __pyx_L0:;
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_data.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_expected.rcbuffer->pybuffer);
  __Pyx_SafeReleaseBuffer(&__pyx_pybuffernd_source.rcbuffer->pybuffer);
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_er);
  __Pyx_XDECREF(__pyx_v_f);
  __Pyx_XDECREF((PyObject *)__pyx_v_e);
  __Pyx_XDECREF(__pyx_v_dir);
  __Pyx_XDECREF((PyObject *)__pyx_v_data);
  __Pyx_XDECREF((PyObject *)__pyx_v_source);
  __Pyx_XDECREF((PyObject *)__pyx_v_expected);
  __Pyx_XDECREF(__pyx_v_run);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

/* Python wrapper */
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags); /*proto*/
static CYTHON_UNUSED int __pyx_pw_5numpy_7ndarray_1__getbuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__getbuffer__ (wrapper)", 0);
  __pyx_r = __pyx_pf_5numpy_7ndarray___getbuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info), ((int)__pyx_v_flags));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_5numpy_7ndarray___getbuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info, int __pyx_v_flags) {
  int __pyx_v_copy_shape;
  int __pyx_v_i;
  int __pyx_v_ndim;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  int __pyx_v_t;
  char *__pyx_v_f;
  PyArray_Descr *__pyx_v_descr = 0;
  int __pyx_v_offset;
  int __pyx_v_hasfields;
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  char *__pyx_t_9;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__getbuffer__", 0);
  if (__pyx_v_info != NULL) {
    __pyx_v_info->obj = Py_None; __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(__pyx_v_info->obj);
  }

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":200
 *             # of flags
 * 
 *             if info == NULL: return             # <<<<<<<<<<<<<<
 * 
 *             cdef int copy_shape, i, ndim
 */
  __pyx_t_1 = ((__pyx_v_info == NULL) != 0);
  if (__pyx_t_1) {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":203
 * 
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":204
 *             cdef int copy_shape, i, ndim
 *             cdef int endian_detector = 1
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 * 
 *             ndim = PyArray_NDIM(self)
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":206
 *             cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 * 
 *             ndim = PyArray_NDIM(self)             # <<<<<<<<<<<<<<
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_v_ndim = PyArray_NDIM(__pyx_v_self);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":208
 *             ndim = PyArray_NDIM(self)
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 copy_shape = 1
 *             else:
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":209
 * 
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 copy_shape = 1             # <<<<<<<<<<<<<<
 *             else:
 *                 copy_shape = 0
 */
    __pyx_v_copy_shape = 1;
    goto __pyx_L4;
  }
  /*else*/ {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":211
 *                 copy_shape = 1
 *             else:
 *                 copy_shape = 0             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 */
    __pyx_v_copy_shape = 0;
  }
  __pyx_L4:;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":213
 *                 copy_shape = 0
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")
 */
  __pyx_t_1 = (((__pyx_v_flags & PyBUF_C_CONTIGUOUS) == PyBUF_C_CONTIGUOUS) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":214
 * 
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 */
    __pyx_t_2 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_C_CONTIGUOUS) != 0)) != 0);
    __pyx_t_3 = __pyx_t_2;
  } else {
    __pyx_t_3 = __pyx_t_1;
  }
  if (__pyx_t_3) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__29, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[6]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":217
 *                 raise ValueError(u"ndarray is not C contiguous")
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)             # <<<<<<<<<<<<<<
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 */
  __pyx_t_3 = (((__pyx_v_flags & PyBUF_F_CONTIGUOUS) == PyBUF_F_CONTIGUOUS) != 0);
  if (__pyx_t_3) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":218
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):             # <<<<<<<<<<<<<<
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 */
    __pyx_t_1 = ((!(PyArray_CHKFLAGS(__pyx_v_self, NPY_F_CONTIGUOUS) != 0)) != 0);
    __pyx_t_2 = __pyx_t_1;
  } else {
    __pyx_t_2 = __pyx_t_3;
  }
  if (__pyx_t_2) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
    __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__30, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __Pyx_Raise(__pyx_t_4, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    {__pyx_filename = __pyx_f[6]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":221
 *                 raise ValueError(u"ndarray is not Fortran contiguous")
 * 
 *             info.buf = PyArray_DATA(self)             # <<<<<<<<<<<<<<
 *             info.ndim = ndim
 *             if copy_shape:
 */
  __pyx_v_info->buf = PyArray_DATA(__pyx_v_self);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":222
 * 
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim             # <<<<<<<<<<<<<<
 *             if copy_shape:
 *                 # Allocate new buffer for strides and shape info.
 */
  __pyx_v_info->ndim = __pyx_v_ndim;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":223
 *             info.buf = PyArray_DATA(self)
 *             info.ndim = ndim
 *             if copy_shape:             # <<<<<<<<<<<<<<
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 */
  __pyx_t_2 = (__pyx_v_copy_shape != 0);
  if (__pyx_t_2) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":226
 *                 # Allocate new buffer for strides and shape info.
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)             # <<<<<<<<<<<<<<
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 */
    __pyx_v_info->strides = ((Py_ssize_t *)malloc((((sizeof(Py_ssize_t)) * ((size_t)__pyx_v_ndim)) * 2)));

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":227
 *                 # This is allocated as one block, strides first.
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim             # <<<<<<<<<<<<<<
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 */
    __pyx_v_info->shape = (__pyx_v_info->strides + __pyx_v_ndim);

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":228
 *                 info.strides = <Py_ssize_t*>stdlib.malloc(sizeof(Py_ssize_t) * <size_t>ndim * 2)
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):             # <<<<<<<<<<<<<<
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 */
    __pyx_t_5 = __pyx_v_ndim;
    for (__pyx_t_6 = 0; __pyx_t_6 < __pyx_t_5; __pyx_t_6+=1) {
      __pyx_v_i = __pyx_t_6;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":229
 *                 info.shape = info.strides + ndim
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]             # <<<<<<<<<<<<<<
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 */
      (__pyx_v_info->strides[__pyx_v_i]) = (PyArray_STRIDES(__pyx_v_self)[__pyx_v_i]);

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":230
 *                 for i in range(ndim):
 *                     info.strides[i] = PyArray_STRIDES(self)[i]
 *                     info.shape[i] = PyArray_DIMS(self)[i]             # <<<<<<<<<<<<<<
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 */
      (__pyx_v_info->shape[__pyx_v_i]) = (PyArray_DIMS(__pyx_v_self)[__pyx_v_i]);
    }
    goto __pyx_L7;
  }
  /*else*/ {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":232
 *                     info.shape[i] = PyArray_DIMS(self)[i]
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)             # <<<<<<<<<<<<<<
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 */
    __pyx_v_info->strides = ((Py_ssize_t *)PyArray_STRIDES(__pyx_v_self));

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":233
 *             else:
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)             # <<<<<<<<<<<<<<
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 */
    __pyx_v_info->shape = ((Py_ssize_t *)PyArray_DIMS(__pyx_v_self));
  }
  __pyx_L7:;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":234
 *                 info.strides = <Py_ssize_t*>PyArray_STRIDES(self)
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL             # <<<<<<<<<<<<<<
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 */
  __pyx_v_info->suboffsets = NULL;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":235
 *                 info.shape = <Py_ssize_t*>PyArray_DIMS(self)
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)             # <<<<<<<<<<<<<<
 *             info.readonly = not PyArray_ISWRITEABLE(self)
 * 
 */
  __pyx_v_info->itemsize = PyArray_ITEMSIZE(__pyx_v_self);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":236
 *             info.suboffsets = NULL
 *             info.itemsize = PyArray_ITEMSIZE(self)
 *             info.readonly = not PyArray_ISWRITEABLE(self)             # <<<<<<<<<<<<<<
 * 
 *             cdef int t
 */
  __pyx_v_info->readonly = (!(PyArray_ISWRITEABLE(__pyx_v_self) != 0));

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":239
 * 
 *             cdef int t
 *             cdef char* f = NULL             # <<<<<<<<<<<<<<
 *             cdef dtype descr = self.descr
 *             cdef list stack
 */
  __pyx_v_f = NULL;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":240
 *             cdef int t
 *             cdef char* f = NULL
 *             cdef dtype descr = self.descr             # <<<<<<<<<<<<<<
 *             cdef list stack
 *             cdef int offset
 */
  __pyx_t_4 = ((PyObject *)__pyx_v_self->descr);
  __Pyx_INCREF(__pyx_t_4);
  __pyx_v_descr = ((PyArray_Descr *)__pyx_t_4);
  __pyx_t_4 = 0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":244
 *             cdef int offset
 * 
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields and not copy_shape:
 */
  __pyx_v_hasfields = PyDataType_HASFIELDS(__pyx_v_descr);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":246
 *             cdef bint hasfields = PyDataType_HASFIELDS(descr)
 * 
 *             if not hasfields and not copy_shape:             # <<<<<<<<<<<<<<
 *                 # do not call releasebuffer
 *                 info.obj = None
 */
  __pyx_t_2 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_2) {
    __pyx_t_3 = ((!(__pyx_v_copy_shape != 0)) != 0);
    __pyx_t_1 = __pyx_t_3;
  } else {
    __pyx_t_1 = __pyx_t_2;
  }
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":248
 *             if not hasfields and not copy_shape:
 *                 # do not call releasebuffer
 *                 info.obj = None             # <<<<<<<<<<<<<<
 *             else:
 *                 # need to call releasebuffer
 */
    __Pyx_INCREF(Py_None);
    __Pyx_GIVEREF(Py_None);
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = Py_None;
    goto __pyx_L10;
  }
  /*else*/ {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":251
 *             else:
 *                 # need to call releasebuffer
 *                 info.obj = self             # <<<<<<<<<<<<<<
 * 
 *             if not hasfields:
 */
    __Pyx_INCREF(((PyObject *)__pyx_v_self));
    __Pyx_GIVEREF(((PyObject *)__pyx_v_self));
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj);
    __pyx_v_info->obj = ((PyObject *)__pyx_v_self);
  }
  __pyx_L10:;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":253
 *                 info.obj = self
 * 
 *             if not hasfields:             # <<<<<<<<<<<<<<
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 */
  __pyx_t_1 = ((!(__pyx_v_hasfields != 0)) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":254
 * 
 *             if not hasfields:
 *                 t = descr.type_num             # <<<<<<<<<<<<<<
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 */
    __pyx_t_5 = __pyx_v_descr->type_num;
    __pyx_v_t = __pyx_t_5;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":255
 *             if not hasfields:
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_1 = ((__pyx_v_descr->byteorder == '>') != 0);
    if (__pyx_t_1) {
      __pyx_t_2 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_2 = __pyx_t_1;
    }
    if (!__pyx_t_2) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":256
 *                 t = descr.type_num
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 */
      __pyx_t_1 = ((__pyx_v_descr->byteorder == '<') != 0);
      if (__pyx_t_1) {
        __pyx_t_3 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_7 = __pyx_t_3;
      } else {
        __pyx_t_7 = __pyx_t_1;
      }
      __pyx_t_1 = __pyx_t_7;
    } else {
      __pyx_t_1 = __pyx_t_2;
    }
    if (__pyx_t_1) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
      __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__31, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_Raise(__pyx_t_4, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
    switch (__pyx_v_t) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":258
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 */
      case NPY_BYTE:
      __pyx_v_f = __pyx_k_b;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":259
 *                     raise ValueError(u"Non-native byte order not supported")
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 */
      case NPY_UBYTE:
      __pyx_v_f = __pyx_k_B;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":260
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 */
      case NPY_SHORT:
      __pyx_v_f = __pyx_k_h;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":261
 *                 elif t == NPY_UBYTE:       f = "B"
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 */
      case NPY_USHORT:
      __pyx_v_f = __pyx_k_H;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":262
 *                 elif t == NPY_SHORT:       f = "h"
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 */
      case NPY_INT:
      __pyx_v_f = __pyx_k_i;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":263
 *                 elif t == NPY_USHORT:      f = "H"
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 */
      case NPY_UINT:
      __pyx_v_f = __pyx_k_I;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":264
 *                 elif t == NPY_INT:         f = "i"
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 */
      case NPY_LONG:
      __pyx_v_f = __pyx_k_l;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":265
 *                 elif t == NPY_UINT:        f = "I"
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 */
      case NPY_ULONG:
      __pyx_v_f = __pyx_k_L;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":266
 *                 elif t == NPY_LONG:        f = "l"
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 */
      case NPY_LONGLONG:
      __pyx_v_f = __pyx_k_q;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":267
 *                 elif t == NPY_ULONG:       f = "L"
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 */
      case NPY_ULONGLONG:
      __pyx_v_f = __pyx_k_Q;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":268
 *                 elif t == NPY_LONGLONG:    f = "q"
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 */
      case NPY_FLOAT:
      __pyx_v_f = __pyx_k_f;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":269
 *                 elif t == NPY_ULONGLONG:   f = "Q"
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 */
      case NPY_DOUBLE:
      __pyx_v_f = __pyx_k_d;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":270
 *                 elif t == NPY_FLOAT:       f = "f"
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 */
      case NPY_LONGDOUBLE:
      __pyx_v_f = __pyx_k_g;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":271
 *                 elif t == NPY_DOUBLE:      f = "d"
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 */
      case NPY_CFLOAT:
      __pyx_v_f = __pyx_k_Zf;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":272
 *                 elif t == NPY_LONGDOUBLE:  f = "g"
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"
 */
      case NPY_CDOUBLE:
      __pyx_v_f = __pyx_k_Zd;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":273
 *                 elif t == NPY_CFLOAT:      f = "Zf"
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"             # <<<<<<<<<<<<<<
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 */
      case NPY_CLONGDOUBLE:
      __pyx_v_f = __pyx_k_Zg;
      break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":274
 *                 elif t == NPY_CDOUBLE:     f = "Zd"
 *                 elif t == NPY_CLONGDOUBLE: f = "Zg"
 *                 elif t == NPY_OBJECT:      f = "O"             # <<<<<<<<<<<<<<
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      case NPY_OBJECT:
      __pyx_v_f = __pyx_k_O;
      break;
      default:

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":276
 *                 elif t == NPY_OBJECT:      f = "O"
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *                 info.format = f
 *                 return
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_t); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_8 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_t_4); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_8);
      __Pyx_GIVEREF(__pyx_t_8);
      __pyx_t_8 = 0;
      __pyx_t_8 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __Pyx_Raise(__pyx_t_8, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      break;
    }

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":277
 *                 else:
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f             # <<<<<<<<<<<<<<
 *                 return
 *             else:
 */
    __pyx_v_info->format = __pyx_v_f;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":278
 *                     raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *                 info.format = f
 *                 return             # <<<<<<<<<<<<<<
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 */
    __pyx_r = 0;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":280
 *                 return
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)             # <<<<<<<<<<<<<<
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 */
    __pyx_v_info->format = ((char *)malloc(255));

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":281
 *             else:
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment             # <<<<<<<<<<<<<<
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,
 */
    (__pyx_v_info->format[0]) = '^';

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":282
 *                 info.format = <char*>stdlib.malloc(_buffer_format_string_len)
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0             # <<<<<<<<<<<<<<
 *                 f = _util_dtypestring(descr, info.format + 1,
 *                                       info.format + _buffer_format_string_len,
 */
    __pyx_v_offset = 0;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":283
 *                 info.format[0] = c'^' # Native data types, manual alignment
 *                 offset = 0
 *                 f = _util_dtypestring(descr, info.format + 1,             # <<<<<<<<<<<<<<
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 */
    __pyx_t_9 = __pyx_f_5numpy__util_dtypestring(__pyx_v_descr, (__pyx_v_info->format + 1), (__pyx_v_info->format + 255), (&__pyx_v_offset)); if (unlikely(__pyx_t_9 == NULL)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_f = __pyx_t_9;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":286
 *                                       info.format + _buffer_format_string_len,
 *                                       &offset)
 *                 f[0] = c'\0' # Terminate format string             # <<<<<<<<<<<<<<
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 */
    (__pyx_v_f[0]) = '\x00';
  }

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":194
 *         # experimental exception made for __getbuffer__ and __releasebuffer__
 *         # -- the details of this may change.
 *         def __getbuffer__(ndarray self, Py_buffer* info, int flags):             # <<<<<<<<<<<<<<
 *             # This implementation of getbuffer is geared towards Cython
 *             # requirements, and does not yet fullfill the PEP.
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_AddTraceback("numpy.ndarray.__getbuffer__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  if (__pyx_v_info != NULL && __pyx_v_info->obj != NULL) {
    __Pyx_GOTREF(__pyx_v_info->obj);
    __Pyx_DECREF(__pyx_v_info->obj); __pyx_v_info->obj = NULL;
  }
  goto __pyx_L2;
  __pyx_L0:;
  if (__pyx_v_info != NULL && __pyx_v_info->obj == Py_None) {
    __Pyx_GOTREF(Py_None);
    __Pyx_DECREF(Py_None); __pyx_v_info->obj = NULL;
  }
  __pyx_L2:;
  __Pyx_XDECREF((PyObject *)__pyx_v_descr);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

/* Python wrapper */
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info); /*proto*/
static CYTHON_UNUSED void __pyx_pw_5numpy_7ndarray_3__releasebuffer__(PyObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__releasebuffer__ (wrapper)", 0);
  __pyx_pf_5numpy_7ndarray_2__releasebuffer__(((PyArrayObject *)__pyx_v_self), ((Py_buffer *)__pyx_v_info));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_5numpy_7ndarray_2__releasebuffer__(PyArrayObject *__pyx_v_self, Py_buffer *__pyx_v_info) {
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("__releasebuffer__", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":289
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 */
  __pyx_t_1 = (PyArray_HASFIELDS(__pyx_v_self) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":290
 *         def __releasebuffer__(ndarray self, Py_buffer* info):
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)             # <<<<<<<<<<<<<<
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)
 */
    free(__pyx_v_info->format);
    goto __pyx_L3;
  }
  __pyx_L3:;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":291
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):             # <<<<<<<<<<<<<<
 *                 stdlib.free(info.strides)
 *                 # info.shape was stored after info.strides in the same block
 */
  __pyx_t_1 = (((sizeof(npy_intp)) != (sizeof(Py_ssize_t))) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":292
 *                 stdlib.free(info.format)
 *             if sizeof(npy_intp) != sizeof(Py_ssize_t):
 *                 stdlib.free(info.strides)             # <<<<<<<<<<<<<<
 *                 # info.shape was stored after info.strides in the same block
 * 
 */
    free(__pyx_v_info->strides);
    goto __pyx_L4;
  }
  __pyx_L4:;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":288
 *                 f[0] = c'\0' # Terminate format string
 * 
 *         def __releasebuffer__(ndarray self, Py_buffer* info):             # <<<<<<<<<<<<<<
 *             if PyArray_HASFIELDS(self):
 *                 stdlib.free(info.format)
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew1(PyObject *__pyx_v_a) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew1", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":769
 * 
 * cdef inline object PyArray_MultiIterNew1(a):
 *     return PyArray_MultiIterNew(1, <void*>a)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(1, ((void *)__pyx_v_a)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 769; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":768
 * ctypedef npy_cdouble     complex_t
 * 
 * cdef inline object PyArray_MultiIterNew1(a):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew1", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew2(PyObject *__pyx_v_a, PyObject *__pyx_v_b) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew2", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":772
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(2, ((void *)__pyx_v_a), ((void *)__pyx_v_b)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 772; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":771
 *     return PyArray_MultiIterNew(1, <void*>a)
 * 
 * cdef inline object PyArray_MultiIterNew2(a, b):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew2", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew3(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew3", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":775
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(3, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 775; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":774
 *     return PyArray_MultiIterNew(2, <void*>a, <void*>b)
 * 
 * cdef inline object PyArray_MultiIterNew3(a, b, c):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew3", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew4(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew4", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":778
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)             # <<<<<<<<<<<<<<
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(4, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 778; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":777
 *     return PyArray_MultiIterNew(3, <void*>a, <void*>b, <void*> c)
 * 
 * cdef inline object PyArray_MultiIterNew4(a, b, c, d):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew4", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_PyArray_MultiIterNew5(PyObject *__pyx_v_a, PyObject *__pyx_v_b, PyObject *__pyx_v_c, PyObject *__pyx_v_d, PyObject *__pyx_v_e) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("PyArray_MultiIterNew5", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":781
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)             # <<<<<<<<<<<<<<
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyArray_MultiIterNew(5, ((void *)__pyx_v_a), ((void *)__pyx_v_b), ((void *)__pyx_v_c), ((void *)__pyx_v_d), ((void *)__pyx_v_e)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 781; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":780
 *     return PyArray_MultiIterNew(4, <void*>a, <void*>b, <void*>c, <void*> d)
 * 
 * cdef inline object PyArray_MultiIterNew5(a, b, c, d, e):             # <<<<<<<<<<<<<<
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("numpy.PyArray_MultiIterNew5", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

static CYTHON_INLINE char *__pyx_f_5numpy__util_dtypestring(PyArray_Descr *__pyx_v_descr, char *__pyx_v_f, char *__pyx_v_end, int *__pyx_v_offset) {
  PyArray_Descr *__pyx_v_child = 0;
  int __pyx_v_endian_detector;
  int __pyx_v_little_endian;
  PyObject *__pyx_v_fields = 0;
  PyObject *__pyx_v_childname = NULL;
  PyObject *__pyx_v_new_offset = NULL;
  PyObject *__pyx_v_t = NULL;
  char *__pyx_r;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_t_5;
  int __pyx_t_6;
  int __pyx_t_7;
  int __pyx_t_8;
  int __pyx_t_9;
  long __pyx_t_10;
  char *__pyx_t_11;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_util_dtypestring", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":790
 *     cdef int delta_offset
 *     cdef tuple i
 *     cdef int endian_detector = 1             # <<<<<<<<<<<<<<
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)
 *     cdef tuple fields
 */
  __pyx_v_endian_detector = 1;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":791
 *     cdef tuple i
 *     cdef int endian_detector = 1
 *     cdef bint little_endian = ((<char*>&endian_detector)[0] != 0)             # <<<<<<<<<<<<<<
 *     cdef tuple fields
 * 
 */
  __pyx_v_little_endian = ((((char *)(&__pyx_v_endian_detector))[0]) != 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  if (unlikely(__pyx_v_descr->names == Py_None)) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
    {__pyx_filename = __pyx_f[6]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_t_1 = __pyx_v_descr->names; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
  for (;;) {
    if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
    #if CYTHON_COMPILING_IN_CPYTHON
    __pyx_t_3 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_3); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #else
    __pyx_t_3 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 794; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    #endif
    __Pyx_XDECREF_SET(__pyx_v_childname, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":795
 * 
 *     for childname in descr.names:
 *         fields = descr.fields[childname]             # <<<<<<<<<<<<<<
 *         child, new_offset = fields
 * 
 */
    __pyx_t_3 = PyObject_GetItem(__pyx_v_descr->fields, __pyx_v_childname); if (unlikely(__pyx_t_3 == NULL)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
    __Pyx_GOTREF(__pyx_t_3);
    if (!(likely(PyTuple_CheckExact(__pyx_t_3))||((__pyx_t_3) == Py_None)||(PyErr_Format(PyExc_TypeError, "Expected %.16s, got %.200s", "tuple", Py_TYPE(__pyx_t_3)->tp_name), 0))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 795; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_fields, ((PyObject*)__pyx_t_3));
    __pyx_t_3 = 0;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":796
 *     for childname in descr.names:
 *         fields = descr.fields[childname]
 *         child, new_offset = fields             # <<<<<<<<<<<<<<
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 */
    if (likely(__pyx_v_fields != Py_None)) {
      PyObject* sequence = __pyx_v_fields;
      #if CYTHON_COMPILING_IN_CPYTHON
      Py_ssize_t size = Py_SIZE(sequence);
      #else
      Py_ssize_t size = PySequence_Size(sequence);
      #endif
      if (unlikely(size != 2)) {
        if (size > 2) __Pyx_RaiseTooManyValuesError(2);
        else if (size >= 0) __Pyx_RaiseNeedMoreValuesError(size);
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      #if CYTHON_COMPILING_IN_CPYTHON
      __pyx_t_3 = PyTuple_GET_ITEM(sequence, 0); 
      __pyx_t_4 = PyTuple_GET_ITEM(sequence, 1); 
      __Pyx_INCREF(__pyx_t_3);
      __Pyx_INCREF(__pyx_t_4);
      #else
      __pyx_t_3 = PySequence_ITEM(sequence, 0); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PySequence_ITEM(sequence, 1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      #endif
    } else {
      __Pyx_RaiseNoneNotIterableError(); {__pyx_filename = __pyx_f[6]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
    if (!(likely(((__pyx_t_3) == Py_None) || likely(__Pyx_TypeTest(__pyx_t_3, __pyx_ptype_5numpy_dtype))))) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 796; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_XDECREF_SET(__pyx_v_child, ((PyArray_Descr *)__pyx_t_3));
    __pyx_t_3 = 0;
    __Pyx_XDECREF_SET(__pyx_v_new_offset, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":798
 *         child, new_offset = fields
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:             # <<<<<<<<<<<<<<
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 */
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_3 = PyNumber_Subtract(__pyx_v_new_offset, __pyx_t_4); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __pyx_t_5 = __Pyx_PyInt_As_int(__pyx_t_3); if (unlikely((__pyx_t_5 == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 798; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
    __pyx_t_6 = ((((__pyx_v_end - __pyx_v_f) - ((int)__pyx_t_5)) < 15) != 0);
    if (__pyx_t_6) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__32, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":801
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")
 * 
 *         if ((child.byteorder == c'>' and little_endian) or             # <<<<<<<<<<<<<<
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")
 */
    __pyx_t_6 = ((__pyx_v_child->byteorder == '>') != 0);
    if (__pyx_t_6) {
      __pyx_t_7 = (__pyx_v_little_endian != 0);
    } else {
      __pyx_t_7 = __pyx_t_6;
    }
    if (!__pyx_t_7) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":802
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):             # <<<<<<<<<<<<<<
 *             raise ValueError(u"Non-native byte order not supported")
 *             # One could encode it in the format string and have Cython
 */
      __pyx_t_6 = ((__pyx_v_child->byteorder == '<') != 0);
      if (__pyx_t_6) {
        __pyx_t_8 = ((!(__pyx_v_little_endian != 0)) != 0);
        __pyx_t_9 = __pyx_t_8;
      } else {
        __pyx_t_9 = __pyx_t_6;
      }
      __pyx_t_6 = __pyx_t_9;
    } else {
      __pyx_t_6 = __pyx_t_7;
    }
    if (__pyx_t_6) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
      __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_tuple__33, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __Pyx_Raise(__pyx_t_3, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      {__pyx_filename = __pyx_f[6]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":813
 * 
 *         # Output padding bytes
 *         while offset[0] < new_offset:             # <<<<<<<<<<<<<<
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 */
    while (1) {
      __pyx_t_3 = __Pyx_PyInt_From_int((__pyx_v_offset[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_t_3, __pyx_v_new_offset, Py_LT); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 813; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (!__pyx_t_6) break;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":814
 *         # Output padding bytes
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte             # <<<<<<<<<<<<<<
 *             f += 1
 *             offset[0] += 1
 */
      (__pyx_v_f[0]) = 120;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":815
 *         while offset[0] < new_offset:
 *             f[0] = 120 # "x"; pad byte
 *             f += 1             # <<<<<<<<<<<<<<
 *             offset[0] += 1
 * 
 */
      __pyx_v_f = (__pyx_v_f + 1);

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":816
 *             f[0] = 120 # "x"; pad byte
 *             f += 1
 *             offset[0] += 1             # <<<<<<<<<<<<<<
 * 
 *         offset[0] += child.itemsize
 */
      __pyx_t_10 = 0;
      (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + 1);
    }

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":818
 *             offset[0] += 1
 * 
 *         offset[0] += child.itemsize             # <<<<<<<<<<<<<<
 * 
 *         if not PyDataType_HASFIELDS(child):
 */
    __pyx_t_10 = 0;
    (__pyx_v_offset[__pyx_t_10]) = ((__pyx_v_offset[__pyx_t_10]) + __pyx_v_child->elsize);

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":820
 *         offset[0] += child.itemsize
 * 
 *         if not PyDataType_HASFIELDS(child):             # <<<<<<<<<<<<<<
 *             t = child.type_num
 *             if end - f < 5:
 */
    __pyx_t_6 = ((!(PyDataType_HASFIELDS(__pyx_v_child) != 0)) != 0);
    if (__pyx_t_6) {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":821
 * 
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num             # <<<<<<<<<<<<<<
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")
 */
      __pyx_t_4 = __Pyx_PyInt_From_int(__pyx_v_child->type_num); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 821; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __Pyx_XDECREF_SET(__pyx_v_t, __pyx_t_4);
      __pyx_t_4 = 0;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":822
 *         if not PyDataType_HASFIELDS(child):
 *             t = child.type_num
 *             if end - f < 5:             # <<<<<<<<<<<<<<
 *                 raise RuntimeError(u"Format string allocated too short.")
 * 
 */
      __pyx_t_6 = (((__pyx_v_end - __pyx_v_f) < 5) != 0);
      if (__pyx_t_6) {

        /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
        __pyx_t_4 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__34, NULL); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        __Pyx_Raise(__pyx_t_4, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":826
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_BYTE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 826; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 98;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":827
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"             # <<<<<<<<<<<<<<
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UBYTE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 827; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 66;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":828
 *             if   t == NPY_BYTE:        f[0] =  98 #"b"
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"             # <<<<<<<<<<<<<<
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_SHORT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 828; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 104;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":829
 *             elif t == NPY_UBYTE:       f[0] =  66 #"B"
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"             # <<<<<<<<<<<<<<
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_USHORT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 829; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 72;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":830
 *             elif t == NPY_SHORT:       f[0] = 104 #"h"
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"             # <<<<<<<<<<<<<<
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_INT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 830; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 105;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":831
 *             elif t == NPY_USHORT:      f[0] =  72 #"H"
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_UINT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 831; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 73;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":832
 *             elif t == NPY_INT:         f[0] = 105 #"i"
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 832; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 108;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":833
 *             elif t == NPY_UINT:        f[0] =  73 #"I"
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 833; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 76;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":834
 *             elif t == NPY_LONG:        f[0] = 108 #"l"
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGLONG); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 834; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 113;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":835
 *             elif t == NPY_ULONG:       f[0] = 76  #"L"
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"             # <<<<<<<<<<<<<<
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 */
      __pyx_t_3 = PyInt_FromLong(NPY_ULONGLONG); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 835; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 81;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":836
 *             elif t == NPY_LONGLONG:    f[0] = 113 #"q"
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"             # <<<<<<<<<<<<<<
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_FLOAT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 836; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 102;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":837
 *             elif t == NPY_ULONGLONG:   f[0] = 81  #"Q"
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"             # <<<<<<<<<<<<<<
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 */
      __pyx_t_3 = PyInt_FromLong(NPY_DOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 837; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 100;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":838
 *             elif t == NPY_FLOAT:       f[0] = 102 #"f"
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"             # <<<<<<<<<<<<<<
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 */
      __pyx_t_4 = PyInt_FromLong(NPY_LONGDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 838; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 103;
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":839
 *             elif t == NPY_DOUBLE:      f[0] = 100 #"d"
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf             # <<<<<<<<<<<<<<
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CFLOAT); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 839; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 102;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":840
 *             elif t == NPY_LONGDOUBLE:  f[0] = 103 #"g"
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd             # <<<<<<<<<<<<<<
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 */
      __pyx_t_4 = PyInt_FromLong(NPY_CDOUBLE); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 840; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 100;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":841
 *             elif t == NPY_CFLOAT:      f[0] = 90; f[1] = 102; f += 1 # Zf
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg             # <<<<<<<<<<<<<<
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 */
      __pyx_t_3 = PyInt_FromLong(NPY_CLONGDOUBLE); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_3);
      __pyx_t_4 = PyObject_RichCompare(__pyx_v_t, __pyx_t_3, Py_EQ); __Pyx_XGOTREF(__pyx_t_4); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_4); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 841; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 90;
        (__pyx_v_f[1]) = 103;
        __pyx_v_f = (__pyx_v_f + 1);
        goto __pyx_L11;
      }

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":842
 *             elif t == NPY_CDOUBLE:     f[0] = 90; f[1] = 100; f += 1 # Zd
 *             elif t == NPY_CLONGDOUBLE: f[0] = 90; f[1] = 103; f += 1 # Zg
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"             # <<<<<<<<<<<<<<
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 */
      __pyx_t_4 = PyInt_FromLong(NPY_OBJECT); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_4);
      __pyx_t_3 = PyObject_RichCompare(__pyx_v_t, __pyx_t_4, Py_EQ); __Pyx_XGOTREF(__pyx_t_3); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
      __pyx_t_6 = __Pyx_PyObject_IsTrue(__pyx_t_3); if (unlikely(__pyx_t_6 < 0)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 842; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
      if (__pyx_t_6) {
        (__pyx_v_f[0]) = 79;
        goto __pyx_L11;
      }
      /*else*/ {

        /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":844
 *             elif t == NPY_OBJECT:      f[0] = 79 #"O"
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)             # <<<<<<<<<<<<<<
 *             f += 1
 *         else:
 */
        __pyx_t_3 = PyUnicode_Format(__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_v_t); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __pyx_t_4 = PyTuple_New(1); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        PyTuple_SET_ITEM(__pyx_t_4, 0, __pyx_t_3);
        __Pyx_GIVEREF(__pyx_t_3);
        __pyx_t_3 = 0;
        __pyx_t_3 = __Pyx_PyObject_Call(__pyx_builtin_ValueError, __pyx_t_4, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_3);
        __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
        __Pyx_Raise(__pyx_t_3, 0, 0, 0);
        __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
        {__pyx_filename = __pyx_f[6]; __pyx_lineno = 844; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      }
      __pyx_L11:;

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":845
 *             else:
 *                 raise ValueError(u"unknown dtype code in numpy.pxd (%d)" % t)
 *             f += 1             # <<<<<<<<<<<<<<
 *         else:
 *             # Cython ignores struct boundary information ("T{...}"),
 */
      __pyx_v_f = (__pyx_v_f + 1);
      goto __pyx_L9;
    }
    /*else*/ {

      /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":849
 *             # Cython ignores struct boundary information ("T{...}"),
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)             # <<<<<<<<<<<<<<
 *     return f
 * 
 */
      __pyx_t_11 = __pyx_f_5numpy__util_dtypestring(__pyx_v_child, __pyx_v_f, __pyx_v_end, __pyx_v_offset); if (unlikely(__pyx_t_11 == NULL)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 849; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __pyx_v_f = __pyx_t_11;
    }
    __pyx_L9:;

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":794
 *     cdef tuple fields
 * 
 *     for childname in descr.names:             # <<<<<<<<<<<<<<
 *         fields = descr.fields[childname]
 *         child, new_offset = fields
 */
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":850
 *             # so don't output it
 *             f = _util_dtypestring(child, f, end, offset)
 *     return f             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = __pyx_v_f;
  goto __pyx_L0;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":783
 *     return PyArray_MultiIterNew(5, <void*>a, <void*>b, <void*>c, <void*> d, <void*> e)
 * 
 * cdef inline char* _util_dtypestring(dtype descr, char* f, char* end, int* offset) except NULL:             # <<<<<<<<<<<<<<
 *     # Recursive utility function used in __getbuffer__ to get format
 *     # string. The new location in the format string is returned.
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("numpy._util_dtypestring", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_child);
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XDECREF(__pyx_v_childname);
  __Pyx_XDECREF(__pyx_v_new_offset);
  __Pyx_XDECREF(__pyx_v_t);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

static CYTHON_INLINE void __pyx_f_5numpy_set_array_base(PyArrayObject *__pyx_v_arr, PyObject *__pyx_v_base) {
  PyObject *__pyx_v_baseptr;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  __Pyx_RefNannySetupContext("set_array_base", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":968
 * cdef inline void set_array_base(ndarray arr, object base):
 *      cdef PyObject* baseptr
 *      if base is None:             # <<<<<<<<<<<<<<
 *          baseptr = NULL
 *      else:
 */
  __pyx_t_1 = (__pyx_v_base == Py_None);
  __pyx_t_2 = (__pyx_t_1 != 0);
  if (__pyx_t_2) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":969
 *      cdef PyObject* baseptr
 *      if base is None:
 *          baseptr = NULL             # <<<<<<<<<<<<<<
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 */
    __pyx_v_baseptr = NULL;
    goto __pyx_L3;
  }
  /*else*/ {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":971
 *          baseptr = NULL
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!             # <<<<<<<<<<<<<<
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 */
    Py_INCREF(__pyx_v_base);

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":972
 *      else:
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base             # <<<<<<<<<<<<<<
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr
 */
    __pyx_v_baseptr = ((PyObject *)__pyx_v_base);
  }
  __pyx_L3:;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":973
 *          Py_INCREF(base) # important to do this before decref below!
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)             # <<<<<<<<<<<<<<
 *      arr.base = baseptr
 * 
 */
  Py_XDECREF(__pyx_v_arr->base);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":974
 *          baseptr = <PyObject*>base
 *      Py_XDECREF(arr.base)
 *      arr.base = baseptr             # <<<<<<<<<<<<<<
 * 
 * cdef inline object get_array_base(ndarray arr):
 */
  __pyx_v_arr->base = __pyx_v_baseptr;

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":966
 * 
 * 
 * cdef inline void set_array_base(ndarray arr, object base):             # <<<<<<<<<<<<<<
 *      cdef PyObject* baseptr
 *      if base is None:
 */

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

/* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

static CYTHON_INLINE PyObject *__pyx_f_5numpy_get_array_base(PyArrayObject *__pyx_v_arr) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  __Pyx_RefNannySetupContext("get_array_base", 0);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":977
 * 
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:             # <<<<<<<<<<<<<<
 *         return None
 *     else:
 */
  __pyx_t_1 = ((__pyx_v_arr->base == NULL) != 0);
  if (__pyx_t_1) {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":978
 * cdef inline object get_array_base(ndarray arr):
 *     if arr.base is NULL:
 *         return None             # <<<<<<<<<<<<<<
 *     else:
 *         return <object>arr.base
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(Py_None);
    __pyx_r = Py_None;
    goto __pyx_L0;
  }
  /*else*/ {

    /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":980
 *         return None
 *     else:
 *         return <object>arr.base             # <<<<<<<<<<<<<<
 */
    __Pyx_XDECREF(__pyx_r);
    __Pyx_INCREF(((PyObject *)__pyx_v_arr->base));
    __pyx_r = ((PyObject *)__pyx_v_arr->base);
    goto __pyx_L0;
  }

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":976
 *      arr.base = baseptr
 * 
 * cdef inline object get_array_base(ndarray arr):             # <<<<<<<<<<<<<<
 *     if arr.base is NULL:
 *         return None
 */

  /* function exit code */
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_", 0);

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[7]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_")
 * cdef string __pyx_convert_string_from_py_(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

static PyObject *__pyx_convert_string_to_py_(const std::string &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_to_py_", 0);

  /* "string.to_py":31
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[8]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":30
 * 
 * @cname("__pyx_convert_string_to_py_")
 * cdef object __pyx_convert_string_to_py_(string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_string_to_py_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_double(const std::vector<double> &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_double", 0);

  /* "vector.to_py":64
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = PyFloat_FromDouble((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[9]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_double", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_6czelta_station __pyx_vtable_6czelta_station;

static PyObject *__pyx_tp_new_6czelta_station(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6czelta_station *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6czelta_station *)o);
  p->__pyx_vtab = __pyx_vtabptr_6czelta_station;
  return o;
}

static void __pyx_tp_dealloc_6czelta_station(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6czelta_7station_id(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_7station_2id_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_7station_name(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_7station_4name_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_7station_detector_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_7station_17detector_position_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_7station_gps_position(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_7station_12gps_position_1__get__(o);
}

static PyMethodDef __pyx_methods_6czelta_station[] = {
  {__Pyx_NAMESTR("distance_to"), (PyCFunction)__pyx_pw_6czelta_7station_3distance_to, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_7station_2distance_to)},
  {__Pyx_NAMESTR("get_corrections"), (PyCFunction)__pyx_pw_6czelta_7station_5get_corrections, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_6czelta_7station_7load, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6czelta_7station_6load)},
  {__Pyx_NAMESTR("get_stations"), (PyCFunction)__pyx_pw_6czelta_7station_9get_stations, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6czelta_7station_8get_stations)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6czelta_station[] = {
  {(char *)"id", __pyx_getprop_6czelta_7station_id, 0, __Pyx_DOCSTR(__pyx_k_Return_station_id_probably_same), 0},
  {(char *)"name", __pyx_getprop_6czelta_7station_name, 0, __Pyx_DOCSTR(__pyx_k_Return_code_name_of_station_Exam), 0},
  {(char *)"detector_position", __pyx_getprop_6czelta_7station_detector_position, 0, __Pyx_DOCSTR(__pyx_k_Return_position_of_detectors_in), 0},
  {(char *)"gps_position", __pyx_getprop_6czelta_7station_gps_position, 0, __Pyx_DOCSTR(__pyx_k_Returns_GPS_position_of_station), 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6czelta_station = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("czelta.station"), /*tp_name*/
  sizeof(struct __pyx_obj_6czelta_station), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6czelta_station, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Class for working with station data. On import it tries to load config_data.JSON (in python lib path and after failture in local directory."), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6czelta_station, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6czelta_station, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6czelta_7station_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6czelta_station, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6czelta_event __pyx_vtable_6czelta_event;

static PyObject *__pyx_tp_new_6czelta_event(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6czelta_event *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6czelta_event *)o);
  p->__pyx_vtab = __pyx_vtabptr_6czelta_event;
  new((void*)&(p->e)) Event();
  return o;
}

static void __pyx_tp_dealloc_6czelta_event(PyObject *o) {
  struct __pyx_obj_6czelta_event *p = (struct __pyx_obj_6czelta_event *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->e);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_6czelta_5event_timestamp(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_9timestamp_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_datetime(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_8datetime_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_time_since_second(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_17time_since_second_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_ADC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_3ADC_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_TDC(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_3TDC_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_TDC_corrected(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_13TDC_corrected_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_temps_detector(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_14temps_detector_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_temp_crate(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_10temp_crate_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_calibration(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_11calibration_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_AH_direction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_12AH_direction_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_RAD_direction(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_13RAD_direction_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_5event_station(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_5event_7station_1__get__(o);
}

static PyMethodDef __pyx_methods_6czelta_event[] = {
  {__Pyx_NAMESTR("set_station"), (PyCFunction)__pyx_pw_6czelta_5event_5set_station, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_5event_4set_station)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6czelta_event[] = {
  {(char *)"timestamp", __pyx_getprop_6czelta_5event_timestamp, 0, __Pyx_DOCSTR(__pyx_k_timestamp_of_event_fastest_way_t), 0},
  {(char *)"datetime", __pyx_getprop_6czelta_5event_datetime, 0, __Pyx_DOCSTR(__pyx_k_Return_python_datetime_http_docs), 0},
  {(char *)"time_since_second", __pyx_getprop_6czelta_5event_time_since_second, 0, __Pyx_DOCSTR(__pyx_k_Return_time_elapsed_since_last_s), 0},
  {(char *)"ADC", __pyx_getprop_6czelta_5event_ADC, 0, __Pyx_DOCSTR(__pyx_k_Relative_energy_absorbed_in_each), 0},
  {(char *)"TDC", __pyx_getprop_6czelta_5event_TDC, 0, __Pyx_DOCSTR(__pyx_k_Relative_time_of_activation_each), 0},
  {(char *)"TDC_corrected", __pyx_getprop_6czelta_5event_TDC_corrected, 0, __Pyx_DOCSTR(__pyx_k_Relative_time_of_activation_each_2), 0},
  {(char *)"temps_detector", __pyx_getprop_6czelta_5event_temps_detector, 0, __Pyx_DOCSTR(__pyx_k_Return_3_temps_of_each_detector), 0},
  {(char *)"temp_crate", __pyx_getprop_6czelta_5event_temp_crate, 0, __Pyx_DOCSTR(__pyx_k_Return_Temperature_in_crate_in_t), 0},
  {(char *)"calibration", __pyx_getprop_6czelta_5event_calibration, 0, __Pyx_DOCSTR(__pyx_k_Calibration_events_are_events_ac), 0},
  {(char *)"AH_direction", __pyx_getprop_6czelta_5event_AH_direction, 0, __Pyx_DOCSTR(__pyx_k_Return_horizon_azimuth_direction), 0},
  {(char *)"RAD_direction", __pyx_getprop_6czelta_5event_RAD_direction, 0, __Pyx_DOCSTR(__pyx_k_Return_right_ascension_declinati), 0},
  {(char *)"station", __pyx_getprop_6czelta_5event_station, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_6czelta_event = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("czelta.event"), /*tp_name*/
  sizeof(struct __pyx_obj_6czelta_event), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6czelta_event, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6czelta_5event_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Basic czelta class for holding information about events. This time is imposible to create own event"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_6czelta_event, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6czelta_event, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6czelta_5event_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6czelta_event, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6czelta_coincidence(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6czelta_coincidence *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6czelta_coincidence *)o);
  new((void*)&(p->c)) Coincidence();
  return o;
}

static void __pyx_tp_dealloc_6czelta_coincidence(PyObject *o) {
  struct __pyx_obj_6czelta_coincidence *p = (struct __pyx_obj_6czelta_coincidence *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->c);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6czelta_coincidence(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyObject *__pyx_getprop_6czelta_11coincidence_delta(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_5delta_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_stations(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_8stations_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_events(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_6events_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_max_difference(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_14max_difference_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_number_of_coincidences(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_22number_of_coincidences_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_expected_value(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_14expected_value_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_chance(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_6chance_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_overlap_measure_time(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_20overlap_measure_time_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_overlap_normal_events(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_21overlap_normal_events_1__get__(o);
}

static PyObject *__pyx_getprop_6czelta_11coincidence_overlap_calibration_events(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_6czelta_11coincidence_26overlap_calibration_events_1__get__(o);
}

static PyMethodDef __pyx_methods_6czelta_coincidence[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_6czelta_11coincidence_9__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_6czelta_coincidence[] = {
  {(char *)"delta", __pyx_getprop_6czelta_11coincidence_delta, 0, __Pyx_DOCSTR(__pyx_k_Return_all_deltas_of_coincidence), 0},
  {(char *)"stations", __pyx_getprop_6czelta_11coincidence_stations, 0, __Pyx_DOCSTR(__pyx_k_Get_stations_used_to_calculate_d), 0},
  {(char *)"events", __pyx_getprop_6czelta_11coincidence_events, 0, __Pyx_DOCSTR(__pyx_k_Get_all_events), 0},
  {(char *)"max_difference", __pyx_getprop_6czelta_11coincidence_max_difference, 0, __Pyx_DOCSTR(__pyx_k_Return_used_limit_between_coinci), 0},
  {(char *)"number_of_coincidences", __pyx_getprop_6czelta_11coincidence_number_of_coincidences, 0, __Pyx_DOCSTR(__pyx_k_Get_number_of_coincidences_same), 0},
  {(char *)"expected_value", __pyx_getprop_6czelta_11coincidence_expected_value, 0, __Pyx_DOCSTR(__pyx_k_Number_of_random_coincidences_ex), 0},
  {(char *)"chance", __pyx_getprop_6czelta_11coincidence_chance, 0, __Pyx_DOCSTR(__pyx_k_Chance_of_finding_len_coincidenc), 0},
  {(char *)"overlap_measure_time", __pyx_getprop_6czelta_11coincidence_overlap_measure_time, 0, __Pyx_DOCSTR(__pyx_k_Total_time_of_overlap_measure), 0},
  {(char *)"overlap_normal_events", __pyx_getprop_6czelta_11coincidence_overlap_normal_events, 0, __Pyx_DOCSTR(__pyx_k_Number_of_normal_events_on_invid), 0},
  {(char *)"overlap_calibration_events", __pyx_getprop_6czelta_11coincidence_overlap_calibration_events, 0, __Pyx_DOCSTR(__pyx_k_Number_of_calibration_events_on), 0},
  {0, 0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_coincidence = {
  __pyx_pw_6czelta_11coincidence_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6czelta_coincidence, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_coincidence = {
  __pyx_pw_6czelta_11coincidence_3__len__, /*mp_length*/
  __pyx_pw_6czelta_11coincidence_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6czelta_coincidence = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("czelta.coincidence"), /*tp_name*/
  sizeof(struct __pyx_obj_6czelta_coincidence), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6czelta_coincidence, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_coincidence, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_coincidence, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("Class for calculate coincidences of more stations. Currently supported is double and triple coincidences. With triple coincidences is also posible to calculate direction of coincidence.\n    \nConstructor have format: ``coincidence(event_readers in list or tuple, save_events = True, stations = auto)``\nif you have giant limits on double coincidences, it is sometimes better to don't save events. Stations are by default got from event readers.\n\ncoincidence object is also iterable, more in examples.\n"), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6czelta_11coincidence_7__iter__, /*tp_iter*/
  __pyx_pw_6czelta_11coincidence_9__next__, /*tp_iternext*/
  __pyx_methods_6czelta_coincidence, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_6czelta_coincidence, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6czelta_11coincidence_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6czelta_coincidence, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6czelta_event_reader __pyx_vtable_6czelta_event_reader;

static PyObject *__pyx_tp_new_6czelta_event_reader(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6czelta_event_reader *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6czelta_event_reader *)o);
  p->__pyx_vtab = __pyx_vtabptr_6czelta_event_reader;
  new((void*)&(p->er)) EventReader();
  return o;
}

static void __pyx_tp_dealloc_6czelta_event_reader(PyObject *o) {
  struct __pyx_obj_6czelta_event_reader *p = (struct __pyx_obj_6czelta_event_reader *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(&p->er);
  (*Py_TYPE(o)->tp_free)(o);
}
static PyObject *__pyx_sq_item_6czelta_event_reader(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6czelta_event_reader[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_6czelta_12event_reader_9__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("run"), (PyCFunction)__pyx_pw_6czelta_12event_reader_11run, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_10run)},
  {__Pyx_NAMESTR("runs"), (PyCFunction)__pyx_pw_6czelta_12event_reader_13runs, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_12runs)},
  {__Pyx_NAMESTR("load"), (PyCFunction)__pyx_pw_6czelta_12event_reader_15load, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_14load)},
  {__Pyx_NAMESTR("save"), (PyCFunction)__pyx_pw_6czelta_12event_reader_17save, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_16save)},
  {__Pyx_NAMESTR("get_station"), (PyCFunction)__pyx_pw_6czelta_12event_reader_19get_station, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("flux"), (PyCFunction)__pyx_pw_6czelta_12event_reader_21flux, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("set_station"), (PyCFunction)__pyx_pw_6czelta_12event_reader_23set_station, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_22set_station)},
  {__Pyx_NAMESTR("number_of_events"), (PyCFunction)__pyx_pw_6czelta_12event_reader_25number_of_events, METH_VARARGS|METH_KEYWORDS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_24number_of_events)},
  {__Pyx_NAMESTR("number_of_runs"), (PyCFunction)__pyx_pw_6czelta_12event_reader_27number_of_runs, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_26number_of_runs)},
  {__Pyx_NAMESTR("measure_length"), (PyCFunction)__pyx_pw_6czelta_12event_reader_29measure_length, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("item"), (PyCFunction)__pyx_pw_6czelta_12event_reader_31item, METH_O, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("measure_time"), (PyCFunction)__pyx_pw_6czelta_12event_reader_33measure_time, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("filter"), (PyCFunction)__pyx_pw_6czelta_12event_reader_35filter, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_34filter)},
  {__Pyx_NAMESTR("filter_calibrations"), (PyCFunction)__pyx_pw_6czelta_12event_reader_37filter_calibrations, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_36filter_calibrations)},
  {__Pyx_NAMESTR("filter_maximum_TDC"), (PyCFunction)__pyx_pw_6czelta_12event_reader_39filter_maximum_TDC, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_38filter_maximum_TDC)},
  {__Pyx_NAMESTR("filter_maximum_ADC"), (PyCFunction)__pyx_pw_6czelta_12event_reader_41filter_maximum_ADC, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_40filter_maximum_ADC)},
  {__Pyx_NAMESTR("filter_minimum_ADC"), (PyCFunction)__pyx_pw_6czelta_12event_reader_43filter_minimum_ADC, METH_NOARGS, __Pyx_DOCSTR(__pyx_doc_6czelta_12event_reader_42filter_minimum_ADC)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_event_reader = {
  __pyx_pw_6czelta_12event_reader_3__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6czelta_event_reader, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_event_reader = {
  __pyx_pw_6czelta_12event_reader_3__len__, /*mp_length*/
  __pyx_pw_6czelta_12event_reader_5__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6czelta_event_reader = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("czelta.event_reader"), /*tp_name*/
  sizeof(struct __pyx_obj_6czelta_event_reader), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6czelta_event_reader, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_event_reader, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_event_reader, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  __Pyx_DOCSTR("\n    Object containing events loaded from file. Have defined len method returning number of events in event_reader.\n    \n    It is iterable::\n    \n        number_of_events = len(some_event_reader)\n        \n        for event in some_event_reader:\n            # do something with event\n            # for example print event in format same as is in txt.\n            print(str(event))\n    \n    Getting invidual events::\n    \n        some_event = some_event_reader[7]\n    \n    Getting slice of events::\n        \n        #standart index\n        some_events = some_event_reader[7:12]\n        \n        #getting slice by datetime object\n        from datetime import datetime\n        some_events = some_event_reader[datetime(2013,9,1), datetime(2013,9,30)]\n        \n    "), /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6czelta_12event_reader_7__iter__, /*tp_iter*/
  __pyx_pw_6czelta_12event_reader_9__next__, /*tp_iternext*/
  __pyx_methods_6czelta_event_reader, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6czelta_12event_reader_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6czelta_event_reader, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_6czelta_event_reader_runs(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6czelta_event_reader_runs *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6czelta_event_reader_runs *)o);
  p->er = ((struct __pyx_obj_6czelta_event_reader *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6czelta_event_reader_runs(PyObject *o) {
  struct __pyx_obj_6czelta_event_reader_runs *p = (struct __pyx_obj_6czelta_event_reader_runs *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->er);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6czelta_event_reader_runs(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6czelta_event_reader_runs *p = (struct __pyx_obj_6czelta_event_reader_runs *)o;
  if (p->er) {
    e = (*v)(((PyObject*)p->er), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6czelta_event_reader_runs(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6czelta_event_reader_runs *p = (struct __pyx_obj_6czelta_event_reader_runs *)o;
  tmp = ((PyObject*)p->er);
  p->er = ((struct __pyx_obj_6czelta_event_reader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6czelta_event_reader_runs(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6czelta_event_reader_runs[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_6czelta_17event_reader_runs_7__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_event_reader_runs = {
  __pyx_pw_6czelta_17event_reader_runs_9__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6czelta_event_reader_runs, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_event_reader_runs = {
  __pyx_pw_6czelta_17event_reader_runs_9__len__, /*mp_length*/
  __pyx_pw_6czelta_17event_reader_runs_11__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6czelta_event_reader_runs = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("czelta.event_reader_runs"), /*tp_name*/
  sizeof(struct __pyx_obj_6czelta_event_reader_runs), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6czelta_event_reader_runs, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_event_reader_runs, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_event_reader_runs, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  __pyx_pw_6czelta_17event_reader_runs_3__str__, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  __Pyx_DOCSTR("Iteratable class for runs of ``czelta.event_reader``."), /*tp_doc*/
  __pyx_tp_traverse_6czelta_event_reader_runs, /*tp_traverse*/
  __pyx_tp_clear_6czelta_event_reader_runs, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6czelta_17event_reader_runs_5__iter__, /*tp_iter*/
  __pyx_pw_6czelta_17event_reader_runs_7__next__, /*tp_iternext*/
  __pyx_methods_6czelta_event_reader_runs, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6czelta_17event_reader_runs_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6czelta_event_reader_runs, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_6czelta_event_reader_run __pyx_vtable_6czelta_event_reader_run;

static PyObject *__pyx_tp_new_6czelta_event_reader_run(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_6czelta_event_reader_run *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_6czelta_event_reader_run *)o);
  p->__pyx_vtab = __pyx_vtabptr_6czelta_event_reader_run;
  p->er = ((struct __pyx_obj_6czelta_event_reader *)Py_None); Py_INCREF(Py_None);
  return o;
}

static void __pyx_tp_dealloc_6czelta_event_reader_run(PyObject *o) {
  struct __pyx_obj_6czelta_event_reader_run *p = (struct __pyx_obj_6czelta_event_reader_run *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && !_PyGC_FINALIZED(o)) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  PyObject_GC_UnTrack(o);
  Py_CLEAR(p->er);
  (*Py_TYPE(o)->tp_free)(o);
}

static int __pyx_tp_traverse_6czelta_event_reader_run(PyObject *o, visitproc v, void *a) {
  int e;
  struct __pyx_obj_6czelta_event_reader_run *p = (struct __pyx_obj_6czelta_event_reader_run *)o;
  if (p->er) {
    e = (*v)(((PyObject*)p->er), a); if (e) return e;
  }
  return 0;
}

static int __pyx_tp_clear_6czelta_event_reader_run(PyObject *o) {
  PyObject* tmp;
  struct __pyx_obj_6czelta_event_reader_run *p = (struct __pyx_obj_6czelta_event_reader_run *)o;
  tmp = ((PyObject*)p->er);
  p->er = ((struct __pyx_obj_6czelta_event_reader *)Py_None); Py_INCREF(Py_None);
  Py_XDECREF(tmp);
  return 0;
}
static PyObject *__pyx_sq_item_6czelta_event_reader_run(PyObject *o, Py_ssize_t i) {
  PyObject *r;
  PyObject *x = PyInt_FromSsize_t(i); if(!x) return 0;
  r = Py_TYPE(o)->tp_as_mapping->mp_subscript(o, x);
  Py_DECREF(x);
  return r;
}

static PyMethodDef __pyx_methods_6czelta_event_reader_run[] = {
  {__Pyx_NAMESTR("__next__"), (PyCFunction)__pyx_pw_6czelta_16event_reader_run_5__next__, METH_NOARGS|METH_COEXIST, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("run_id"), (PyCFunction)__pyx_pw_6czelta_16event_reader_run_11run_id, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("begin_index"), (PyCFunction)__pyx_pw_6czelta_16event_reader_run_13begin_index, METH_NOARGS, __Pyx_DOCSTR(0)},
  {__Pyx_NAMESTR("end_index"), (PyCFunction)__pyx_pw_6czelta_16event_reader_run_15end_index, METH_NOARGS, __Pyx_DOCSTR(0)},
  {0, 0, 0, 0}
};

static PySequenceMethods __pyx_tp_as_sequence_event_reader_run = {
  __pyx_pw_6czelta_16event_reader_run_7__len__, /*sq_length*/
  0, /*sq_concat*/
  0, /*sq_repeat*/
  __pyx_sq_item_6czelta_event_reader_run, /*sq_item*/
  0, /*sq_slice*/
  0, /*sq_ass_item*/
  0, /*sq_ass_slice*/
  0, /*sq_contains*/
  0, /*sq_inplace_concat*/
  0, /*sq_inplace_repeat*/
};

static PyMappingMethods __pyx_tp_as_mapping_event_reader_run = {
  __pyx_pw_6czelta_16event_reader_run_7__len__, /*mp_length*/
  __pyx_pw_6czelta_16event_reader_run_9__getitem__, /*mp_subscript*/
  0, /*mp_ass_subscript*/
};

static PyTypeObject __pyx_type_6czelta_event_reader_run = {
  PyVarObject_HEAD_INIT(0, 0)
  __Pyx_NAMESTR("czelta.event_reader_run"), /*tp_name*/
  sizeof(struct __pyx_obj_6czelta_event_reader_run), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_6czelta_event_reader_run, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #else
  0, /*reserved*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  &__pyx_tp_as_sequence_event_reader_run, /*tp_as_sequence*/
  &__pyx_tp_as_mapping_event_reader_run, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE|Py_TPFLAGS_HAVE_GC, /*tp_flags*/
  0, /*tp_doc*/
  __pyx_tp_traverse_6czelta_event_reader_run, /*tp_traverse*/
  __pyx_tp_clear_6czelta_event_reader_run, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  __pyx_pw_6czelta_16event_reader_run_3__iter__, /*tp_iter*/
  __pyx_pw_6czelta_16event_reader_run_5__next__, /*tp_iternext*/
  __pyx_methods_6czelta_event_reader_run, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_6czelta_16event_reader_run_1__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_6czelta_event_reader_run, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  #if PY_VERSION_HEX >= 0x02060000
  0, /*tp_version_tag*/
  #endif
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {__Pyx_NAMESTR("date_to_timestamp"), (PyCFunction)__pyx_pw_6czelta_1date_to_timestamp, METH_O, __Pyx_DOCSTR(__pyx_doc_6czelta_date_to_timestamp)},
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    __Pyx_NAMESTR("czelta"),
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_s_0_1, __pyx_k_0_1, sizeof(__pyx_k_0_1), 0, 0, 1, 0},
  {&__pyx_n_s_AH_direction, __pyx_k_AH_direction, sizeof(__pyx_k_AH_direction), 0, 0, 1, 1},
  {&__pyx_n_s_AttributeError, __pyx_k_AttributeError, sizeof(__pyx_k_AttributeError), 0, 0, 1, 1},
  {&__pyx_n_s_D, __pyx_k_D, sizeof(__pyx_k_D), 0, 0, 1, 1},
  {&__pyx_kp_s_F, __pyx_k_F, sizeof(__pyx_k_F), 0, 0, 1, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor, __pyx_k_Format_string_allocated_too_shor, sizeof(__pyx_k_Format_string_allocated_too_shor), 0, 1, 0, 0},
  {&__pyx_kp_u_Format_string_allocated_too_shor_2, __pyx_k_Format_string_allocated_too_shor_2, sizeof(__pyx_k_Format_string_allocated_too_shor_2), 0, 1, 0, 0},
  {&__pyx_n_s_GPSposition, __pyx_k_GPSposition, sizeof(__pyx_k_GPSposition), 0, 0, 1, 1},
  {&__pyx_n_s_ID, __pyx_k_ID, sizeof(__pyx_k_ID), 0, 0, 1, 1},
  {&__pyx_n_s_IOError, __pyx_k_IOError, sizeof(__pyx_k_IOError), 0, 0, 1, 1},
  {&__pyx_n_s_IndexError, __pyx_k_IndexError, sizeof(__pyx_k_IndexError), 0, 0, 1, 1},
  {&__pyx_n_s_JD, __pyx_k_JD, sizeof(__pyx_k_JD), 0, 0, 1, 1},
  {&__pyx_kp_s_K, __pyx_k_K, sizeof(__pyx_k_K), 0, 0, 1, 0},
  {&__pyx_kp_s_Martin_Quarda_hinogary_gmail_com, __pyx_k_Martin_Quarda_hinogary_gmail_com, sizeof(__pyx_k_Martin_Quarda_hinogary_gmail_com), 0, 0, 1, 0},
  {&__pyx_n_s_MeteoData, __pyx_k_MeteoData, sizeof(__pyx_k_MeteoData), 0, 0, 1, 1},
  {&__pyx_n_s_MeteoData___init, __pyx_k_MeteoData___init, sizeof(__pyx_k_MeteoData___init), 0, 0, 1, 1},
  {&__pyx_n_s_MeteoData___iter, __pyx_k_MeteoData___iter, sizeof(__pyx_k_MeteoData___iter), 0, 0, 1, 1},
  {&__pyx_n_s_MeteoData___next, __pyx_k_MeteoData___next, sizeof(__pyx_k_MeteoData___next), 0, 0, 1, 1},
  {&__pyx_n_s_MeteoData_loadfile, __pyx_k_MeteoData_loadfile, sizeof(__pyx_k_MeteoData_loadfile), 0, 0, 1, 1},
  {&__pyx_n_s_MeteoData_next, __pyx_k_MeteoData_next, sizeof(__pyx_k_MeteoData_next), 0, 0, 1, 1},
  {&__pyx_kp_u_Non_native_byte_order_not_suppor, __pyx_k_Non_native_byte_order_not_suppor, sizeof(__pyx_k_Non_native_byte_order_not_suppor), 0, 1, 0, 0},
  {&__pyx_n_s_NotImplementedError, __pyx_k_NotImplementedError, sizeof(__pyx_k_NotImplementedError), 0, 0, 1, 1},
  {&__pyx_n_s_RA, __pyx_k_RA, sizeof(__pyx_k_RA), 0, 0, 1, 1},
  {&__pyx_n_s_RAD_direction, __pyx_k_RAD_direction, sizeof(__pyx_k_RAD_direction), 0, 0, 1, 1},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Station_can_t_be_added_bad_forma, __pyx_k_Station_can_t_be_added_bad_forma, sizeof(__pyx_k_Station_can_t_be_added_bad_forma), 0, 0, 1, 0},
  {&__pyx_kp_s_Station_not_exist_have_you_loade, __pyx_k_Station_not_exist_have_you_loade, sizeof(__pyx_k_Station_not_exist_have_you_loade), 0, 0, 1, 0},
  {&__pyx_n_s_StopIteration, __pyx_k_StopIteration, sizeof(__pyx_k_StopIteration), 0, 0, 1, 1},
  {&__pyx_n_s_TDCCorrection, __pyx_k_TDCCorrection, sizeof(__pyx_k_TDCCorrection), 0, 0, 1, 1},
  {&__pyx_n_s_TypeError, __pyx_k_TypeError, sizeof(__pyx_k_TypeError), 0, 0, 1, 1},
  {&__pyx_kp_s_Unknown_type_of_station, __pyx_k_Unknown_type_of_station, sizeof(__pyx_k_Unknown_type_of_station), 0, 0, 1, 0},
  {&__pyx_n_s_ValueError, __pyx_k_ValueError, sizeof(__pyx_k_ValueError), 0, 0, 1, 1},
  {&__pyx_n_s_Warning, __pyx_k_Warning, sizeof(__pyx_k_Warning), 0, 0, 1, 1},
  {&__pyx_kp_s_You_have_calculated_coincidences, __pyx_k_You_have_calculated_coincidences, sizeof(__pyx_k_You_have_calculated_coincidences), 0, 0, 1, 0},
  {&__pyx_kp_s__15, __pyx_k__15, sizeof(__pyx_k__15), 0, 0, 1, 0},
  {&__pyx_kp_s__4, __pyx_k__4, sizeof(__pyx_k__4), 0, 0, 1, 0},
  {&__pyx_kp_s__6, __pyx_k__6, sizeof(__pyx_k__6), 0, 0, 1, 0},
  {&__pyx_n_s_all, __pyx_k_all, sizeof(__pyx_k_all), 0, 0, 1, 1},
  {&__pyx_n_s_append, __pyx_k_append, sizeof(__pyx_k_append), 0, 0, 1, 1},
  {&__pyx_n_s_author, __pyx_k_author, sizeof(__pyx_k_author), 0, 0, 1, 1},
  {&__pyx_n_s_avg_flux, __pyx_k_avg_flux, sizeof(__pyx_k_avg_flux), 0, 0, 1, 1},
  {&__pyx_n_s_b, __pyx_k_b, sizeof(__pyx_k_b), 0, 0, 1, 1},
  {&__pyx_n_s_begin, __pyx_k_begin, sizeof(__pyx_k_begin), 0, 0, 1, 1},
  {&__pyx_n_s_begin_index, __pyx_k_begin_index, sizeof(__pyx_k_begin_index), 0, 0, 1, 1},
  {&__pyx_kp_s_can_t_open_or_read_file, __pyx_k_can_t_open_or_read_file, sizeof(__pyx_k_can_t_open_or_read_file), 0, 0, 1, 0},
  {&__pyx_kp_s_can_t_write_file, __pyx_k_can_t_write_file, sizeof(__pyx_k_can_t_write_file), 0, 0, 1, 0},
  {&__pyx_n_s_cfg, __pyx_k_cfg, sizeof(__pyx_k_cfg), 0, 0, 1, 1},
  {&__pyx_n_s_citlivost, __pyx_k_citlivost, sizeof(__pyx_k_citlivost), 0, 0, 1, 1},
  {&__pyx_n_s_close, __pyx_k_close, sizeof(__pyx_k_close), 0, 0, 1, 1},
  {&__pyx_n_s_coincidence, __pyx_k_coincidence, sizeof(__pyx_k_coincidence), 0, 0, 1, 1},
  {&__pyx_kp_s_config_data_JSON, __pyx_k_config_data_JSON, sizeof(__pyx_k_config_data_JSON), 0, 0, 1, 0},
  {&__pyx_n_s_correction, __pyx_k_correction, sizeof(__pyx_k_correction), 0, 0, 1, 1},
  {&__pyx_n_s_czelta, __pyx_k_czelta, sizeof(__pyx_k_czelta), 0, 0, 1, 1},
  {&__pyx_kp_s_czelta_event_reader_runs_object, __pyx_k_czelta_event_reader_runs_object, sizeof(__pyx_k_czelta_event_reader_runs_object), 0, 0, 1, 0},
  {&__pyx_n_s_d, __pyx_k_d, sizeof(__pyx_k_d), 0, 0, 1, 1},
  {&__pyx_kp_b_dat, __pyx_k_dat, sizeof(__pyx_k_dat), 0, 0, 0, 0},
  {&__pyx_n_s_data, __pyx_k_data, sizeof(__pyx_k_data), 0, 0, 1, 1},
  {&__pyx_n_s_data_error, __pyx_k_data_error, sizeof(__pyx_k_data_error), 0, 0, 1, 1},
  {&__pyx_kp_s_data_pardubice_spse_dat, __pyx_k_data_pardubice_spse_dat, sizeof(__pyx_k_data_pardubice_spse_dat), 0, 0, 1, 0},
  {&__pyx_n_s_date_to_timestamp, __pyx_k_date_to_timestamp, sizeof(__pyx_k_date_to_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_datetime, __pyx_k_datetime, sizeof(__pyx_k_datetime), 0, 0, 1, 1},
  {&__pyx_n_s_day, __pyx_k_day, sizeof(__pyx_k_day), 0, 0, 1, 1},
  {&__pyx_n_s_decode, __pyx_k_decode, sizeof(__pyx_k_decode), 0, 0, 1, 1},
  {&__pyx_n_s_deltas, __pyx_k_deltas, sizeof(__pyx_k_deltas), 0, 0, 1, 1},
  {&__pyx_n_s_detectorsPos, __pyx_k_detectorsPos, sizeof(__pyx_k_detectorsPos), 0, 0, 1, 1},
  {&__pyx_n_s_dir, __pyx_k_dir, sizeof(__pyx_k_dir), 0, 0, 1, 1},
  {&__pyx_n_s_distance_to, __pyx_k_distance_to, sizeof(__pyx_k_distance_to), 0, 0, 1, 1},
  {&__pyx_n_s_distutils, __pyx_k_distutils, sizeof(__pyx_k_distutils), 0, 0, 1, 1},
  {&__pyx_n_s_distutils_sysconfig, __pyx_k_distutils_sysconfig, sizeof(__pyx_k_distutils_sysconfig), 0, 0, 1, 1},
  {&__pyx_n_s_doc, __pyx_k_doc, sizeof(__pyx_k_doc), 0, 0, 1, 1},
  {&__pyx_n_s_double, __pyx_k_double, sizeof(__pyx_k_double), 0, 0, 1, 1},
  {&__pyx_n_s_dt, __pyx_k_dt, sizeof(__pyx_k_dt), 0, 0, 1, 1},
  {&__pyx_n_s_dtype, __pyx_k_dtype, sizeof(__pyx_k_dtype), 0, 0, 1, 1},
  {&__pyx_n_s_dy2, __pyx_k_dy2, sizeof(__pyx_k_dy2), 0, 0, 1, 1},
  {&__pyx_n_s_e, __pyx_k_e, sizeof(__pyx_k_e), 0, 0, 1, 1},
  {&__pyx_n_s_e_dir, __pyx_k_e_dir, sizeof(__pyx_k_e_dir), 0, 0, 1, 1},
  {&__pyx_n_s_encode, __pyx_k_encode, sizeof(__pyx_k_encode), 0, 0, 1, 1},
  {&__pyx_n_s_end, __pyx_k_end, sizeof(__pyx_k_end), 0, 0, 1, 1},
  {&__pyx_n_s_end_index, __pyx_k_end_index, sizeof(__pyx_k_end_index), 0, 0, 1, 1},
  {&__pyx_n_s_er, __pyx_k_er, sizeof(__pyx_k_er), 0, 0, 1, 1},
  {&__pyx_n_s_event, __pyx_k_event, sizeof(__pyx_k_event), 0, 0, 1, 1},
  {&__pyx_n_s_event_reader, __pyx_k_event_reader, sizeof(__pyx_k_event_reader), 0, 0, 1, 1},
  {&__pyx_n_s_event_readers, __pyx_k_event_readers, sizeof(__pyx_k_event_readers), 0, 0, 1, 1},
  {&__pyx_n_s_expanduser, __pyx_k_expanduser, sizeof(__pyx_k_expanduser), 0, 0, 1, 1},
  {&__pyx_n_s_expected, __pyx_k_expected, sizeof(__pyx_k_expected), 0, 0, 1, 1},
  {&__pyx_n_s_expected_error, __pyx_k_expected_error, sizeof(__pyx_k_expected_error), 0, 0, 1, 1},
  {&__pyx_n_s_extent, __pyx_k_extent, sizeof(__pyx_k_extent), 0, 0, 1, 1},
  {&__pyx_n_s_f, __pyx_k_f, sizeof(__pyx_k_f), 0, 0, 1, 1},
  {&__pyx_n_s_file, __pyx_k_file, sizeof(__pyx_k_file), 0, 0, 1, 1},
  {&__pyx_n_s_file_iter, __pyx_k_file_iter, sizeof(__pyx_k_file_iter), 0, 0, 1, 1},
  {&__pyx_n_s_file_month, __pyx_k_file_month, sizeof(__pyx_k_file_month), 0, 0, 1, 1},
  {&__pyx_n_s_file_year, __pyx_k_file_year, sizeof(__pyx_k_file_year), 0, 0, 1, 1},
  {&__pyx_n_s_filter, __pyx_k_filter, sizeof(__pyx_k_filter), 0, 0, 1, 1},
  {&__pyx_n_s_filter_calibrations, __pyx_k_filter_calibrations, sizeof(__pyx_k_filter_calibrations), 0, 0, 1, 1},
  {&__pyx_n_s_filter_func_event, __pyx_k_filter_func_event, sizeof(__pyx_k_filter_func_event), 0, 0, 1, 1},
  {&__pyx_n_s_filter_func_object, __pyx_k_filter_func_object, sizeof(__pyx_k_filter_func_object), 0, 0, 1, 1},
  {&__pyx_n_s_filter_maximum_ADC, __pyx_k_filter_maximum_ADC, sizeof(__pyx_k_filter_maximum_ADC), 0, 0, 1, 1},
  {&__pyx_n_s_filter_maximum_TDC, __pyx_k_filter_maximum_TDC, sizeof(__pyx_k_filter_maximum_TDC), 0, 0, 1, 1},
  {&__pyx_n_s_filter_minimum_ADC, __pyx_k_filter_minimum_ADC, sizeof(__pyx_k_filter_minimum_ADC), 0, 0, 1, 1},
  {&__pyx_n_s_flux, __pyx_k_flux, sizeof(__pyx_k_flux), 0, 0, 1, 1},
  {&__pyx_n_s_flux_length, __pyx_k_flux_length, sizeof(__pyx_k_flux_length), 0, 0, 1, 1},
  {&__pyx_n_s_flux_s, __pyx_k_flux_s, sizeof(__pyx_k_flux_s), 0, 0, 1, 1},
  {&__pyx_n_s_flux_sum, __pyx_k_flux_sum, sizeof(__pyx_k_flux_sum), 0, 0, 1, 1},
  {&__pyx_n_s_flux_tm, __pyx_k_flux_tm, sizeof(__pyx_k_flux_tm), 0, 0, 1, 1},
  {&__pyx_n_s_flux_tm_l, __pyx_k_flux_tm_l, sizeof(__pyx_k_flux_tm_l), 0, 0, 1, 1},
  {&__pyx_n_s_fluxes, __pyx_k_fluxes, sizeof(__pyx_k_fluxes), 0, 0, 1, 1},
  {&__pyx_n_s_from, __pyx_k_from, sizeof(__pyx_k_from), 0, 0, 1, 1},
  {&__pyx_n_s_from_2, __pyx_k_from_2, sizeof(__pyx_k_from_2), 0, 0, 1, 1},
  {&__pyx_n_s_from_cor, __pyx_k_from_cor, sizeof(__pyx_k_from_cor), 0, 0, 1, 1},
  {&__pyx_kp_s_function_must_have_one_parameter, __pyx_k_function_must_have_one_parameter, sizeof(__pyx_k_function_must_have_one_parameter), 0, 0, 1, 0},
  {&__pyx_n_s_g, __pyx_k_g, sizeof(__pyx_k_g), 0, 0, 1, 1},
  {&__pyx_n_s_get_corrections, __pyx_k_get_corrections, sizeof(__pyx_k_get_corrections), 0, 0, 1, 1},
  {&__pyx_n_s_get_python_lib, __pyx_k_get_python_lib, sizeof(__pyx_k_get_python_lib), 0, 0, 1, 1},
  {&__pyx_n_s_get_station, __pyx_k_get_station, sizeof(__pyx_k_get_station), 0, 0, 1, 1},
  {&__pyx_n_s_get_stations, __pyx_k_get_stations, sizeof(__pyx_k_get_stations), 0, 0, 1, 1},
  {&__pyx_n_s_getfilesystemencoding, __pyx_k_getfilesystemencoding, sizeof(__pyx_k_getfilesystemencoding), 0, 0, 1, 1},
  {&__pyx_n_s_gps_position, __pyx_k_gps_position, sizeof(__pyx_k_gps_position), 0, 0, 1, 1},
  {&__pyx_n_s_h, __pyx_k_h, sizeof(__pyx_k_h), 0, 0, 1, 1},
  {&__pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_k_home_martin_Plocha_czelta_pytho, sizeof(__pyx_k_home_martin_Plocha_czelta_pytho), 0, 0, 1, 0},
  {&__pyx_kp_s_home_martin_Plocha_czelta_pytho_2, __pyx_k_home_martin_Plocha_czelta_pytho_2, sizeof(__pyx_k_home_martin_Plocha_czelta_pytho_2), 0, 0, 1, 0},
  {&__pyx_kp_s_home_martin_data_Meteodata_Opav, __pyx_k_home_martin_data_Meteodata_Opav, sizeof(__pyx_k_home_martin_data_Meteodata_Opav), 0, 0, 1, 0},
  {&__pyx_kp_s_home_martin_data_Meteodata_Pard, __pyx_k_home_martin_data_Meteodata_Pard, sizeof(__pyx_k_home_martin_data_Meteodata_Pard), 0, 0, 1, 0},
  {&__pyx_kp_s_home_martin_data_Meteodata_Prah, __pyx_k_home_martin_data_Meteodata_Prah, sizeof(__pyx_k_home_martin_data_Meteodata_Prah), 0, 0, 1, 0},
  {&__pyx_n_s_hour, __pyx_k_hour, sizeof(__pyx_k_hour), 0, 0, 1, 1},
  {&__pyx_n_s_i, __pyx_k_i, sizeof(__pyx_k_i), 0, 0, 1, 1},
  {&__pyx_kp_s_i_i, __pyx_k_i_i, sizeof(__pyx_k_i_i), 0, 0, 1, 0},
  {&__pyx_n_s_id, __pyx_k_id, sizeof(__pyx_k_id), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_index, __pyx_k_index, sizeof(__pyx_k_index), 0, 0, 1, 1},
  {&__pyx_n_s_init, __pyx_k_init, sizeof(__pyx_k_init), 0, 0, 1, 1},
  {&__pyx_n_s_int, __pyx_k_int, sizeof(__pyx_k_int), 0, 0, 1, 1},
  {&__pyx_n_s_item, __pyx_k_item, sizeof(__pyx_k_item), 0, 0, 1, 1},
  {&__pyx_n_s_iter, __pyx_k_iter, sizeof(__pyx_k_iter), 0, 0, 1, 1},
  {&__pyx_n_s_j, __pyx_k_j, sizeof(__pyx_k_j), 0, 0, 1, 1},
  {&__pyx_n_s_json, __pyx_k_json, sizeof(__pyx_k_json), 0, 0, 1, 1},
  {&__pyx_n_s_k, __pyx_k_k, sizeof(__pyx_k_k), 0, 0, 1, 1},
  {&__pyx_n_s_length, __pyx_k_length, sizeof(__pyx_k_length), 0, 0, 1, 1},
  {&__pyx_n_s_line, __pyx_k_line, sizeof(__pyx_k_line), 0, 0, 1, 1},
  {&__pyx_n_s_load, __pyx_k_load, sizeof(__pyx_k_load), 0, 0, 1, 1},
  {&__pyx_n_s_loadfile, __pyx_k_loadfile, sizeof(__pyx_k_loadfile), 0, 0, 1, 1},
  {&__pyx_n_s_lower, __pyx_k_lower, sizeof(__pyx_k_lower), 0, 0, 1, 1},
  {&__pyx_n_s_m, __pyx_k_m, sizeof(__pyx_k_m), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_mapa_smeru, __pyx_k_mapa_smeru, sizeof(__pyx_k_mapa_smeru), 0, 0, 1, 1},
  {&__pyx_n_s_max_difference, __pyx_k_max_difference, sizeof(__pyx_k_max_difference), 0, 0, 1, 1},
  {&__pyx_n_s_maxdelta, __pyx_k_maxdelta, sizeof(__pyx_k_maxdelta), 0, 0, 1, 1},
  {&__pyx_n_s_me, __pyx_k_me, sizeof(__pyx_k_me), 0, 0, 1, 1},
  {&__pyx_n_s_measure_length, __pyx_k_measure_length, sizeof(__pyx_k_measure_length), 0, 0, 1, 1},
  {&__pyx_n_s_measure_time, __pyx_k_measure_time, sizeof(__pyx_k_measure_time), 0, 0, 1, 1},
  {&__pyx_n_s_measuredt, __pyx_k_measuredt, sizeof(__pyx_k_measuredt), 0, 0, 1, 1},
  {&__pyx_n_s_metaclass, __pyx_k_metaclass, sizeof(__pyx_k_metaclass), 0, 0, 1, 1},
  {&__pyx_n_s_meteo, __pyx_k_meteo, sizeof(__pyx_k_meteo), 0, 0, 1, 1},
  {&__pyx_n_s_minute, __pyx_k_minute, sizeof(__pyx_k_minute), 0, 0, 1, 1},
  {&__pyx_n_s_mm, __pyx_k_mm, sizeof(__pyx_k_mm), 0, 0, 1, 1},
  {&__pyx_n_s_module, __pyx_k_module, sizeof(__pyx_k_module), 0, 0, 1, 1},
  {&__pyx_n_s_month, __pyx_k_month, sizeof(__pyx_k_month), 0, 0, 1, 1},
  {&__pyx_n_s_moon, __pyx_k_moon, sizeof(__pyx_k_moon), 0, 0, 1, 1},
  {&__pyx_n_s_moon_check, __pyx_k_moon_check, sizeof(__pyx_k_moon_check), 0, 0, 1, 1},
  {&__pyx_n_s_moon_check_locals_f, __pyx_k_moon_check_locals_f, sizeof(__pyx_k_moon_check_locals_f), 0, 0, 1, 1},
  {&__pyx_n_s_mt, __pyx_k_mt, sizeof(__pyx_k_mt), 0, 0, 1, 1},
  {&__pyx_n_s_multiplyarray, __pyx_k_multiplyarray, sizeof(__pyx_k_multiplyarray), 0, 0, 1, 1},
  {&__pyx_n_s_name, __pyx_k_name, sizeof(__pyx_k_name), 0, 0, 1, 1},
  {&__pyx_kp_s_name_2, __pyx_k_name_2, sizeof(__pyx_k_name_2), 0, 0, 1, 0},
  {&__pyx_kp_u_ndarray_is_not_C_contiguous, __pyx_k_ndarray_is_not_C_contiguous, sizeof(__pyx_k_ndarray_is_not_C_contiguous), 0, 1, 0, 0},
  {&__pyx_kp_u_ndarray_is_not_Fortran_contiguou, __pyx_k_ndarray_is_not_Fortran_contiguou, sizeof(__pyx_k_ndarray_is_not_Fortran_contiguou), 0, 1, 0, 0},
  {&__pyx_n_s_next, __pyx_k_next, sizeof(__pyx_k_next), 0, 0, 1, 1},
  {&__pyx_n_s_next_2, __pyx_k_next_2, sizeof(__pyx_k_next_2), 0, 0, 1, 1},
  {&__pyx_n_s_np, __pyx_k_np, sizeof(__pyx_k_np), 0, 0, 1, 1},
  {&__pyx_n_s_null, __pyx_k_null, sizeof(__pyx_k_null), 0, 0, 1, 1},
  {&__pyx_n_s_number_of_events, __pyx_k_number_of_events, sizeof(__pyx_k_number_of_events), 0, 0, 1, 1},
  {&__pyx_n_s_number_of_runs, __pyx_k_number_of_runs, sizeof(__pyx_k_number_of_runs), 0, 0, 1, 1},
  {&__pyx_n_s_numpy, __pyx_k_numpy, sizeof(__pyx_k_numpy), 0, 0, 1, 1},
  {&__pyx_n_s_ob, __pyx_k_ob, sizeof(__pyx_k_ob), 0, 0, 1, 1},
  {&__pyx_n_s_opava_mg, __pyx_k_opava_mg, sizeof(__pyx_k_opava_mg), 0, 0, 1, 1},
  {&__pyx_n_s_opava_su, __pyx_k_opava_su, sizeof(__pyx_k_opava_su), 0, 0, 1, 1},
  {&__pyx_n_s_opava_zsbn, __pyx_k_opava_zsbn, sizeof(__pyx_k_opava_zsbn), 0, 0, 1, 1},
  {&__pyx_n_s_open, __pyx_k_open, sizeof(__pyx_k_open), 0, 0, 1, 1},
  {&__pyx_n_s_os, __pyx_k_os, sizeof(__pyx_k_os), 0, 0, 1, 1},
  {&__pyx_n_s_os_path, __pyx_k_os_path, sizeof(__pyx_k_os_path), 0, 0, 1, 1},
  {&__pyx_n_s_pardubice_gd, __pyx_k_pardubice_gd, sizeof(__pyx_k_pardubice_gd), 0, 0, 1, 1},
  {&__pyx_n_s_pardubice_spse, __pyx_k_pardubice_spse, sizeof(__pyx_k_pardubice_spse), 0, 0, 1, 1},
  {&__pyx_n_s_path, __pyx_k_path, sizeof(__pyx_k_path), 0, 0, 1, 1},
  {&__pyx_kp_s_path_must_be_a_file_with_txt_or, __pyx_k_path_must_be_a_file_with_txt_or, sizeof(__pyx_k_path_must_be_a_file_with_txt_or), 0, 0, 1, 0},
  {&__pyx_n_s_path_to_file, __pyx_k_path_to_file, sizeof(__pyx_k_path_to_file), 0, 0, 1, 1},
  {&__pyx_n_s_pos, __pyx_k_pos, sizeof(__pyx_k_pos), 0, 0, 1, 1},
  {&__pyx_n_s_praha_utef, __pyx_k_praha_utef, sizeof(__pyx_k_praha_utef), 0, 0, 1, 1},
  {&__pyx_n_s_prepare, __pyx_k_prepare, sizeof(__pyx_k_prepare), 0, 0, 1, 1},
  {&__pyx_n_s_pressure, __pyx_k_pressure, sizeof(__pyx_k_pressure), 0, 0, 1, 1},
  {&__pyx_n_s_pressure_cor, __pyx_k_pressure_cor, sizeof(__pyx_k_pressure_cor), 0, 0, 1, 1},
  {&__pyx_n_s_print, __pyx_k_print, sizeof(__pyx_k_print), 0, 0, 1, 1},
  {&__pyx_n_s_print_exc, __pyx_k_print_exc, sizeof(__pyx_k_print_exc), 0, 0, 1, 1},
  {&__pyx_n_s_pylab, __pyx_k_pylab, sizeof(__pyx_k_pylab), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_capi, __pyx_k_pyx_capi, sizeof(__pyx_k_pyx_capi), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qualname, __pyx_k_qualname, sizeof(__pyx_k_qualname), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_ratio, __pyx_k_ratio, sizeof(__pyx_k_ratio), 0, 0, 1, 1},
  {&__pyx_n_s_reader, __pyx_k_reader, sizeof(__pyx_k_reader), 0, 0, 1, 1},
  {&__pyx_n_s_relative_alt, __pyx_k_relative_alt, sizeof(__pyx_k_relative_alt), 0, 0, 1, 1},
  {&__pyx_n_s_relative_az, __pyx_k_relative_az, sizeof(__pyx_k_relative_az), 0, 0, 1, 1},
  {&__pyx_n_s_result, __pyx_k_result, sizeof(__pyx_k_result), 0, 0, 1, 1},
  {&__pyx_n_s_result_error, __pyx_k_result_error, sizeof(__pyx_k_result_error), 0, 0, 1, 1},
  {&__pyx_n_s_result_sigma, __pyx_k_result_sigma, sizeof(__pyx_k_result_sigma), 0, 0, 1, 1},
  {&__pyx_n_s_rtn, __pyx_k_rtn, sizeof(__pyx_k_rtn), 0, 0, 1, 1},
  {&__pyx_n_s_run, __pyx_k_run, sizeof(__pyx_k_run), 0, 0, 1, 1},
  {&__pyx_n_s_run_id, __pyx_k_run_id, sizeof(__pyx_k_run_id), 0, 0, 1, 1},
  {&__pyx_n_s_runs, __pyx_k_runs, sizeof(__pyx_k_runs), 0, 0, 1, 1},
  {&__pyx_n_s_s, __pyx_k_s, sizeof(__pyx_k_s), 0, 0, 1, 1},
  {&__pyx_kp_s_s_i_02i_txt, __pyx_k_s_i_02i_txt, sizeof(__pyx_k_s_i_02i_txt), 0, 0, 1, 0},
  {&__pyx_n_s_save, __pyx_k_save, sizeof(__pyx_k_save), 0, 0, 1, 1},
  {&__pyx_n_s_save_events, __pyx_k_save_events, sizeof(__pyx_k_save_events), 0, 0, 1, 1},
  {&__pyx_n_s_scale, __pyx_k_scale, sizeof(__pyx_k_scale), 0, 0, 1, 1},
  {&__pyx_n_s_second, __pyx_k_second, sizeof(__pyx_k_second), 0, 0, 1, 1},
  {&__pyx_n_s_self, __pyx_k_self, sizeof(__pyx_k_self), 0, 0, 1, 1},
  {&__pyx_n_s_sep, __pyx_k_sep, sizeof(__pyx_k_sep), 0, 0, 1, 1},
  {&__pyx_n_s_set_station, __pyx_k_set_station, sizeof(__pyx_k_set_station), 0, 0, 1, 1},
  {&__pyx_n_s_source, __pyx_k_source, sizeof(__pyx_k_source), 0, 0, 1, 1},
  {&__pyx_n_s_source_error, __pyx_k_source_error, sizeof(__pyx_k_source_error), 0, 0, 1, 1},
  {&__pyx_n_s_split, __pyx_k_split, sizeof(__pyx_k_split), 0, 0, 1, 1},
  {&__pyx_n_s_sqrt, __pyx_k_sqrt, sizeof(__pyx_k_sqrt), 0, 0, 1, 1},
  {&__pyx_n_s_st, __pyx_k_st, sizeof(__pyx_k_st), 0, 0, 1, 1},
  {&__pyx_n_s_st_name, __pyx_k_st_name, sizeof(__pyx_k_st_name), 0, 0, 1, 1},
  {&__pyx_n_s_start, __pyx_k_start, sizeof(__pyx_k_start), 0, 0, 1, 1},
  {&__pyx_n_s_staticmethod, __pyx_k_staticmethod, sizeof(__pyx_k_staticmethod), 0, 0, 1, 1},
  {&__pyx_n_s_station, __pyx_k_station, sizeof(__pyx_k_station), 0, 0, 1, 1},
  {&__pyx_n_s_stations, __pyx_k_stations, sizeof(__pyx_k_stations), 0, 0, 1, 1},
  {&__pyx_n_s_stdout, __pyx_k_stdout, sizeof(__pyx_k_stdout), 0, 0, 1, 1},
  {&__pyx_n_s_step, __pyx_k_step, sizeof(__pyx_k_step), 0, 0, 1, 1},
  {&__pyx_kp_s_step_can_t_be_defined, __pyx_k_step_can_t_be_defined, sizeof(__pyx_k_step_can_t_be_defined), 0, 0, 1, 0},
  {&__pyx_n_s_stop, __pyx_k_stop, sizeof(__pyx_k_stop), 0, 0, 1, 1},
  {&__pyx_n_s_sts, __pyx_k_sts, sizeof(__pyx_k_sts), 0, 0, 1, 1},
  {&__pyx_n_s_sum, __pyx_k_sum, sizeof(__pyx_k_sum), 0, 0, 1, 1},
  {&__pyx_n_s_sys, __pyx_k_sys, sizeof(__pyx_k_sys), 0, 0, 1, 1},
  {&__pyx_n_s_sysconfig, __pyx_k_sysconfig, sizeof(__pyx_k_sysconfig), 0, 0, 1, 1},
  {&__pyx_n_s_system_encoding, __pyx_k_system_encoding, sizeof(__pyx_k_system_encoding), 0, 0, 1, 1},
  {&__pyx_n_s_t, __pyx_k_t, sizeof(__pyx_k_t), 0, 0, 1, 1},
  {&__pyx_n_s_tdc, __pyx_k_tdc, sizeof(__pyx_k_tdc), 0, 0, 1, 1},
  {&__pyx_n_s_temp, __pyx_k_temp, sizeof(__pyx_k_temp), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {&__pyx_n_s_time, __pyx_k_time, sizeof(__pyx_k_time), 0, 0, 1, 1},
  {&__pyx_n_s_times, __pyx_k_times, sizeof(__pyx_k_times), 0, 0, 1, 1},
  {&__pyx_n_s_timestamp, __pyx_k_timestamp, sizeof(__pyx_k_timestamp), 0, 0, 1, 1},
  {&__pyx_n_s_timestamps, __pyx_k_timestamps, sizeof(__pyx_k_timestamps), 0, 0, 1, 1},
  {&__pyx_n_s_to, __pyx_k_to, sizeof(__pyx_k_to), 0, 0, 1, 1},
  {&__pyx_n_s_traceback, __pyx_k_traceback, sizeof(__pyx_k_traceback), 0, 0, 1, 1},
  {&__pyx_kp_b_txt, __pyx_k_txt, sizeof(__pyx_k_txt), 0, 0, 0, 0},
  {&__pyx_kp_u_unknown_dtype_code_in_numpy_pxd, __pyx_k_unknown_dtype_code_in_numpy_pxd, sizeof(__pyx_k_unknown_dtype_code_in_numpy_pxd), 0, 1, 0, 0},
  {&__pyx_n_s_utcfromtimestamp, __pyx_k_utcfromtimestamp, sizeof(__pyx_k_utcfromtimestamp), 0, 0, 1, 1},
  {&__pyx_n_s_vals, __pyx_k_vals, sizeof(__pyx_k_vals), 0, 0, 1, 1},
  {&__pyx_n_s_version, __pyx_k_version, sizeof(__pyx_k_version), 0, 0, 1, 1},
  {&__pyx_n_s_write, __pyx_k_write, sizeof(__pyx_k_write), 0, 0, 1, 1},
  {&__pyx_n_s_x, __pyx_k_x, sizeof(__pyx_k_x), 0, 0, 1, 1},
  {&__pyx_n_s_x2, __pyx_k_x2, sizeof(__pyx_k_x2), 0, 0, 1, 1},
  {&__pyx_n_s_x_events, __pyx_k_x_events, sizeof(__pyx_k_x_events), 0, 0, 1, 1},
  {&__pyx_n_s_xx, __pyx_k_xx, sizeof(__pyx_k_xx), 0, 0, 1, 1},
  {&__pyx_n_s_y, __pyx_k_y, sizeof(__pyx_k_y), 0, 0, 1, 1},
  {&__pyx_n_s_y2, __pyx_k_y2, sizeof(__pyx_k_y2), 0, 0, 1, 1},
  {&__pyx_n_s_y4, __pyx_k_y4, sizeof(__pyx_k_y4), 0, 0, 1, 1},
  {&__pyx_n_s_year, __pyx_k_year, sizeof(__pyx_k_year), 0, 0, 1, 1},
  {&__pyx_n_s_yy, __pyx_k_yy, sizeof(__pyx_k_yy), 0, 0, 1, 1},
  {&__pyx_n_s_zenit, __pyx_k_zenit, sizeof(__pyx_k_zenit), 0, 0, 1, 1},
  {&__pyx_n_s_zeros, __pyx_k_zeros, sizeof(__pyx_k_zeros), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_staticmethod = __Pyx_GetBuiltinName(__pyx_n_s_staticmethod); if (!__pyx_builtin_staticmethod) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_open = __Pyx_GetBuiltinName(__pyx_n_s_open); if (!__pyx_builtin_open) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 47; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_Warning = __Pyx_GetBuiltinName(__pyx_n_s_Warning); if (!__pyx_builtin_Warning) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_TypeError = __Pyx_GetBuiltinName(__pyx_n_s_TypeError); if (!__pyx_builtin_TypeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_StopIteration = __Pyx_GetBuiltinName(__pyx_n_s_StopIteration); if (!__pyx_builtin_StopIteration) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_AttributeError = __Pyx_GetBuiltinName(__pyx_n_s_AttributeError); if (!__pyx_builtin_AttributeError) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IndexError = __Pyx_GetBuiltinName(__pyx_n_s_IndexError); if (!__pyx_builtin_IndexError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_NotImplementedError = __Pyx_GetBuiltinName(__pyx_n_s_NotImplementedError); if (!__pyx_builtin_NotImplementedError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_IOError = __Pyx_GetBuiltinName(__pyx_n_s_IOError); if (!__pyx_builtin_IOError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_ValueError = __Pyx_GetBuiltinName(__pyx_n_s_ValueError); if (!__pyx_builtin_ValueError) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 113; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_sum = __Pyx_GetBuiltinName(__pyx_n_s_sum); if (!__pyx_builtin_sum) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 151; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "/home/martin/Plocha/czelta-python/station.pxi":10
 *             self.st = &getStation(<string>station.encode(system_encoding))
 *         if self.st.id()==0:
 *             raise RuntimeError("Station not exist, have you loaded config file?")             # <<<<<<<<<<<<<<
 * 
 *     property id:
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Station_not_exist_have_you_loade); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "/home/martin/Plocha/czelta-python/station.pxi":57
 *         cdef object pos
 *         if file==None:
 *             file = open("config_data.JSON")             # <<<<<<<<<<<<<<
 *         cfg = json.load(file)
 *         file.close()
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_config_data_JSON); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "/home/martin/Plocha/czelta-python/coincidence.pxi":95
 *             cdef event ev
 *             if not self.c.events_saved:
 *                 raise AttributeError("You have calculated coincidences without events")             # <<<<<<<<<<<<<<
 *             if self.c.n == 2:
 *                 rtn = [],[]
 */
  __pyx_tuple__3 = PyTuple_Pack(1, __pyx_kp_s_You_have_calculated_coincidences); if (unlikely(!__pyx_tuple__3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__3);
  __Pyx_GIVEREF(__pyx_tuple__3);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":62
 * 
 *             if i.step != None:
 *                 raise NotImplementedError("step can't be defined")             # <<<<<<<<<<<<<<
 * 
 *             es = []
 */
  __pyx_tuple__5 = PyTuple_Pack(1, __pyx_kp_s_step_can_t_be_defined); if (unlikely(!__pyx_tuple__5)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__5);
  __Pyx_GIVEREF(__pyx_tuple__5);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":104
 *             raise IOError
 *         if path_to_file[0]=='~':
 *             path_to_file = expanduser('~')+path_to_file[1:]             # <<<<<<<<<<<<<<
 * 
 *         #try to auto get station name from filename
 */
  __pyx_tuple__7 = PyTuple_Pack(1, __pyx_kp_s__6); if (unlikely(!__pyx_tuple__7)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__7);
  __Pyx_GIVEREF(__pyx_tuple__7);
  __pyx_slice__8 = PySlice_New(__pyx_int_1, Py_None, Py_None); if (unlikely(!__pyx_slice__8)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__8);
  __Pyx_GIVEREF(__pyx_slice__8);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":129
 *                 raise IOError("can't open or read file: "+path_to_file)
 *         else:
 *             raise NotImplementedError("path must be a file with .txt or .dat")             # <<<<<<<<<<<<<<
 * 
 *     cpdef save(self, path_to_file, bint x_events = True):
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_path_must_be_a_file_with_txt_or); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":134
 *         "Save events to file. Can save txt or dat(binary files same as from website)."
 *         bytes_path = path_to_file.encode(system_encoding)
 *         if bytes_path[-4:].lower()==b".txt":             # <<<<<<<<<<<<<<
 *             if self.er.saveTxtFile(bytes_path, x_events):
 *                 raise IOError("can't write file: "+path_to_file)
 */
  __pyx_slice__10 = PySlice_New(__pyx_int_neg_4, Py_None, Py_None); if (unlikely(!__pyx_slice__10)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 134; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__10);
  __Pyx_GIVEREF(__pyx_slice__10);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":137
 *             if self.er.saveTxtFile(bytes_path, x_events):
 *                 raise IOError("can't write file: "+path_to_file)
 *         elif bytes_path[-4:].lower()==b".dat":             # <<<<<<<<<<<<<<
 *             if self.er.saveDatFile(bytes_path):
 *                 raise IOError("can't write file: "+path_to_file)
 */
  __pyx_slice__11 = PySlice_New(__pyx_int_neg_4, Py_None, Py_None); if (unlikely(!__pyx_slice__11)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_slice__11);
  __Pyx_GIVEREF(__pyx_slice__11);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":141
 *                 raise IOError("can't write file: "+path_to_file)
 *         else:
 *             raise NotImplementedError("path must be a file with .txt or .dat")             # <<<<<<<<<<<<<<
 * 
 *     cpdef station get_station(self):
 */
  __pyx_tuple__12 = PyTuple_Pack(1, __pyx_kp_s_path_must_be_a_file_with_txt_or); if (unlikely(!__pyx_tuple__12)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__12);
  __Pyx_GIVEREF(__pyx_tuple__12);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":167
 *             _id = st.id
 *         else:
 *             raise ValueError("Unknown type of station")             # <<<<<<<<<<<<<<
 *         self.er.setStation(_id)
 * 
 */
  __pyx_tuple__13 = PyTuple_Pack(1, __pyx_kp_s_Unknown_type_of_station); if (unlikely(!__pyx_tuple__13)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__13);
  __Pyx_GIVEREF(__pyx_tuple__13);

  /* "/home/martin/Plocha/czelta-python/event_reader.pxi":207
 *             filter_func(e)
 *         except TypeError as te:
 *             raise TypeError("function must have one parameter (czelta.event)")             # <<<<<<<<<<<<<<
 *         except AttributeError as ae:
 *             raise ae
 */
  __pyx_tuple__14 = PyTuple_Pack(1, __pyx_kp_s_function_must_have_one_parameter); if (unlikely(!__pyx_tuple__14)) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 207; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__14);
  __Pyx_GIVEREF(__pyx_tuple__14);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":42
 *                 raise StopIteration
 *             return self.next()
 *         vals = line.split(" ")             # <<<<<<<<<<<<<<
 *         y = int(vals[0])
 *         m = int(vals[1])
 */
  __pyx_tuple__16 = PyTuple_Pack(1, __pyx_kp_s__15); if (unlikely(!__pyx_tuple__16)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__16);
  __Pyx_GIVEREF(__pyx_tuple__16);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":174
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         #remove last progress and replace with new
 *         sys.stdout.write("\033[F")             # <<<<<<<<<<<<<<
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1))
 */
  __pyx_tuple__17 = PyTuple_Pack(1, __pyx_kp_s_F); if (unlikely(!__pyx_tuple__17)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 174; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__17);
  __Pyx_GIVEREF(__pyx_tuple__17);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":175
 *         #remove last progress and replace with new
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")             # <<<<<<<<<<<<<<
 *         print("%i/%i"%(yy+1,360/scale+1))
 *         with nogil, cython.boundscheck(False):
 */
  __pyx_tuple__18 = PyTuple_Pack(1, __pyx_kp_s_K); if (unlikely(!__pyx_tuple__18)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__18);
  __Pyx_GIVEREF(__pyx_tuple__18);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":217
 *                     deltas[i] = delta_dir(0, y, RA[i], D[i])
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         sys.stdout.write("\033[F")             # <<<<<<<<<<<<<<
 *         sys.stdout.write("\033[K")
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 */
  __pyx_tuple__19 = PyTuple_Pack(1, __pyx_kp_s_F); if (unlikely(!__pyx_tuple__19)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__19);
  __Pyx_GIVEREF(__pyx_tuple__19);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":218
 *         maxdelta = delta_dir(0,y,scale/360.0*m.M_PI,y)
 *         sys.stdout.write("\033[F")
 *         sys.stdout.write("\033[K")             # <<<<<<<<<<<<<<
 *         print("%i/%i"%(yy+1,360/scale+1)) #printing progress
 *         with nogil, cython.boundscheck(False):
 */
  __pyx_tuple__20 = PyTuple_Pack(1, __pyx_kp_s_K); if (unlikely(!__pyx_tuple__20)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__20);
  __Pyx_GIVEREF(__pyx_tuple__20);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":296
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):
 *     cdef event_reader er = event_reader(path)
 *     def f(e):             # <<<<<<<<<<<<<<
 *         dir = e.AH_direction
 *         #return e.datetime.year<2014 or not dir or dir[1] < 40
 */
  __pyx_tuple__21 = PyTuple_Pack(2, __pyx_n_s_e, __pyx_n_s_dir); if (unlikely(!__pyx_tuple__21)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__21);
  __Pyx_GIVEREF(__pyx_tuple__21);
  __pyx_codeobj__22 = (PyObject*)__Pyx_PyCode_New(1, 0, 2, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__21, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_f, 296, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__22)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 296; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":331
 *         timestamps.push_back(e.timestamp)
 * 
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((181,181), dtype=np.double)
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)
 */
  __pyx_tuple__23 = PyTuple_Pack(2, __pyx_int_181, __pyx_int_181); if (unlikely(!__pyx_tuple__23)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__23);
  __Pyx_GIVEREF(__pyx_tuple__23);
  __pyx_tuple__24 = PyTuple_Pack(1, __pyx_tuple__23); if (unlikely(!__pyx_tuple__24)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__24);
  __Pyx_GIVEREF(__pyx_tuple__24);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":332
 * 
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((181,181), dtype=np.double)             # <<<<<<<<<<<<<<
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)
 * 
 */
  __pyx_tuple__25 = PyTuple_Pack(2, __pyx_int_181, __pyx_int_181); if (unlikely(!__pyx_tuple__25)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__25);
  __Pyx_GIVEREF(__pyx_tuple__25);
  __pyx_tuple__26 = PyTuple_Pack(1, __pyx_tuple__25); if (unlikely(!__pyx_tuple__26)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__26);
  __Pyx_GIVEREF(__pyx_tuple__26);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":333
 *     cdef np.ndarray[np.int_t, ndim=2] data = np.zeros((181,181), dtype=np.int)
 *     cdef np.ndarray[np.double_t, ndim=2] source = np.zeros((181,181), dtype=np.double)
 *     cdef np.ndarray[np.double_t, ndim=2] expected = np.zeros((181,181), dtype=np.double)             # <<<<<<<<<<<<<<
 * 
 *     for e in er:
 */
  __pyx_tuple__27 = PyTuple_Pack(2, __pyx_int_181, __pyx_int_181); if (unlikely(!__pyx_tuple__27)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__27);
  __Pyx_GIVEREF(__pyx_tuple__27);
  __pyx_tuple__28 = PyTuple_Pack(1, __pyx_tuple__27); if (unlikely(!__pyx_tuple__28)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__28);
  __Pyx_GIVEREF(__pyx_tuple__28);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":215
 *             if ((flags & pybuf.PyBUF_C_CONTIGUOUS == pybuf.PyBUF_C_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_C_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not C contiguous")             # <<<<<<<<<<<<<<
 * 
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 */
  __pyx_tuple__29 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_C_contiguous); if (unlikely(!__pyx_tuple__29)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__29);
  __Pyx_GIVEREF(__pyx_tuple__29);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":219
 *             if ((flags & pybuf.PyBUF_F_CONTIGUOUS == pybuf.PyBUF_F_CONTIGUOUS)
 *                 and not PyArray_CHKFLAGS(self, NPY_F_CONTIGUOUS)):
 *                 raise ValueError(u"ndarray is not Fortran contiguous")             # <<<<<<<<<<<<<<
 * 
 *             info.buf = PyArray_DATA(self)
 */
  __pyx_tuple__30 = PyTuple_Pack(1, __pyx_kp_u_ndarray_is_not_Fortran_contiguou); if (unlikely(!__pyx_tuple__30)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 219; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__30);
  __Pyx_GIVEREF(__pyx_tuple__30);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":257
 *                 if ((descr.byteorder == c'>' and little_endian) or
 *                     (descr.byteorder == c'<' and not little_endian)):
 *                     raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *                 if   t == NPY_BYTE:        f = "b"
 *                 elif t == NPY_UBYTE:       f = "B"
 */
  __pyx_tuple__31 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__31)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__31);
  __Pyx_GIVEREF(__pyx_tuple__31);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":799
 * 
 *         if (end - f) - <int>(new_offset - offset[0]) < 15:
 *             raise RuntimeError(u"Format string allocated too short, see comment in numpy.pxd")             # <<<<<<<<<<<<<<
 * 
 *         if ((child.byteorder == c'>' and little_endian) or
 */
  __pyx_tuple__32 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor); if (unlikely(!__pyx_tuple__32)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 799; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__32);
  __Pyx_GIVEREF(__pyx_tuple__32);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":803
 *         if ((child.byteorder == c'>' and little_endian) or
 *             (child.byteorder == c'<' and not little_endian)):
 *             raise ValueError(u"Non-native byte order not supported")             # <<<<<<<<<<<<<<
 *             # One could encode it in the format string and have Cython
 *             # complain instead, BUT: < and > in format strings also imply
 */
  __pyx_tuple__33 = PyTuple_Pack(1, __pyx_kp_u_Non_native_byte_order_not_suppor); if (unlikely(!__pyx_tuple__33)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 803; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__33);
  __Pyx_GIVEREF(__pyx_tuple__33);

  /* "/usr/local/lib/python3.4/dist-packages/Cython/Includes/numpy/__init__.pxd":823
 *             t = child.type_num
 *             if end - f < 5:
 *                 raise RuntimeError(u"Format string allocated too short.")             # <<<<<<<<<<<<<<
 * 
 *             # Until ticket #99 is fixed, use integers to avoid warnings
 */
  __pyx_tuple__34 = PyTuple_Pack(1, __pyx_kp_u_Format_string_allocated_too_shor_2); if (unlikely(!__pyx_tuple__34)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 823; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__34);
  __Pyx_GIVEREF(__pyx_tuple__34);

  /* "/home/martin/Plocha/czelta-python/station.pxi":52
 * 
 *     @staticmethod
 *     def load(file = None):             # <<<<<<<<<<<<<<
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 *         cdef Station st
 */
  __pyx_tuple__35 = PyTuple_Pack(9, __pyx_n_s_file, __pyx_n_s_st, __pyx_n_s_pos, __pyx_n_s_cfg, __pyx_n_s_station, __pyx_n_s_st_name, __pyx_n_s_correction, __pyx_n_s_tdc, __pyx_n_s_from_cor); if (unlikely(!__pyx_tuple__35)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__35);
  __Pyx_GIVEREF(__pyx_tuple__35);
  __pyx_codeobj__36 = (PyObject*)__Pyx_PyCode_New(1, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__35, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho_2, __pyx_n_s_load, 52, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__36)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/station.pxi":88
 * 
 *     @staticmethod
 *     def get_stations():             # <<<<<<<<<<<<<<
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()
 */
  __pyx_tuple__37 = PyTuple_Pack(3, __pyx_n_s_stations, __pyx_n_s_rtn, __pyx_n_s_st); if (unlikely(!__pyx_tuple__37)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__37);
  __Pyx_GIVEREF(__pyx_tuple__37);
  __pyx_codeobj__38 = (PyObject*)__Pyx_PyCode_New(0, 0, 3, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__37, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho_2, __pyx_n_s_get_stations, 88, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__38)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "czelta.pyx":33
 * except:
 *     try:
 *         station.load(open("config_data.JSON"))             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
  __pyx_tuple__39 = PyTuple_Pack(1, __pyx_kp_s_config_data_JSON); if (unlikely(!__pyx_tuple__39)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__39);
  __Pyx_GIVEREF(__pyx_tuple__39);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":14
 * 
 * class MeteoData:
 *     def __init__(self, path, begin):             # <<<<<<<<<<<<<<
 *         self.path = path
 *         self.time = begin
 */
  __pyx_tuple__40 = PyTuple_Pack(4, __pyx_n_s_self, __pyx_n_s_path, __pyx_n_s_begin, __pyx_n_s_dt); if (unlikely(!__pyx_tuple__40)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__40);
  __Pyx_GIVEREF(__pyx_tuple__40);
  __pyx_codeobj__41 = (PyObject*)__Pyx_PyCode_New(3, 0, 4, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__40, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_init, 14, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__41)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":23
 *         self.loadfile()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */
  __pyx_tuple__42 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__42)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__42);
  __Pyx_GIVEREF(__pyx_tuple__42);
  __pyx_codeobj__43 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__42, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_iter, 23, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__43)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":25
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         return self.next()
 * 
 */
  __pyx_tuple__44 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__44)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__44);
  __Pyx_GIVEREF(__pyx_tuple__44);
  __pyx_codeobj__45 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__44, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_next_2, 25, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__45)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":28
 *         return self.next()
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         try:
 *             line = self.file_iter.__next__()
 */
  __pyx_tuple__46 = PyTuple_Pack(9, __pyx_n_s_self, __pyx_n_s_line, __pyx_n_s_vals, __pyx_n_s_y, __pyx_n_s_m, __pyx_n_s_d, __pyx_n_s_h, __pyx_n_s_mt, __pyx_n_s_s); if (unlikely(!__pyx_tuple__46)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__46);
  __Pyx_GIVEREF(__pyx_tuple__46);
  __pyx_codeobj__47 = (PyObject*)__Pyx_PyCode_New(1, 0, 9, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__46, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_next, 28, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__47)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":60
 *                 return self.next()
 *         return self
 *     def loadfile(self):             # <<<<<<<<<<<<<<
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))
 *         self.file_iter = self.file.__iter__()
 */
  __pyx_tuple__48 = PyTuple_Pack(1, __pyx_n_s_self); if (unlikely(!__pyx_tuple__48)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__48);
  __Pyx_GIVEREF(__pyx_tuple__48);
  __pyx_codeobj__49 = (PyObject*)__Pyx_PyCode_New(1, 0, 1, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__48, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_loadfile, 60, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__49)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":64
 *         self.file_iter = self.file.__iter__()
 * 
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):             # <<<<<<<<<<<<<<
 *     scale*=2
 *     if scale == 0:
 */
  __pyx_tuple__50 = PyTuple_Pack(51, __pyx_n_s_citlivost, __pyx_n_s_f, __pyx_n_s_path, __pyx_n_s_scale, __pyx_n_s_mm, __pyx_n_s_b, __pyx_n_s_pressure_cor, __pyx_n_s_er, __pyx_n_s_avg_flux, __pyx_n_s_meteo, __pyx_n_s_sts, __pyx_n_s_measure_time, __pyx_n_s_data, __pyx_n_s_RA, __pyx_n_s_D, __pyx_n_s_times, __pyx_n_s_fluxes, __pyx_n_s_dir, __pyx_n_s_e, __pyx_n_s_flux_tm, __pyx_n_s_flux_s, __pyx_n_s_flux_tm_l, __pyx_n_s_flux_sum, __pyx_n_s_flux_length, __pyx_n_s_measuredt, __pyx_n_s_t, __pyx_n_s_ratio, __pyx_n_s_me, __pyx_n_s_run, __pyx_n_s_begin, __pyx_n_s_end, __pyx_n_s_length, __pyx_n_s_deltas, __pyx_n_s_maxdelta, __pyx_n_s_xx, __pyx_n_s_yy, __pyx_n_s_i, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_source, __pyx_n_s_pos, __pyx_n_s_multiplyarray, __pyx_n_s_expected, __pyx_n_s_expected_error, __pyx_n_s_result, __pyx_n_s_extent, __pyx_n_s_y2, __pyx_n_s_x2, __pyx_n_s_y4, __pyx_n_s_dy2, __pyx_n_s_data_error); if (unlikely(!__pyx_tuple__50)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__50);
  __Pyx_GIVEREF(__pyx_tuple__50);
  __pyx_codeobj__51 = (PyObject*)__Pyx_PyCode_New(6, 0, 51, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__50, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_mapa_smeru, 64, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__51)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":294
 * 
 * #closed
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):             # <<<<<<<<<<<<<<
 *     cdef event_reader er = event_reader(path)
 *     def f(e):
 */
  __pyx_tuple__52 = PyTuple_Pack(30, __pyx_n_s_citlivost, __pyx_n_s_path, __pyx_n_s_filter, __pyx_n_s_er, __pyx_n_s_f, __pyx_n_s_f, __pyx_n_s_RA, __pyx_n_s_D, __pyx_n_s_relative_alt, __pyx_n_s_relative_az, __pyx_n_s_JD, __pyx_n_s_moon, __pyx_n_s_zenit, __pyx_n_s_e_dir, __pyx_n_s_ob, __pyx_n_s_station, __pyx_n_s_timestamps, __pyx_n_s_e, __pyx_n_s_dir, __pyx_n_s_i, __pyx_n_s_j, __pyx_n_s_k, __pyx_n_s_x, __pyx_n_s_y, __pyx_n_s_g, __pyx_n_s_measure_time, __pyx_n_s_data, __pyx_n_s_source, __pyx_n_s_expected, __pyx_n_s_run); if (unlikely(!__pyx_tuple__52)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__52);
  __Pyx_GIVEREF(__pyx_tuple__52);
  __pyx_codeobj__53 = (PyObject*)__Pyx_PyCode_New(3, 0, 30, 0, 0, __pyx_empty_bytes, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_tuple__52, __pyx_empty_tuple, __pyx_empty_tuple, __pyx_kp_s_home_martin_Plocha_czelta_pytho, __pyx_n_s_moon_check, 294, __pyx_empty_bytes); if (unlikely(!__pyx_codeobj__53)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  /* InitThreads.init */
  #ifdef WITH_THREAD
PyEval_InitThreads();
#endif

if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_0 = PyInt_FromLong(0); if (unlikely(!__pyx_int_0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_12 = PyInt_FromLong(12); if (unlikely(!__pyx_int_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_40 = PyInt_FromLong(40); if (unlikely(!__pyx_int_40)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_60 = PyInt_FromLong(60); if (unlikely(!__pyx_int_60)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_90 = PyInt_FromLong(90); if (unlikely(!__pyx_int_90)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_180 = PyInt_FromLong(180); if (unlikely(!__pyx_int_180)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_181 = PyInt_FromLong(181); if (unlikely(!__pyx_int_181)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_360 = PyInt_FromLong(360); if (unlikely(!__pyx_int_360)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_1800 = PyInt_FromLong(1800); if (unlikely(!__pyx_int_1800)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_3600 = PyInt_FromLong(3600); if (unlikely(!__pyx_int_3600)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_86400 = PyInt_FromLong(86400L); if (unlikely(!__pyx_int_86400)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_1 = PyInt_FromLong(-1); if (unlikely(!__pyx_int_neg_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_4 = PyInt_FromLong(-4); if (unlikely(!__pyx_int_neg_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_int_neg_90 = PyInt_FromLong(-90); if (unlikely(!__pyx_int_neg_90)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initczelta(void); /*proto*/
PyMODINIT_FUNC initczelta(void)
#else
PyMODINIT_FUNC PyInit_czelta(void); /*proto*/
PyMODINIT_FUNC PyInit_czelta(void)
#endif
{
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  PyObject *__pyx_t_12 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_czelta(void)", 0);
  if ( __Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__Pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4(__Pyx_NAMESTR("czelta"), __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_NAMESTR(__Pyx_BUILTIN_MODULE_NAME)); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (__Pyx_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (unlikely(__Pyx_InitGlobals() < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_czelta) {
    if (__Pyx_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "czelta")) {
      if (unlikely(PyDict_SetItemString(modules, "czelta", __pyx_m) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (unlikely(__Pyx_InitCachedBuiltins() < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (unlikely(__Pyx_InitCachedConstants() < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  __pyx_v_6czelta__filter_func_event = ((struct __pyx_obj_6czelta_event *)Py_None); Py_INCREF(Py_None);
  __pyx_v_6czelta__filter_func_object = Py_None; Py_INCREF(Py_None);
  /*--- Variable export code ---*/
  if (__Pyx_ExportVoidPtr(__pyx_n_s_filter_func_event, (void *)&__pyx_v_6czelta__filter_func_event, "struct __pyx_obj_6czelta_event *") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportVoidPtr(__pyx_n_s_filter_func_object, (void *)&__pyx_v_6czelta__filter_func_object, "PyObject *") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Function export code ---*/
  if (__Pyx_ExportFunction("date_to_timestamp", (void (*)(void))__pyx_f_6czelta_date_to_timestamp, "int (PyObject *, int __pyx_skip_dispatch)") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_ExportFunction("_filter_func", (void (*)(void))__pyx_f_6czelta__filter_func, "int (Event &)") < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Type init code ---*/
  __pyx_vtabptr_6czelta_station = &__pyx_vtable_6czelta_station;
  __pyx_vtable_6czelta_station.get_corrections = (PyObject *(*)(struct __pyx_obj_6czelta_station *, int __pyx_skip_dispatch))__pyx_f_6czelta_7station_get_corrections;
  __pyx_vtable_6czelta_station.distance_to = (PyObject *(*)(struct __pyx_obj_6czelta_station *, struct __pyx_obj_6czelta_station *, int __pyx_skip_dispatch))__pyx_f_6czelta_7station_distance_to;
  if (PyType_Ready(&__pyx_type_6czelta_station) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6czelta_station.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6czelta_station.tp_dict, __pyx_vtabptr_6czelta_station) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "station", (PyObject *)&__pyx_type_6czelta_station) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6czelta_station = &__pyx_type_6czelta_station;
  __pyx_vtabptr_6czelta_event = &__pyx_vtable_6czelta_event;
  __pyx_vtable_6czelta_event.set = (void (*)(struct __pyx_obj_6czelta_event *, Event))__pyx_f_6czelta_5event_set;
  __pyx_vtable_6czelta_event.set_station = (PyObject *(*)(struct __pyx_obj_6czelta_event *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6czelta_5event_set_station;
  if (PyType_Ready(&__pyx_type_6czelta_event) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6czelta_event.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6czelta_event.tp_dict, __pyx_vtabptr_6czelta_event) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "event", (PyObject *)&__pyx_type_6czelta_event) < 0) {__pyx_filename = __pyx_f[5]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6czelta_event = &__pyx_type_6czelta_event;
  if (PyType_Ready(&__pyx_type_6czelta_coincidence) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6czelta_coincidence.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "coincidence", (PyObject *)&__pyx_type_6czelta_coincidence) < 0) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6czelta_coincidence = &__pyx_type_6czelta_coincidence;
  __pyx_vtabptr_6czelta_event_reader = &__pyx_vtable_6czelta_event_reader;
  __pyx_vtable_6czelta_event_reader.run = (PyObject *(*)(struct __pyx_obj_6czelta_event_reader *, int, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_run;
  __pyx_vtable_6czelta_event_reader.runs = (PyObject *(*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_runs;
  __pyx_vtable_6czelta_event_reader.load = (PyObject *(*)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_load;
  __pyx_vtable_6czelta_event_reader.save = (PyObject *(*)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch, struct __pyx_opt_args_6czelta_12event_reader_save *__pyx_optional_args))__pyx_f_6czelta_12event_reader_save;
  __pyx_vtable_6czelta_event_reader.number_of_events = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch, struct __pyx_opt_args_6czelta_12event_reader_number_of_events *__pyx_optional_args))__pyx_f_6czelta_12event_reader_number_of_events;
  __pyx_vtable_6czelta_event_reader.number_of_runs = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_number_of_runs;
  __pyx_vtable_6czelta_event_reader.measure_length = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_measure_length;
  __pyx_vtable_6czelta_event_reader.c_item = (Event (*)(struct __pyx_obj_6czelta_event_reader *, int))__pyx_f_6czelta_12event_reader_c_item;
  __pyx_vtable_6czelta_event_reader.item = (struct __pyx_obj_6czelta_event *(*)(struct __pyx_obj_6czelta_event_reader *, int, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_item;
  __pyx_vtable_6czelta_event_reader.measure_time = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_measure_time;
  __pyx_vtable_6czelta_event_reader.flux = (int (*)(struct __pyx_obj_6czelta_event_reader *, int, int, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_flux;
  __pyx_vtable_6czelta_event_reader.get_station = (struct __pyx_obj_6czelta_station *(*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_get_station;
  __pyx_vtable_6czelta_event_reader.set_station = (PyObject *(*)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_set_station;
  __pyx_vtable_6czelta_event_reader.filter = (int (*)(struct __pyx_obj_6czelta_event_reader *, PyObject *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_filter;
  __pyx_vtable_6czelta_event_reader.filter_calibrations = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_filter_calibrations;
  __pyx_vtable_6czelta_event_reader.filter_maximum_TDC = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_filter_maximum_TDC;
  __pyx_vtable_6czelta_event_reader.filter_maximum_ADC = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_filter_maximum_ADC;
  __pyx_vtable_6czelta_event_reader.filter_minimum_ADC = (int (*)(struct __pyx_obj_6czelta_event_reader *, int __pyx_skip_dispatch))__pyx_f_6czelta_12event_reader_filter_minimum_ADC;
  if (PyType_Ready(&__pyx_type_6czelta_event_reader) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6czelta_event_reader.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6czelta_event_reader.tp_dict, __pyx_vtabptr_6czelta_event_reader) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "event_reader", (PyObject *)&__pyx_type_6czelta_event_reader) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6czelta_event_reader = &__pyx_type_6czelta_event_reader;
  if (PyType_Ready(&__pyx_type_6czelta_event_reader_runs) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6czelta_event_reader_runs.tp_print = 0;
  if (__Pyx_SetAttrString(__pyx_m, "event_reader_runs", (PyObject *)&__pyx_type_6czelta_event_reader_runs) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6czelta_event_reader_runs = &__pyx_type_6czelta_event_reader_runs;
  __pyx_vtabptr_6czelta_event_reader_run = &__pyx_vtable_6czelta_event_reader_run;
  __pyx_vtable_6czelta_event_reader_run.run_id = (int (*)(struct __pyx_obj_6czelta_event_reader_run *, int __pyx_skip_dispatch))__pyx_f_6czelta_16event_reader_run_run_id;
  __pyx_vtable_6czelta_event_reader_run.begin_index = (int (*)(struct __pyx_obj_6czelta_event_reader_run *, int __pyx_skip_dispatch))__pyx_f_6czelta_16event_reader_run_begin_index;
  __pyx_vtable_6czelta_event_reader_run.end_index = (int (*)(struct __pyx_obj_6czelta_event_reader_run *, int __pyx_skip_dispatch))__pyx_f_6czelta_16event_reader_run_end_index;
  if (PyType_Ready(&__pyx_type_6czelta_event_reader_run) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_6czelta_event_reader_run.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_6czelta_event_reader_run.tp_dict, __pyx_vtabptr_6czelta_event_reader_run) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (__Pyx_SetAttrString(__pyx_m, "event_reader_run", (PyObject *)&__pyx_type_6czelta_event_reader_run) < 0) {__pyx_filename = __pyx_f[3]; __pyx_lineno = 287; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_6czelta_event_reader_run = &__pyx_type_6czelta_event_reader_run;
  /*--- Type import code ---*/
  __pyx_ptype_7cpython_4type_type = __Pyx_ImportType(__Pyx_BUILTIN_MODULE_NAME, "type", 
  #if CYTHON_COMPILING_IN_PYPY
  sizeof(PyTypeObject),
  #else
  sizeof(PyHeapTypeObject),
  #endif
  0); if (unlikely(!__pyx_ptype_7cpython_4type_type)) {__pyx_filename = __pyx_f[10]; __pyx_lineno = 9; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_dtype = __Pyx_ImportType("numpy", "dtype", sizeof(PyArray_Descr), 0); if (unlikely(!__pyx_ptype_5numpy_dtype)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 155; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_flatiter = __Pyx_ImportType("numpy", "flatiter", sizeof(PyArrayIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_flatiter)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_broadcast = __Pyx_ImportType("numpy", "broadcast", sizeof(PyArrayMultiIterObject), 0); if (unlikely(!__pyx_ptype_5numpy_broadcast)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ndarray = __Pyx_ImportType("numpy", "ndarray", sizeof(PyArrayObject), 0); if (unlikely(!__pyx_ptype_5numpy_ndarray)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 178; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_5numpy_ufunc = __Pyx_ImportType("numpy", "ufunc", sizeof(PyUFuncObject), 0); if (unlikely(!__pyx_ptype_5numpy_ufunc)) {__pyx_filename = __pyx_f[6]; __pyx_lineno = 861; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/

  /* "czelta.pyx":3
 * #author: Martin Quarda
 * 
 * import datetime             # <<<<<<<<<<<<<<
 * import json
 * import sys
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_datetime, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_datetime, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 3; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "czelta.pyx":4
 * 
 * import datetime
 * import json             # <<<<<<<<<<<<<<
 * import sys
 * import traceback
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_json, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_json, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "czelta.pyx":5
 * import datetime
 * import json
 * import sys             # <<<<<<<<<<<<<<
 * import traceback
 * import os
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "czelta.pyx":6
 * import json
 * import sys
 * import traceback             # <<<<<<<<<<<<<<
 * import os
 * from os.path import expanduser
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_traceback, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_traceback, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 6; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "czelta.pyx":7
 * import sys
 * import traceback
 * import os             # <<<<<<<<<<<<<<
 * from os.path import expanduser
 * 
 */
  __pyx_t_1 = __Pyx_Import(__pyx_n_s_os, 0, -1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_os, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 7; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "czelta.pyx":8
 * import traceback
 * import os
 * from os.path import expanduser             # <<<<<<<<<<<<<<
 * 
 * __version__ = '0.1'
 */
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_expanduser);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_expanduser);
  __Pyx_GIVEREF(__pyx_n_s_expanduser);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_os_path, __pyx_t_1, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_expanduser); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_expanduser, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 8; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "czelta.pyx":10
 * from os.path import expanduser
 * 
 * __version__ = '0.1'             # <<<<<<<<<<<<<<
 * __all__ = ['station','event','event_reader','date_to_timestamp','coincidence']
 * __author__ = 'Martin Quarda <hinogary@gmail.com>'
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_version, __pyx_kp_s_0_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 10; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "czelta.pyx":11
 * 
 * __version__ = '0.1'
 * __all__ = ['station','event','event_reader','date_to_timestamp','coincidence']             # <<<<<<<<<<<<<<
 * __author__ = 'Martin Quarda <hinogary@gmail.com>'
 * system_encoding = sys.getfilesystemencoding()
 */
  __pyx_t_2 = PyList_New(5); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_INCREF(__pyx_n_s_station);
  PyList_SET_ITEM(__pyx_t_2, 0, __pyx_n_s_station);
  __Pyx_GIVEREF(__pyx_n_s_station);
  __Pyx_INCREF(__pyx_n_s_event);
  PyList_SET_ITEM(__pyx_t_2, 1, __pyx_n_s_event);
  __Pyx_GIVEREF(__pyx_n_s_event);
  __Pyx_INCREF(__pyx_n_s_event_reader);
  PyList_SET_ITEM(__pyx_t_2, 2, __pyx_n_s_event_reader);
  __Pyx_GIVEREF(__pyx_n_s_event_reader);
  __Pyx_INCREF(__pyx_n_s_date_to_timestamp);
  PyList_SET_ITEM(__pyx_t_2, 3, __pyx_n_s_date_to_timestamp);
  __Pyx_GIVEREF(__pyx_n_s_date_to_timestamp);
  __Pyx_INCREF(__pyx_n_s_coincidence);
  PyList_SET_ITEM(__pyx_t_2, 4, __pyx_n_s_coincidence);
  __Pyx_GIVEREF(__pyx_n_s_coincidence);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_all, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "czelta.pyx":12
 * __version__ = '0.1'
 * __all__ = ['station','event','event_reader','date_to_timestamp','coincidence']
 * __author__ = 'Martin Quarda <hinogary@gmail.com>'             # <<<<<<<<<<<<<<
 * system_encoding = sys.getfilesystemencoding()
 * 
 */
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_author, __pyx_kp_s_Martin_Quarda_hinogary_gmail_com) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 12; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "czelta.pyx":13
 * __all__ = ['station','event','event_reader','date_to_timestamp','coincidence']
 * __author__ = 'Martin Quarda <hinogary@gmail.com>'
 * system_encoding = sys.getfilesystemencoding()             # <<<<<<<<<<<<<<
 * 
 * cpdef int date_to_timestamp(d):
 */
  __pyx_t_2 = __Pyx_GetModuleGlobalName(__pyx_n_s_sys); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_2, __pyx_n_s_getfilesystemencoding); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_system_encoding, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/station.pxi":52
 * 
 *     @staticmethod
 *     def load(file = None):             # <<<<<<<<<<<<<<
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 *         cdef Station st
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6czelta_7station_7load, NULL, __pyx_n_s_czelta); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/martin/Plocha/czelta-python/station.pxi":51
 *         return corrections
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def load(file = None):
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6czelta_station->tp_dict, __pyx_n_s_load, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6czelta_station);

  /* "/home/martin/Plocha/czelta-python/station.pxi":52
 * 
 *     @staticmethod
 *     def load(file = None):             # <<<<<<<<<<<<<<
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 *         cdef Station st
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6czelta_station, __pyx_n_s_load); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/martin/Plocha/czelta-python/station.pxi":51
 *         return corrections
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def load(file = None):
 *         "Loads configuration file of stations. Must be called if you want to work with ``czelta.station``."
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6czelta_station->tp_dict, __pyx_n_s_load, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6czelta_station);

  /* "/home/martin/Plocha/czelta-python/station.pxi":88
 * 
 *     @staticmethod
 *     def get_stations():             # <<<<<<<<<<<<<<
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6czelta_7station_9get_stations, NULL, __pyx_n_s_czelta); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/martin/Plocha/czelta-python/station.pxi":87
 *                 print "Station can't be added, bad format of JSON, id: "+str(st.id())+", name: "+st_name
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_stations():
 *         "Return list of all available stations."
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6czelta_station->tp_dict, __pyx_n_s_get_stations, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6czelta_station);

  /* "/home/martin/Plocha/czelta-python/station.pxi":88
 * 
 *     @staticmethod
 *     def get_stations():             # <<<<<<<<<<<<<<
 *         "Return list of all available stations."
 *         cdef vector[p_Station] stations = getStations()
 */
  __pyx_t_2 = __Pyx_GetNameInClass((PyObject *)__pyx_ptype_6czelta_station, __pyx_n_s_get_stations); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/martin/Plocha/czelta-python/station.pxi":87
 *                 print "Station can't be added, bad format of JSON, id: "+str(st.id())+", name: "+st_name
 * 
 *     @staticmethod             # <<<<<<<<<<<<<<
 *     def get_stations():
 *         "Return list of all available stations."
 */
  __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_2);
  __Pyx_GIVEREF(__pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_staticmethod, __pyx_t_1, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  if (PyDict_SetItem((PyObject *)__pyx_ptype_6czelta_station->tp_dict, __pyx_n_s_get_stations, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  PyType_Modified(__pyx_ptype_6czelta_station);

  /* "czelta.pyx":28
 * 
 * #autoload config_data.JSON if avaible
 * try:             # <<<<<<<<<<<<<<
 *     import distutils.sysconfig
 *     station.load(open(distutils.sysconfig.get_python_lib()+os.sep+"config_data.JSON"))
 */
  {
    __Pyx_ExceptionSave(&__pyx_t_3, &__pyx_t_4, &__pyx_t_5);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_5);
    /*try:*/ {

      /* "czelta.pyx":29
 * #autoload config_data.JSON if avaible
 * try:
 *     import distutils.sysconfig             # <<<<<<<<<<<<<<
 *     station.load(open(distutils.sysconfig.get_python_lib()+os.sep+"config_data.JSON"))
 * except:
 */
      __pyx_t_2 = __Pyx_Import(__pyx_n_s_distutils_sysconfig, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_2);
      if (PyDict_SetItem(__pyx_d, __pyx_n_s_distutils, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

      /* "czelta.pyx":30
 * try:
 *     import distutils.sysconfig
 *     station.load(open(distutils.sysconfig.get_python_lib()+os.sep+"config_data.JSON"))             # <<<<<<<<<<<<<<
 * except:
 *     try:
 */
      __pyx_t_2 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_n_s_load); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_2);
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_distutils); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_6 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sysconfig); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_PyObject_GetAttrStr(__pyx_t_6, __pyx_n_s_get_python_lib); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __pyx_t_6 = __Pyx_PyObject_Call(__pyx_t_1, __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = __Pyx_GetModuleGlobalName(__pyx_n_s_os); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __pyx_t_7 = __Pyx_PyObject_GetAttrStr(__pyx_t_1, __pyx_n_s_sep); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyNumber_Add(__pyx_t_6, __pyx_t_7); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __pyx_t_7 = PyNumber_Add(__pyx_t_1, __pyx_kp_s_config_data_JSON); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __pyx_t_1 = PyTuple_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_1);
      PyTuple_SET_ITEM(__pyx_t_1, 0, __pyx_t_7);
      __Pyx_GIVEREF(__pyx_t_7);
      __pyx_t_7 = 0;
      __pyx_t_7 = __Pyx_PyObject_Call(__pyx_t_2, __pyx_t_1, NULL); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 30; __pyx_clineno = __LINE__; goto __pyx_L2_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
    }
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_XDECREF(__pyx_t_5); __pyx_t_5 = 0;
    goto __pyx_L9_try_end;
    __pyx_L2_error:;
    __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_1); __pyx_t_1 = 0;
    __Pyx_XDECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "czelta.pyx":31
 *     import distutils.sysconfig
 *     station.load(open(distutils.sysconfig.get_python_lib()+os.sep+"config_data.JSON"))
 * except:             # <<<<<<<<<<<<<<
 *     try:
 *         station.load(open("config_data.JSON"))
 */
    /*except:*/ {
      __Pyx_AddTraceback("czelta", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_7, &__pyx_t_1, &__pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L4_except_error;}
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_1);
      __Pyx_GOTREF(__pyx_t_2);

      /* "czelta.pyx":32
 *     station.load(open(distutils.sysconfig.get_python_lib()+os.sep+"config_data.JSON"))
 * except:
 *     try:             # <<<<<<<<<<<<<<
 *         station.load(open("config_data.JSON"))
 *     except:
 */
      {
        __Pyx_ExceptionSave(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10);
        __Pyx_XGOTREF(__pyx_t_8);
        __Pyx_XGOTREF(__pyx_t_9);
        __Pyx_XGOTREF(__pyx_t_10);
        /*try:*/ {

          /* "czelta.pyx":33
 * except:
 *     try:
 *         station.load(open("config_data.JSON"))             # <<<<<<<<<<<<<<
 *     except:
 *         pass
 */
          __pyx_t_6 = __Pyx_PyObject_GetAttrStr(((PyObject *)((PyObject*)__pyx_ptype_6czelta_station)), __pyx_n_s_load); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
          __Pyx_GOTREF(__pyx_t_6);
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_open, __pyx_tuple__39, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __pyx_t_12 = PyTuple_New(1); if (unlikely(!__pyx_t_12)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
          __Pyx_GOTREF(__pyx_t_12);
          PyTuple_SET_ITEM(__pyx_t_12, 0, __pyx_t_11);
          __Pyx_GIVEREF(__pyx_t_11);
          __pyx_t_11 = 0;
          __pyx_t_11 = __Pyx_PyObject_Call(__pyx_t_6, __pyx_t_12, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L12_error;}
          __Pyx_GOTREF(__pyx_t_11);
          __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
          __Pyx_DECREF(__pyx_t_12); __pyx_t_12 = 0;
          __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
        }
        __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;
        __Pyx_XDECREF(__pyx_t_9); __pyx_t_9 = 0;
        __Pyx_XDECREF(__pyx_t_10); __pyx_t_10 = 0;
        goto __pyx_L19_try_end;
        __pyx_L12_error:;
        __Pyx_XDECREF(__pyx_t_6); __pyx_t_6 = 0;
        __Pyx_XDECREF(__pyx_t_12); __pyx_t_12 = 0;
        __Pyx_XDECREF(__pyx_t_11); __pyx_t_11 = 0;

        /* "czelta.pyx":34
 *     try:
 *         station.load(open("config_data.JSON"))
 *     except:             # <<<<<<<<<<<<<<
 *         pass
 * 
 */
        /*except:*/ {
          PyErr_Restore(0,0,0);
          goto __pyx_L13_exception_handled;
        }
        __pyx_L13_exception_handled:;
        __Pyx_XGIVEREF(__pyx_t_8);
        __Pyx_XGIVEREF(__pyx_t_9);
        __Pyx_XGIVEREF(__pyx_t_10);
        __Pyx_ExceptionReset(__pyx_t_8, __pyx_t_9, __pyx_t_10);
        __pyx_L19_try_end:;
      }
      __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;
      __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
      __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
      goto __pyx_L3_exception_handled;
    }
    __pyx_L4_except_error:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    goto __pyx_L1_error;
    __pyx_L3_exception_handled:;
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_XGIVEREF(__pyx_t_5);
    __Pyx_ExceptionReset(__pyx_t_3, __pyx_t_4, __pyx_t_5);
    __pyx_L9_try_end:;
  }

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":1
 * import numpy as np             # <<<<<<<<<<<<<<
 * cimport numpy as np
 * cimport libc.math as m
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_numpy, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_np, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":4
 * cimport numpy as np
 * cimport libc.math as m
 * import pylab             # <<<<<<<<<<<<<<
 * import sys
 * from cython.parallel import parallel, prange
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_pylab, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_pylab, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 4; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":5
 * cimport libc.math as m
 * import pylab
 * import sys             # <<<<<<<<<<<<<<
 * from cython.parallel import parallel, prange
 * cimport cython
 */
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_sys, 0, -1); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_sys, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 5; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":13
 *     return m.acos(sum)
 * 
 * class MeteoData:             # <<<<<<<<<<<<<<
 *     def __init__(self, path, begin):
 *         self.path = path
 */
  __pyx_t_2 = __Pyx_Py3MetaclassPrepare((PyObject *) NULL, __pyx_empty_tuple, __pyx_n_s_MeteoData, __pyx_n_s_MeteoData, (PyObject *) NULL, __pyx_n_s_czelta, (PyObject *) NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":14
 * 
 * class MeteoData:
 *     def __init__(self, path, begin):             # <<<<<<<<<<<<<<
 *         self.path = path
 *         self.time = begin
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6czelta_9MeteoData_1__init__, 0, __pyx_n_s_MeteoData___init, NULL, __pyx_n_s_czelta, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__41)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_init, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 14; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":23
 *         self.loadfile()
 * 
 *     def __iter__(self):             # <<<<<<<<<<<<<<
 *         return self
 *     def __next__(self):
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6czelta_9MeteoData_3__iter__, 0, __pyx_n_s_MeteoData___iter, NULL, __pyx_n_s_czelta, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__43)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_iter, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":25
 *     def __iter__(self):
 *         return self
 *     def __next__(self):             # <<<<<<<<<<<<<<
 *         return self.next()
 * 
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6czelta_9MeteoData_5__next__, 0, __pyx_n_s_MeteoData___next, NULL, __pyx_n_s_czelta, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__45)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_next_2, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":28
 *         return self.next()
 * 
 *     def next(self):             # <<<<<<<<<<<<<<
 *         try:
 *             line = self.file_iter.__next__()
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6czelta_9MeteoData_7next, 0, __pyx_n_s_MeteoData_next, NULL, __pyx_n_s_czelta, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__47)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_next, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":60
 *                 return self.next()
 *         return self
 *     def loadfile(self):             # <<<<<<<<<<<<<<
 *         self.file = open("%s%i-%02i.txt"%(self.path, self.file_year, self.file_month))
 *         self.file_iter = self.file.__iter__()
 */
  __pyx_t_1 = __Pyx_CyFunction_NewEx(&__pyx_mdef_6czelta_9MeteoData_9loadfile, 0, __pyx_n_s_MeteoData_loadfile, NULL, __pyx_n_s_czelta, PyModule_GetDict(__pyx_m), ((PyObject *)__pyx_codeobj__49)); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyObject_SetItem(__pyx_t_2, __pyx_n_s_loadfile, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 60; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":13
 *     return m.acos(sum)
 * 
 * class MeteoData:             # <<<<<<<<<<<<<<
 *     def __init__(self, path, begin):
 *         self.path = path
 */
  __pyx_t_1 = __Pyx_Py3ClassCreate(((PyObject*)&__Pyx_DefaultClassType), __pyx_n_s_MeteoData, __pyx_empty_tuple, __pyx_t_2, NULL, 0, 1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_MeteoData, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":64
 *         self.file_iter = self.file.__iter__()
 * 
 * def mapa_smeru(double citlivost = 5,f = None, path = '~/data/pardubice_spse.dat', int scale = 1, float mm=0, float b=0):             # <<<<<<<<<<<<<<
 *     scale*=2
 *     if scale == 0:
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6czelta_3mapa_smeru, NULL, __pyx_n_s_czelta); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_mapa_smeru, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 64; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "/home/martin/Plocha/czelta-python/my_analysis.pxi":294
 * 
 * #closed
 * def moon_check(double citlivost = 5, path = '~/data/pardubice_spse.dat', filter = None):             # <<<<<<<<<<<<<<
 *     cdef event_reader er = event_reader(path)
 *     def f(e):
 */
  __pyx_t_2 = PyCFunction_NewEx(&__pyx_mdef_6czelta_5moon_check, NULL, __pyx_n_s_czelta); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_moon_check, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[4]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "czelta.pyx":1
 * #author: Martin Quarda             # <<<<<<<<<<<<<<
 * 
 * import datetime
 */
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":63
 * 
 * @cname("__pyx_convert_vector_to_py_double")
 * cdef object __pyx_convert_vector_to_py_double(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_XDECREF(__pyx_t_12);
  if (__pyx_m) {
    __Pyx_AddTraceback("init czelta", __pyx_clineno, __pyx_lineno, __pyx_filename);
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init czelta");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* Runtime support code */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif /* CYTHON_REFNANNY */

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else /* Python 3+ */
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                if (PyObject_IsSubclass(instance_class, type)) {
                    type = instance_class;
                } else {
                    instance_class = NULL;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE int __Pyx_PyObject_Append(PyObject* L, PyObject* x) {
    if (likely(PyList_CheckExact(L))) {
        if (unlikely(__Pyx_PyList_Append(L, x) < 0)) return -1;
    } else {
        PyObject* retval = __Pyx_PyObject_CallMethod1(L, __pyx_n_s_append, x);
        if (unlikely(!retval))
            return -1;
        Py_DECREF(retval);
    }
    return 0;
}

static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Generic(PyObject *o, PyObject* j) {
    PyObject *r;
    if (!j) return NULL;
    r = PyObject_GetItem(o, j);
    Py_DECREF(j);
    return r;
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_List_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyList_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyList_GET_SIZE(o)))) {
        PyObject *r = PyList_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Tuple_Fast(PyObject *o, Py_ssize_t i,
                                                              int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (wraparound & unlikely(i < 0)) i += PyTuple_GET_SIZE(o);
    if ((!boundscheck) || likely((0 <= i) & (i < PyTuple_GET_SIZE(o)))) {
        PyObject *r = PyTuple_GET_ITEM(o, i);
        Py_INCREF(r);
        return r;
    }
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
#else
    return PySequence_GetItem(o, i);
#endif
}
static CYTHON_INLINE PyObject *__Pyx_GetItemInt_Fast(PyObject *o, Py_ssize_t i,
                                                     int is_list, int wraparound, int boundscheck) {
#if CYTHON_COMPILING_IN_CPYTHON
    if (is_list || PyList_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyList_GET_SIZE(o);
        if ((!boundscheck) || (likely((n >= 0) & (n < PyList_GET_SIZE(o))))) {
            PyObject *r = PyList_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    }
    else if (PyTuple_CheckExact(o)) {
        Py_ssize_t n = ((!wraparound) | likely(i >= 0)) ? i : i + PyTuple_GET_SIZE(o);
        if ((!boundscheck) || likely((n >= 0) & (n < PyTuple_GET_SIZE(o)))) {
            PyObject *r = PyTuple_GET_ITEM(o, n);
            Py_INCREF(r);
            return r;
        }
    } else {
        PySequenceMethods *m = Py_TYPE(o)->tp_as_sequence;
        if (likely(m && m->sq_item)) {
            if (wraparound && unlikely(i < 0) && likely(m->sq_length)) {
                Py_ssize_t l = m->sq_length(o);
                if (likely(l >= 0)) {
                    i += l;
                } else {
                    if (PyErr_ExceptionMatches(PyExc_OverflowError))
                        PyErr_Clear();
                    else
                        return NULL;
                }
            }
            return m->sq_item(o, i);
        }
    }
#else
    if (is_list || PySequence_Check(o)) {
        return PySequence_GetItem(o, i);
    }
#endif
    return __Pyx_GetItemInt_Generic(o, PyInt_FromSsize_t(i));
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        #if CYTHON_PEP393_ENABLED
        if (unlikely(PyUnicode_READY(s1) < 0) || unlikely(PyUnicode_READY(s2) < 0))
            return -1;
        #endif
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE PyObject* __Pyx_PyObject_GetSlice(
        PyObject* obj, Py_ssize_t cstart, Py_ssize_t cstop,
        PyObject** _py_start, PyObject** _py_stop, PyObject** _py_slice,
        int has_cstart, int has_cstop, CYTHON_UNUSED int wraparound) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyMappingMethods* mp;
#if PY_MAJOR_VERSION < 3
    PySequenceMethods* ms = Py_TYPE(obj)->tp_as_sequence;
    if (likely(ms && ms->sq_slice)) {
        if (!has_cstart) {
            if (_py_start && (*_py_start != Py_None)) {
                cstart = __Pyx_PyIndex_AsSsize_t(*_py_start);
                if ((cstart == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstart = 0;
        }
        if (!has_cstop) {
            if (_py_stop && (*_py_stop != Py_None)) {
                cstop = __Pyx_PyIndex_AsSsize_t(*_py_stop);
                if ((cstop == (Py_ssize_t)-1) && PyErr_Occurred()) goto bad;
            } else
                cstop = PY_SSIZE_T_MAX;
        }
        if (wraparound && unlikely((cstart < 0) | (cstop < 0)) && likely(ms->sq_length)) {
            Py_ssize_t l = ms->sq_length(obj);
            if (likely(l >= 0)) {
                if (cstop < 0) {
                    cstop += l;
                    if (cstop < 0) cstop = 0;
                }
                if (cstart < 0) {
                    cstart += l;
                    if (cstart < 0) cstart = 0;
                }
            } else {
                if (PyErr_ExceptionMatches(PyExc_OverflowError))
                    PyErr_Clear();
                else
                    goto bad;
            }
        }
        return ms->sq_slice(obj, cstart, cstop);
    }
#endif
    mp = Py_TYPE(obj)->tp_as_mapping;
    if (likely(mp && mp->mp_subscript))
#endif
    {
        PyObject* result;
        PyObject *py_slice, *py_start, *py_stop;
        if (_py_slice) {
            py_slice = *_py_slice;
        } else {
            PyObject* owned_start = NULL;
            PyObject* owned_stop = NULL;
            if (_py_start) {
                py_start = *_py_start;
            } else {
                if (has_cstart) {
                    owned_start = py_start = PyInt_FromSsize_t(cstart);
                    if (unlikely(!py_start)) goto bad;
                } else
                    py_start = Py_None;
            }
            if (_py_stop) {
                py_stop = *_py_stop;
            } else {
                if (has_cstop) {
                    owned_stop = py_stop = PyInt_FromSsize_t(cstop);
                    if (unlikely(!py_stop)) {
                        Py_XDECREF(owned_start);
                        goto bad;
                    }
                } else
                    py_stop = Py_None;
            }
            py_slice = PySlice_New(py_start, py_stop, Py_None);
            Py_XDECREF(owned_start);
            Py_XDECREF(owned_stop);
            if (unlikely(!py_slice)) goto bad;
        }
#if CYTHON_COMPILING_IN_CPYTHON
        result = mp->mp_subscript(obj, py_slice);
#else
        result = PyObject_GetItem(obj, py_slice);
#endif
        if (!_py_slice) {
            Py_DECREF(py_slice);
        }
        return result;
    }
    PyErr_Format(PyExc_TypeError,
        "'%.200s' object is unsliceable", Py_TYPE(obj)->tp_name);
bad:
    return NULL;
}

static CYTHON_INLINE int __Pyx_TypeTest(PyObject *obj, PyTypeObject *type) {
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (likely(PyObject_TypeCheck(obj, type)))
        return 1;
    PyErr_Format(PyExc_TypeError, "Cannot convert %.200s to %.200s",
                 Py_TYPE(obj)->tp_name, type->tp_name);
    return 0;
}

static double __Pyx__PyObject_AsDouble(PyObject* obj) {
    PyObject* float_value;
#if CYTHON_COMPILING_IN_PYPY
    float_value = PyNumber_Float(obj);
#else
    PyNumberMethods *nb = Py_TYPE(obj)->tp_as_number;
    if (likely(nb) && likely(nb->nb_float)) {
        float_value = nb->nb_float(obj);
        if (likely(float_value) && unlikely(!PyFloat_Check(float_value))) {
            PyErr_Format(PyExc_TypeError,
                "__float__ returned non-float (type %.200s)",
                Py_TYPE(float_value)->tp_name);
            Py_DECREF(float_value);
            goto bad;
        }
    } else if (PyUnicode_CheckExact(obj) || PyBytes_CheckExact(obj)) {
#if PY_MAJOR_VERSION >= 3
        float_value = PyFloat_FromString(obj);
#else
        float_value = PyFloat_FromString(obj, 0);
#endif
    } else {
        PyObject* args = PyTuple_New(1);
        if (unlikely(!args)) goto bad;
        PyTuple_SET_ITEM(args, 0, obj);
        float_value = PyObject_Call((PyObject*)&PyFloat_Type, args, 0);
        PyTuple_SET_ITEM(args, 0, 0);
        Py_DECREF(args);
    }
#endif
    if (likely(float_value)) {
        double value = PyFloat_AS_DOUBLE(float_value);
        Py_DECREF(float_value);
        return value;
    }
bad:
    return (double)-1;
}

static CYTHON_INLINE long __Pyx_div_long(long a, long b) {
    long q = a / b;
    long r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE int __Pyx_IsLittleEndian(void) {
  unsigned int n = 1;
  return *(unsigned char*)(&n) != 0;
}
static void __Pyx_BufFmt_Init(__Pyx_BufFmt_Context* ctx,
                              __Pyx_BufFmt_StackElem* stack,
                              __Pyx_TypeInfo* type) {
  stack[0].field = &ctx->root;
  stack[0].parent_offset = 0;
  ctx->root.type = type;
  ctx->root.name = "buffer dtype";
  ctx->root.offset = 0;
  ctx->head = stack;
  ctx->head->field = &ctx->root;
  ctx->fmt_offset = 0;
  ctx->head->parent_offset = 0;
  ctx->new_packmode = '@';
  ctx->enc_packmode = '@';
  ctx->new_count = 1;
  ctx->enc_count = 0;
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  ctx->is_valid_array = 0;
  ctx->struct_alignment = 0;
  while (type->typegroup == 'S') {
    ++ctx->head;
    ctx->head->field = type->fields;
    ctx->head->parent_offset = 0;
    type = type->fields->type;
  }
}
static int __Pyx_BufFmt_ParseNumber(const char** ts) {
    int count;
    const char* t = *ts;
    if (*t < '0' || *t > '9') {
      return -1;
    } else {
        count = *t++ - '0';
        while (*t >= '0' && *t < '9') {
            count *= 10;
            count += *t++ - '0';
        }
    }
    *ts = t;
    return count;
}
static int __Pyx_BufFmt_ExpectNumber(const char **ts) {
    int number = __Pyx_BufFmt_ParseNumber(ts);
    if (number == -1) /* First char was not a digit */
        PyErr_Format(PyExc_ValueError,\
                     "Does not understand character buffer dtype format string ('%c')", **ts);
    return number;
}
static void __Pyx_BufFmt_RaiseUnexpectedChar(char ch) {
  PyErr_Format(PyExc_ValueError,
               "Unexpected format string character: '%c'", ch);
}
static const char* __Pyx_BufFmt_DescribeTypeChar(char ch, int is_complex) {
  switch (ch) {
    case 'c': return "'char'";
    case 'b': return "'signed char'";
    case 'B': return "'unsigned char'";
    case 'h': return "'short'";
    case 'H': return "'unsigned short'";
    case 'i': return "'int'";
    case 'I': return "'unsigned int'";
    case 'l': return "'long'";
    case 'L': return "'unsigned long'";
    case 'q': return "'long long'";
    case 'Q': return "'unsigned long long'";
    case 'f': return (is_complex ? "'complex float'" : "'float'");
    case 'd': return (is_complex ? "'complex double'" : "'double'");
    case 'g': return (is_complex ? "'complex long double'" : "'long double'");
    case 'T': return "a struct";
    case 'O': return "Python object";
    case 'P': return "a pointer";
    case 's': case 'p': return "a string";
    case 0: return "end";
    default: return "unparseable format string";
  }
}
static size_t __Pyx_BufFmt_TypeCharToStandardSize(char ch, int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return 2;
    case 'i': case 'I': case 'l': case 'L': return 4;
    case 'q': case 'Q': return 8;
    case 'f': return (is_complex ? 8 : 4);
    case 'd': return (is_complex ? 16 : 8);
    case 'g': {
      PyErr_SetString(PyExc_ValueError, "Python does not define a standard format string size for long double ('g')..");
      return 0;
    }
    case 'O': case 'P': return sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static size_t __Pyx_BufFmt_TypeCharToNativeSize(char ch, int is_complex) {
  switch (ch) {
    case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(short);
    case 'i': case 'I': return sizeof(int);
    case 'l': case 'L': return sizeof(long);
    #ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(PY_LONG_LONG);
    #endif
    case 'f': return sizeof(float) * (is_complex ? 2 : 1);
    case 'd': return sizeof(double) * (is_complex ? 2 : 1);
    case 'g': return sizeof(long double) * (is_complex ? 2 : 1);
    case 'O': case 'P': return sizeof(void*);
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
typedef struct { char c; short x; } __Pyx_st_short;
typedef struct { char c; int x; } __Pyx_st_int;
typedef struct { char c; long x; } __Pyx_st_long;
typedef struct { char c; float x; } __Pyx_st_float;
typedef struct { char c; double x; } __Pyx_st_double;
typedef struct { char c; long double x; } __Pyx_st_longdouble;
typedef struct { char c; void *x; } __Pyx_st_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { char c; PY_LONG_LONG x; } __Pyx_st_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToAlignment(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_st_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_st_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_st_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_st_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_st_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_st_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_st_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_st_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
/* These are for computing the padding at the end of the struct to align
   on the first member of the struct. This will probably the same as above,
   but we don't have any guarantees.
 */
typedef struct { short x; char c; } __Pyx_pad_short;
typedef struct { int x; char c; } __Pyx_pad_int;
typedef struct { long x; char c; } __Pyx_pad_long;
typedef struct { float x; char c; } __Pyx_pad_float;
typedef struct { double x; char c; } __Pyx_pad_double;
typedef struct { long double x; char c; } __Pyx_pad_longdouble;
typedef struct { void *x; char c; } __Pyx_pad_void_p;
#ifdef HAVE_LONG_LONG
typedef struct { PY_LONG_LONG x; char c; } __Pyx_pad_longlong;
#endif
static size_t __Pyx_BufFmt_TypeCharToPadding(char ch, CYTHON_UNUSED int is_complex) {
  switch (ch) {
    case '?': case 'c': case 'b': case 'B': case 's': case 'p': return 1;
    case 'h': case 'H': return sizeof(__Pyx_pad_short) - sizeof(short);
    case 'i': case 'I': return sizeof(__Pyx_pad_int) - sizeof(int);
    case 'l': case 'L': return sizeof(__Pyx_pad_long) - sizeof(long);
#ifdef HAVE_LONG_LONG
    case 'q': case 'Q': return sizeof(__Pyx_pad_longlong) - sizeof(PY_LONG_LONG);
#endif
    case 'f': return sizeof(__Pyx_pad_float) - sizeof(float);
    case 'd': return sizeof(__Pyx_pad_double) - sizeof(double);
    case 'g': return sizeof(__Pyx_pad_longdouble) - sizeof(long double);
    case 'P': case 'O': return sizeof(__Pyx_pad_void_p) - sizeof(void*);
    default:
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
}
static char __Pyx_BufFmt_TypeCharToGroup(char ch, int is_complex) {
  switch (ch) {
    case 'c':
        return 'H';
    case 'b': case 'h': case 'i':
    case 'l': case 'q': case 's': case 'p':
        return 'I';
    case 'B': case 'H': case 'I': case 'L': case 'Q':
        return 'U';
    case 'f': case 'd': case 'g':
        return (is_complex ? 'C' : 'R');
    case 'O':
        return 'O';
    case 'P':
        return 'P';
    default: {
      __Pyx_BufFmt_RaiseUnexpectedChar(ch);
      return 0;
    }
  }
}
static void __Pyx_BufFmt_RaiseExpected(__Pyx_BufFmt_Context* ctx) {
  if (ctx->head == NULL || ctx->head->field == &ctx->root) {
    const char* expected;
    const char* quote;
    if (ctx->head == NULL) {
      expected = "end";
      quote = "";
    } else {
      expected = ctx->head->field->type->name;
      quote = "'";
    }
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected %s%s%s but got %s",
                 quote, expected, quote,
                 __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex));
  } else {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_StructField* parent = (ctx->head - 1)->field;
    PyErr_Format(PyExc_ValueError,
                 "Buffer dtype mismatch, expected '%s' but got %s in '%s.%s'",
                 field->type->name, __Pyx_BufFmt_DescribeTypeChar(ctx->enc_type, ctx->is_complex),
                 parent->type->name, field->name);
  }
}
static int __Pyx_BufFmt_ProcessTypeChunk(__Pyx_BufFmt_Context* ctx) {
  char group;
  size_t size, offset, arraysize = 1;
  if (ctx->enc_type == 0) return 0;
  if (ctx->head->field->type->arraysize[0]) {
    int i, ndim = 0;
    if (ctx->enc_type == 's' || ctx->enc_type == 'p') {
        ctx->is_valid_array = ctx->head->field->type->ndim == 1;
        ndim = 1;
        if (ctx->enc_count != ctx->head->field->type->arraysize[0]) {
            PyErr_Format(PyExc_ValueError,
                         "Expected a dimension of size %zu, got %zu",
                         ctx->head->field->type->arraysize[0], ctx->enc_count);
            return -1;
        }
    }
    if (!ctx->is_valid_array) {
      PyErr_Format(PyExc_ValueError, "Expected %d dimensions, got %d",
                   ctx->head->field->type->ndim, ndim);
      return -1;
    }
    for (i = 0; i < ctx->head->field->type->ndim; i++) {
      arraysize *= ctx->head->field->type->arraysize[i];
    }
    ctx->is_valid_array = 0;
    ctx->enc_count = 1;
  }
  group = __Pyx_BufFmt_TypeCharToGroup(ctx->enc_type, ctx->is_complex);
  do {
    __Pyx_StructField* field = ctx->head->field;
    __Pyx_TypeInfo* type = field->type;
    if (ctx->enc_packmode == '@' || ctx->enc_packmode == '^') {
      size = __Pyx_BufFmt_TypeCharToNativeSize(ctx->enc_type, ctx->is_complex);
    } else {
      size = __Pyx_BufFmt_TypeCharToStandardSize(ctx->enc_type, ctx->is_complex);
    }
    if (ctx->enc_packmode == '@') {
      size_t align_at = __Pyx_BufFmt_TypeCharToAlignment(ctx->enc_type, ctx->is_complex);
      size_t align_mod_offset;
      if (align_at == 0) return -1;
      align_mod_offset = ctx->fmt_offset % align_at;
      if (align_mod_offset > 0) ctx->fmt_offset += align_at - align_mod_offset;
      if (ctx->struct_alignment == 0)
          ctx->struct_alignment = __Pyx_BufFmt_TypeCharToPadding(ctx->enc_type,
                                                                 ctx->is_complex);
    }
    if (type->size != size || type->typegroup != group) {
      if (type->typegroup == 'C' && type->fields != NULL) {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        ++ctx->head;
        ctx->head->field = type->fields;
        ctx->head->parent_offset = parent_offset;
        continue;
      }
      if ((type->typegroup == 'H' || group == 'H') && type->size == size) {
      } else {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
      }
    }
    offset = ctx->head->parent_offset + field->offset;
    if (ctx->fmt_offset != offset) {
      PyErr_Format(PyExc_ValueError,
                   "Buffer dtype mismatch; next field is at offset %" CYTHON_FORMAT_SSIZE_T "d but %" CYTHON_FORMAT_SSIZE_T "d expected",
                   (Py_ssize_t)ctx->fmt_offset, (Py_ssize_t)offset);
      return -1;
    }
    ctx->fmt_offset += size;
    if (arraysize)
      ctx->fmt_offset += (arraysize - 1) * size;
    --ctx->enc_count; /* Consume from buffer string */
    while (1) {
      if (field == &ctx->root) {
        ctx->head = NULL;
        if (ctx->enc_count != 0) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return -1;
        }
        break; /* breaks both loops as ctx->enc_count == 0 */
      }
      ctx->head->field = ++field;
      if (field->type == NULL) {
        --ctx->head;
        field = ctx->head->field;
        continue;
      } else if (field->type->typegroup == 'S') {
        size_t parent_offset = ctx->head->parent_offset + field->offset;
        if (field->type->fields->type == NULL) continue; /* empty struct */
        field = field->type->fields;
        ++ctx->head;
        ctx->head->field = field;
        ctx->head->parent_offset = parent_offset;
        break;
      } else {
        break;
      }
    }
  } while (ctx->enc_count);
  ctx->enc_type = 0;
  ctx->is_complex = 0;
  return 0;
}
static CYTHON_INLINE PyObject *
__pyx_buffmt_parse_array(__Pyx_BufFmt_Context* ctx, const char** tsp)
{
    const char *ts = *tsp;
    int i = 0, number;
    int ndim = ctx->head->field->type->ndim;
;
    ++ts;
    if (ctx->new_count != 1) {
        PyErr_SetString(PyExc_ValueError,
                        "Cannot handle repeated arrays in format string");
        return NULL;
    }
    if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
    while (*ts && *ts != ')') {
        switch (*ts) {
            case ' ': case '\f': case '\r': case '\n': case '\t': case '\v':  continue;
            default:  break;  /* not a 'break' in the loop */
        }
        number = __Pyx_BufFmt_ExpectNumber(&ts);
        if (number == -1) return NULL;
        if (i < ndim && (size_t) number != ctx->head->field->type->arraysize[i])
            return PyErr_Format(PyExc_ValueError,
                        "Expected a dimension of size %zu, got %d",
                        ctx->head->field->type->arraysize[i], number);
        if (*ts != ',' && *ts != ')')
            return PyErr_Format(PyExc_ValueError,
                                "Expected a comma in format string, got '%c'", *ts);
        if (*ts == ',') ts++;
        i++;
    }
    if (i != ndim)
        return PyErr_Format(PyExc_ValueError, "Expected %d dimension(s), got %d",
                            ctx->head->field->type->ndim, i);
    if (!*ts) {
        PyErr_SetString(PyExc_ValueError,
                        "Unexpected end of format string, expected ')'");
        return NULL;
    }
    ctx->is_valid_array = 1;
    ctx->new_count = 1;
    *tsp = ++ts;
    return Py_None;
}
static const char* __Pyx_BufFmt_CheckString(__Pyx_BufFmt_Context* ctx, const char* ts) {
  int got_Z = 0;
  while (1) {
    switch(*ts) {
      case 0:
        if (ctx->enc_type != 0 && ctx->head == NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        if (ctx->head != NULL) {
          __Pyx_BufFmt_RaiseExpected(ctx);
          return NULL;
        }
        return ts;
      case ' ':
      case '\r':
      case '\n':
        ++ts;
        break;
      case '<':
        if (!__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Little-endian buffer not supported on big-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '>':
      case '!':
        if (__Pyx_IsLittleEndian()) {
          PyErr_SetString(PyExc_ValueError, "Big-endian buffer not supported on little-endian compiler");
          return NULL;
        }
        ctx->new_packmode = '=';
        ++ts;
        break;
      case '=':
      case '@':
      case '^':
        ctx->new_packmode = *ts++;
        break;
      case 'T': /* substruct */
        {
          const char* ts_after_sub;
          size_t i, struct_count = ctx->new_count;
          size_t struct_alignment = ctx->struct_alignment;
          ctx->new_count = 1;
          ++ts;
          if (*ts != '{') {
            PyErr_SetString(PyExc_ValueError, "Buffer acquisition: Expected '{' after 'T'");
            return NULL;
          }
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          ctx->enc_count = 0;
          ctx->struct_alignment = 0;
          ++ts;
          ts_after_sub = ts;
          for (i = 0; i != struct_count; ++i) {
            ts_after_sub = __Pyx_BufFmt_CheckString(ctx, ts);
            if (!ts_after_sub) return NULL;
          }
          ts = ts_after_sub;
          if (struct_alignment) ctx->struct_alignment = struct_alignment;
        }
        break;
      case '}': /* end of substruct; either repeat or move on */
        {
          size_t alignment = ctx->struct_alignment;
          ++ts;
          if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
          ctx->enc_type = 0; /* Erase processed last struct element */
          if (alignment && ctx->fmt_offset % alignment) {
            ctx->fmt_offset += alignment - (ctx->fmt_offset % alignment);
          }
        }
        return ts;
      case 'x':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->fmt_offset += ctx->new_count;
        ctx->new_count = 1;
        ctx->enc_count = 0;
        ctx->enc_type = 0;
        ctx->enc_packmode = ctx->new_packmode;
        ++ts;
        break;
      case 'Z':
        got_Z = 1;
        ++ts;
        if (*ts != 'f' && *ts != 'd' && *ts != 'g') {
          __Pyx_BufFmt_RaiseUnexpectedChar('Z');
          return NULL;
        }
      case 'c': case 'b': case 'B': case 'h': case 'H': case 'i': case 'I':
      case 'l': case 'L': case 'q': case 'Q':
      case 'f': case 'd': case 'g':
      case 'O': case 'p':
        if (ctx->enc_type == *ts && got_Z == ctx->is_complex &&
            ctx->enc_packmode == ctx->new_packmode) {
          ctx->enc_count += ctx->new_count;
          ctx->new_count = 1;
          got_Z = 0;
          ++ts;
          break;
        }
      case 's':
        if (__Pyx_BufFmt_ProcessTypeChunk(ctx) == -1) return NULL;
        ctx->enc_count = ctx->new_count;
        ctx->enc_packmode = ctx->new_packmode;
        ctx->enc_type = *ts;
        ctx->is_complex = got_Z;
        ++ts;
        ctx->new_count = 1;
        got_Z = 0;
        break;
      case ':':
        ++ts;
        while(*ts != ':') ++ts;
        ++ts;
        break;
      case '(':
        if (!__pyx_buffmt_parse_array(ctx, &ts)) return NULL;
        break;
      default:
        {
          int number = __Pyx_BufFmt_ExpectNumber(&ts);
          if (number == -1) return NULL;
          ctx->new_count = (size_t)number;
        }
    }
  }
}
static CYTHON_INLINE void __Pyx_ZeroBuffer(Py_buffer* buf) {
  buf->buf = NULL;
  buf->obj = NULL;
  buf->strides = __Pyx_zeros;
  buf->shape = __Pyx_zeros;
  buf->suboffsets = __Pyx_minusones;
}
static CYTHON_INLINE int __Pyx_GetBufferAndValidate(
        Py_buffer* buf, PyObject* obj,  __Pyx_TypeInfo* dtype, int flags,
        int nd, int cast, __Pyx_BufFmt_StackElem* stack)
{
  if (obj == Py_None || obj == NULL) {
    __Pyx_ZeroBuffer(buf);
    return 0;
  }
  buf->buf = NULL;
  if (__Pyx_GetBuffer(obj, buf, flags) == -1) goto fail;
  if (buf->ndim != nd) {
    PyErr_Format(PyExc_ValueError,
                 "Buffer has wrong number of dimensions (expected %d, got %d)",
                 nd, buf->ndim);
    goto fail;
  }
  if (!cast) {
    __Pyx_BufFmt_Context ctx;
    __Pyx_BufFmt_Init(&ctx, stack, dtype);
    if (!__Pyx_BufFmt_CheckString(&ctx, buf->format)) goto fail;
  }
  if ((unsigned)buf->itemsize != dtype->size) {
    PyErr_Format(PyExc_ValueError,
      "Item size of buffer (%" CYTHON_FORMAT_SSIZE_T "d byte%s) does not match size of '%s' (%" CYTHON_FORMAT_SSIZE_T "d byte%s)",
      buf->itemsize, (buf->itemsize > 1) ? "s" : "",
      dtype->name, (Py_ssize_t)dtype->size, (dtype->size > 1) ? "s" : "");
    goto fail;
  }
  if (buf->suboffsets == NULL) buf->suboffsets = __Pyx_minusones;
  return 0;
fail:;
  __Pyx_ZeroBuffer(buf);
  return -1;
}
static CYTHON_INLINE void __Pyx_SafeReleaseBuffer(Py_buffer* info) {
  if (info->buf == NULL) return;
  if (info->suboffsets == __Pyx_minusones) info->suboffsets = NULL;
  __Pyx_ReleaseBuffer(info);
}

static CYTHON_INLINE int __Pyx_div_int(int a, int b) {
    int q = a / b;
    int r = a - q*b;
    q -= ((r != 0) & ((r ^ b) < 0));
    return q;
}

static CYTHON_INLINE void __Pyx_RaiseUnboundLocalError(const char *varname) {
    PyErr_Format(PyExc_UnboundLocalError, "local variable '%s' referenced before assignment", varname);
}

static CYTHON_INLINE long __Pyx_mod_long(long a, long b) {
    long r = a % b;
    r += ((r != 0) & ((r ^ b) < 0)) * b;
    return r;
}

static void __Pyx_RaiseBufferIndexError(int axis) {
  PyErr_Format(PyExc_IndexError,
     "Out of bounds on buffer access (axis %d)", axis);
}

static PyTypeObject* __Pyx_FetchCommonType(PyTypeObject* type) {
    PyObject* fake_module;
    PyTypeObject* cached_type = NULL;
    fake_module = PyImport_AddModule((char*) "_cython_" CYTHON_ABI);
    if (!fake_module) return NULL;
    Py_INCREF(fake_module);
    cached_type = (PyTypeObject*) PyObject_GetAttrString(fake_module, type->tp_name);
    if (cached_type) {
        if (!PyType_Check((PyObject*)cached_type)) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s is not a type object",
                type->tp_name);
            goto bad;
        }
        if (cached_type->tp_basicsize != type->tp_basicsize) {
            PyErr_Format(PyExc_TypeError,
                "Shared Cython type %.200s has the wrong size, try recompiling",
                type->tp_name);
            goto bad;
        }
    } else {
        if (!PyErr_ExceptionMatches(PyExc_AttributeError)) goto bad;
        PyErr_Clear();
        if (PyType_Ready(type) < 0) goto bad;
        if (PyObject_SetAttrString(fake_module, type->tp_name, (PyObject*) type) < 0)
            goto bad;
        Py_INCREF(type);
        cached_type = type;
    }
done:
    Py_DECREF(fake_module);
    return cached_type;
bad:
    Py_XDECREF(cached_type);
    cached_type = NULL;
    goto done;
}

static PyObject *
__Pyx_CyFunction_get_doc(__pyx_CyFunctionObject *op, CYTHON_UNUSED void *closure)
{
    if (unlikely(op->func_doc == NULL)) {
        if (op->func.m_ml->ml_doc) {
#if PY_MAJOR_VERSION >= 3
            op->func_doc = PyUnicode_FromString(op->func.m_ml->ml_doc);
#else
            op->func_doc = PyString_FromString(op->func.m_ml->ml_doc);
#endif
            if (unlikely(op->func_doc == NULL))
                return NULL;
        } else {
            Py_INCREF(Py_None);
            return Py_None;
        }
    }
    Py_INCREF(op->func_doc);
    return op->func_doc;
}
static int
__Pyx_CyFunction_set_doc(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp = op->func_doc;
    if (value == NULL)
        value = Py_None; /* Mark as deleted */
    Py_INCREF(value);
    op->func_doc = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_name(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_name == NULL)) {
#if PY_MAJOR_VERSION >= 3
        op->func_name = PyUnicode_InternFromString(op->func.m_ml->ml_name);
#else
        op->func_name = PyString_InternFromString(op->func.m_ml->ml_name);
#endif
        if (unlikely(op->func_name == NULL))
            return NULL;
    }
    Py_INCREF(op->func_name);
    return op->func_name;
}
static int
__Pyx_CyFunction_set_name(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__name__ must be set to a string object");
        return -1;
    }
    tmp = op->func_name;
    Py_INCREF(value);
    op->func_name = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_qualname(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_qualname);
    return op->func_qualname;
}
static int
__Pyx_CyFunction_set_qualname(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
#if PY_MAJOR_VERSION >= 3
    if (unlikely(value == NULL || !PyUnicode_Check(value))) {
#else
    if (unlikely(value == NULL || !PyString_Check(value))) {
#endif
        PyErr_SetString(PyExc_TypeError,
                        "__qualname__ must be set to a string object");
        return -1;
    }
    tmp = op->func_qualname;
    Py_INCREF(value);
    op->func_qualname = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_self(__pyx_CyFunctionObject *m, CYTHON_UNUSED void *closure)
{
    PyObject *self;
    self = m->func_closure;
    if (self == NULL)
        self = Py_None;
    Py_INCREF(self);
    return self;
}
static PyObject *
__Pyx_CyFunction_get_dict(__pyx_CyFunctionObject *op)
{
    if (unlikely(op->func_dict == NULL)) {
        op->func_dict = PyDict_New();
        if (unlikely(op->func_dict == NULL))
            return NULL;
    }
    Py_INCREF(op->func_dict);
    return op->func_dict;
}
static int
__Pyx_CyFunction_set_dict(__pyx_CyFunctionObject *op, PyObject *value)
{
    PyObject *tmp;
    if (unlikely(value == NULL)) {
        PyErr_SetString(PyExc_TypeError,
               "function's dictionary may not be deleted");
        return -1;
    }
    if (unlikely(!PyDict_Check(value))) {
        PyErr_SetString(PyExc_TypeError,
               "setting function's dictionary to a non-dict");
        return -1;
    }
    tmp = op->func_dict;
    Py_INCREF(value);
    op->func_dict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_globals(__pyx_CyFunctionObject *op)
{
    Py_INCREF(op->func_globals);
    return op->func_globals;
}
static PyObject *
__Pyx_CyFunction_get_closure(CYTHON_UNUSED __pyx_CyFunctionObject *op)
{
    Py_INCREF(Py_None);
    return Py_None;
}
static PyObject *
__Pyx_CyFunction_get_code(__pyx_CyFunctionObject *op)
{
    PyObject* result = (op->func_code) ? op->func_code : Py_None;
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_init_defaults(__pyx_CyFunctionObject *op) {
    PyObject *res = op->defaults_getter((PyObject *) op);
    if (unlikely(!res))
        return -1;
    op->defaults_tuple = PyTuple_GET_ITEM(res, 0);
    Py_INCREF(op->defaults_tuple);
    op->defaults_kwdict = PyTuple_GET_ITEM(res, 1);
    Py_INCREF(op->defaults_kwdict);
    Py_DECREF(res);
    return 0;
}
static int
__Pyx_CyFunction_set_defaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyTuple_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__defaults__ must be set to a tuple object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_tuple;
    op->defaults_tuple = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_defaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_tuple;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_tuple;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_kwdefaults(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value) {
        value = Py_None;
    } else if (value != Py_None && !PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__kwdefaults__ must be set to a dict object");
        return -1;
    }
    Py_INCREF(value);
    tmp = op->defaults_kwdict;
    op->defaults_kwdict = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_kwdefaults(__pyx_CyFunctionObject *op) {
    PyObject* result = op->defaults_kwdict;
    if (unlikely(!result)) {
        if (op->defaults_getter) {
            if (__Pyx_CyFunction_init_defaults(op) < 0) return NULL;
            result = op->defaults_kwdict;
        } else {
            result = Py_None;
        }
    }
    Py_INCREF(result);
    return result;
}
static int
__Pyx_CyFunction_set_annotations(__pyx_CyFunctionObject *op, PyObject* value) {
    PyObject* tmp;
    if (!value || value == Py_None) {
        value = NULL;
    } else if (!PyDict_Check(value)) {
        PyErr_SetString(PyExc_TypeError,
                        "__annotations__ must be set to a dict object");
        return -1;
    }
    Py_XINCREF(value);
    tmp = op->func_annotations;
    op->func_annotations = value;
    Py_XDECREF(tmp);
    return 0;
}
static PyObject *
__Pyx_CyFunction_get_annotations(__pyx_CyFunctionObject *op) {
    PyObject* result = op->func_annotations;
    if (unlikely(!result)) {
        result = PyDict_New();
        if (unlikely(!result)) return NULL;
        op->func_annotations = result;
    }
    Py_INCREF(result);
    return result;
}
static PyGetSetDef __pyx_CyFunction_getsets[] = {
    {(char *) "func_doc", (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "__doc__",  (getter)__Pyx_CyFunction_get_doc, (setter)__Pyx_CyFunction_set_doc, 0, 0},
    {(char *) "func_name", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__name__", (getter)__Pyx_CyFunction_get_name, (setter)__Pyx_CyFunction_set_name, 0, 0},
    {(char *) "__qualname__", (getter)__Pyx_CyFunction_get_qualname, (setter)__Pyx_CyFunction_set_qualname, 0, 0},
    {(char *) "__self__", (getter)__Pyx_CyFunction_get_self, 0, 0, 0},
    {(char *) "func_dict", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "__dict__", (getter)__Pyx_CyFunction_get_dict, (setter)__Pyx_CyFunction_set_dict, 0, 0},
    {(char *) "func_globals", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "__globals__", (getter)__Pyx_CyFunction_get_globals, 0, 0, 0},
    {(char *) "func_closure", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "__closure__", (getter)__Pyx_CyFunction_get_closure, 0, 0, 0},
    {(char *) "func_code", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "__code__", (getter)__Pyx_CyFunction_get_code, 0, 0, 0},
    {(char *) "func_defaults", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__defaults__", (getter)__Pyx_CyFunction_get_defaults, (setter)__Pyx_CyFunction_set_defaults, 0, 0},
    {(char *) "__kwdefaults__", (getter)__Pyx_CyFunction_get_kwdefaults, (setter)__Pyx_CyFunction_set_kwdefaults, 0, 0},
    {(char *) "__annotations__", (getter)__Pyx_CyFunction_get_annotations, (setter)__Pyx_CyFunction_set_annotations, 0, 0},
    {0, 0, 0, 0, 0}
};
#ifndef PY_WRITE_RESTRICTED /* < Py2.5 */
#define PY_WRITE_RESTRICTED WRITE_RESTRICTED
#endif
static PyMemberDef __pyx_CyFunction_members[] = {
    {(char *) "__module__", T_OBJECT, offsetof(__pyx_CyFunctionObject, func.m_module), PY_WRITE_RESTRICTED, 0},
    {0, 0, 0,  0, 0}
};
static PyObject *
__Pyx_CyFunction_reduce(__pyx_CyFunctionObject *m, CYTHON_UNUSED PyObject *args)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromString(m->func.m_ml->ml_name);
#else
    return PyString_FromString(m->func.m_ml->ml_name);
#endif
}
static PyMethodDef __pyx_CyFunction_methods[] = {
    {__Pyx_NAMESTR("__reduce__"), (PyCFunction)__Pyx_CyFunction_reduce, METH_VARARGS, 0},
    {0, 0, 0, 0}
};
static PyObject *__Pyx_CyFunction_New(PyTypeObject *type, PyMethodDef *ml, int flags, PyObject* qualname,
                                      PyObject *closure, PyObject *module, PyObject* globals, PyObject* code) {
    __pyx_CyFunctionObject *op = PyObject_GC_New(__pyx_CyFunctionObject, type);
    if (op == NULL)
        return NULL;
    op->flags = flags;
    op->func_weakreflist = NULL;
    op->func.m_ml = ml;
    op->func.m_self = (PyObject *) op;
    Py_XINCREF(closure);
    op->func_closure = closure;
    Py_XINCREF(module);
    op->func.m_module = module;
    op->func_dict = NULL;
    op->func_name = NULL;
    Py_INCREF(qualname);
    op->func_qualname = qualname;
    op->func_doc = NULL;
    op->func_classobj = NULL;
    op->func_globals = globals;
    Py_INCREF(op->func_globals);
    Py_XINCREF(code);
    op->func_code = code;
    op->defaults_pyobjects = 0;
    op->defaults = NULL;
    op->defaults_tuple = NULL;
    op->defaults_kwdict = NULL;
    op->defaults_getter = NULL;
    op->func_annotations = NULL;
    PyObject_GC_Track(op);
    return (PyObject *) op;
}
static int
__Pyx_CyFunction_clear(__pyx_CyFunctionObject *m)
{
    Py_CLEAR(m->func_closure);
    Py_CLEAR(m->func.m_module);
    Py_CLEAR(m->func_dict);
    Py_CLEAR(m->func_name);
    Py_CLEAR(m->func_qualname);
    Py_CLEAR(m->func_doc);
    Py_CLEAR(m->func_globals);
    Py_CLEAR(m->func_code);
    Py_CLEAR(m->func_classobj);
    Py_CLEAR(m->defaults_tuple);
    Py_CLEAR(m->defaults_kwdict);
    Py_CLEAR(m->func_annotations);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_XDECREF(pydefaults[i]);
        PyMem_Free(m->defaults);
        m->defaults = NULL;
    }
    return 0;
}
static void __Pyx_CyFunction_dealloc(__pyx_CyFunctionObject *m)
{
    PyObject_GC_UnTrack(m);
    if (m->func_weakreflist != NULL)
        PyObject_ClearWeakRefs((PyObject *) m);
    __Pyx_CyFunction_clear(m);
    PyObject_GC_Del(m);
}
static int __Pyx_CyFunction_traverse(__pyx_CyFunctionObject *m, visitproc visit, void *arg)
{
    Py_VISIT(m->func_closure);
    Py_VISIT(m->func.m_module);
    Py_VISIT(m->func_dict);
    Py_VISIT(m->func_name);
    Py_VISIT(m->func_qualname);
    Py_VISIT(m->func_doc);
    Py_VISIT(m->func_globals);
    Py_VISIT(m->func_code);
    Py_VISIT(m->func_classobj);
    Py_VISIT(m->defaults_tuple);
    Py_VISIT(m->defaults_kwdict);
    if (m->defaults) {
        PyObject **pydefaults = __Pyx_CyFunction_Defaults(PyObject *, m);
        int i;
        for (i = 0; i < m->defaults_pyobjects; i++)
            Py_VISIT(pydefaults[i]);
    }
    return 0;
}
static PyObject *__Pyx_CyFunction_descr_get(PyObject *func, PyObject *obj, PyObject *type)
{
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    if (m->flags & __Pyx_CYFUNCTION_STATICMETHOD) {
        Py_INCREF(func);
        return func;
    }
    if (m->flags & __Pyx_CYFUNCTION_CLASSMETHOD) {
        if (type == NULL)
            type = (PyObject *)(Py_TYPE(obj));
        return PyMethod_New(func,
                            type, (PyObject *)(Py_TYPE(type)));
    }
    if (obj == Py_None)
        obj = NULL;
    return PyMethod_New(func, obj, type);
}
static PyObject*
__Pyx_CyFunction_repr(__pyx_CyFunctionObject *op)
{
#if PY_MAJOR_VERSION >= 3
    return PyUnicode_FromFormat("<cyfunction %U at %p>",
                                op->func_qualname, (void *)op);
#else
    return PyString_FromFormat("<cyfunction %s at %p>",
                               PyString_AsString(op->func_qualname), (void *)op);
#endif
}
#if CYTHON_COMPILING_IN_PYPY
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyCFunctionObject* f = (PyCFunctionObject*)func;
    PyCFunction meth = PyCFunction_GET_FUNCTION(func);
    PyObject *self = PyCFunction_GET_SELF(func);
    Py_ssize_t size;
    switch (PyCFunction_GET_FLAGS(func) & ~(METH_CLASS | METH_STATIC | METH_COEXIST)) {
    case METH_VARARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0)
            return (*meth)(self, arg);
        break;
    case METH_VARARGS | METH_KEYWORDS:
        return (*(PyCFunctionWithKeywords)meth)(self, arg, kw);
    case METH_NOARGS:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 0)
                return (*meth)(self, NULL);
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes no arguments (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    case METH_O:
        if (likely(kw == NULL) || PyDict_Size(kw) == 0) {
            size = PyTuple_GET_SIZE(arg);
            if (size == 1)
                return (*meth)(self, PyTuple_GET_ITEM(arg, 0));
            PyErr_Format(PyExc_TypeError,
                "%.200s() takes exactly one argument (%zd given)",
                f->m_ml->ml_name, size);
            return NULL;
        }
        break;
    default:
        PyErr_SetString(PyExc_SystemError, "Bad call flags in "
                        "__Pyx_CyFunction_Call. METH_OLDARGS is no "
                        "longer supported!");
        return NULL;
    }
    PyErr_Format(PyExc_TypeError, "%.200s() takes no keyword arguments",
                 f->m_ml->ml_name);
    return NULL;
}
#else
static PyObject * __Pyx_CyFunction_Call(PyObject *func, PyObject *arg, PyObject *kw) {
	return PyCFunction_Call(func, arg, kw);
}
#endif
static PyTypeObject __pyx_CyFunctionType_type = {
    PyVarObject_HEAD_INIT(0, 0)
    __Pyx_NAMESTR("cython_function_or_method"), /*tp_name*/
    sizeof(__pyx_CyFunctionObject),   /*tp_basicsize*/
    0,                                  /*tp_itemsize*/
    (destructor) __Pyx_CyFunction_dealloc, /*tp_dealloc*/
    0,                                  /*tp_print*/
    0,                                  /*tp_getattr*/
    0,                                  /*tp_setattr*/
#if PY_MAJOR_VERSION < 3
    0,                                  /*tp_compare*/
#else
    0,                                  /*reserved*/
#endif
    (reprfunc) __Pyx_CyFunction_repr,   /*tp_repr*/
    0,                                  /*tp_as_number*/
    0,                                  /*tp_as_sequence*/
    0,                                  /*tp_as_mapping*/
    0,                                  /*tp_hash*/
    __Pyx_CyFunction_Call,              /*tp_call*/
    0,                                  /*tp_str*/
    0,                                  /*tp_getattro*/
    0,                                  /*tp_setattro*/
    0,                                  /*tp_as_buffer*/
    Py_TPFLAGS_DEFAULT | Py_TPFLAGS_HAVE_GC, /* tp_flags*/
    0,                                  /*tp_doc*/
    (traverseproc) __Pyx_CyFunction_traverse,   /*tp_traverse*/
    (inquiry) __Pyx_CyFunction_clear,   /*tp_clear*/
    0,                                  /*tp_richcompare*/
    offsetof(__pyx_CyFunctionObject, func_weakreflist), /* tp_weaklistoffse */
    0,                                  /*tp_iter*/
    0,                                  /*tp_iternext*/
    __pyx_CyFunction_methods,           /*tp_methods*/
    __pyx_CyFunction_members,           /*tp_members*/
    __pyx_CyFunction_getsets,           /*tp_getset*/
    0,                                  /*tp_base*/
    0,                                  /*tp_dict*/
    __Pyx_CyFunction_descr_get,         /*tp_descr_get*/
    0,                                  /*tp_descr_set*/
    offsetof(__pyx_CyFunctionObject, func_dict),/*tp_dictoffset*/
    0,                                  /*tp_init*/
    0,                                  /*tp_alloc*/
    0,                                  /*tp_new*/
    0,                                  /*tp_free*/
    0,                                  /*tp_is_gc*/
    0,                                  /*tp_bases*/
    0,                                  /*tp_mro*/
    0,                                  /*tp_cache*/
    0,                                  /*tp_subclasses*/
    0,                                  /*tp_weaklist*/
    0,                                  /*tp_del*/
    0,                                  /*tp_version_tag*/
#if PY_VERSION_HEX >= 0x030400a1
    0,                                  /*tp_finalize*/
#endif
};
static int __Pyx_CyFunction_init(void) {
#if !CYTHON_COMPILING_IN_PYPY
    __pyx_CyFunctionType_type.tp_call = PyCFunction_Call;
#endif
    __pyx_CyFunctionType = __Pyx_FetchCommonType(&__pyx_CyFunctionType_type);
    if (__pyx_CyFunctionType == NULL) {
        return -1;
    }
    return 0;
}
static CYTHON_INLINE void *__Pyx_CyFunction_InitDefaults(PyObject *func, size_t size, int pyobjects) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults = PyMem_Malloc(size);
    if (!m->defaults)
        return PyErr_NoMemory();
    memset(m->defaults, 0, size);
    m->defaults_pyobjects = pyobjects;
    return m->defaults;
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsTuple(PyObject *func, PyObject *tuple) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_tuple = tuple;
    Py_INCREF(tuple);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetDefaultsKwDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->defaults_kwdict = dict;
    Py_INCREF(dict);
}
static CYTHON_INLINE void __Pyx_CyFunction_SetAnnotationsDict(PyObject *func, PyObject *dict) {
    __pyx_CyFunctionObject *m = (__pyx_CyFunctionObject *) func;
    m->func_annotations = dict;
    Py_INCREF(dict);
}

static CYTHON_INLINE void __Pyx_RaiseTooManyValuesError(Py_ssize_t expected) {
    PyErr_Format(PyExc_ValueError,
                 "too many values to unpack (expected %" CYTHON_FORMAT_SSIZE_T "d)", expected);
}

static CYTHON_INLINE void __Pyx_RaiseNeedMoreValuesError(Py_ssize_t index) {
    PyErr_Format(PyExc_ValueError,
                 "need more than %" CYTHON_FORMAT_SSIZE_T "d value%.1s to unpack",
                 index, (index == 1) ? "" : "s");
}

static CYTHON_INLINE void __Pyx_RaiseNoneNotIterableError(void) {
    PyErr_SetString(PyExc_TypeError, "'NoneType' object is not iterable");
}

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static PyObject *__Pyx_GetNameInClass(PyObject *nmspace, PyObject *name) {
    PyObject *result;
    result = __Pyx_PyObject_GetAttrStr(nmspace, name);
    if (!result)
        result = __Pyx_GetModuleGlobalName(name);
    return result;
}

static PyObject *__Pyx_CalculateMetaclass(PyTypeObject *metaclass, PyObject *bases) {
    Py_ssize_t i, nbases = PyTuple_GET_SIZE(bases);
    for (i=0; i < nbases; i++) {
        PyTypeObject *tmptype;
        PyObject *tmp = PyTuple_GET_ITEM(bases, i);
        tmptype = Py_TYPE(tmp);
#if PY_MAJOR_VERSION < 3
        if (tmptype == &PyClass_Type)
            continue;
#endif
        if (!metaclass) {
            metaclass = tmptype;
            continue;
        }
        if (PyType_IsSubtype(metaclass, tmptype))
            continue;
        if (PyType_IsSubtype(tmptype, metaclass)) {
            metaclass = tmptype;
            continue;
        }
        PyErr_SetString(PyExc_TypeError,
                        "metaclass conflict: "
                        "the metaclass of a derived class "
                        "must be a (non-strict) subclass "
                        "of the metaclasses of all its bases");
        return NULL;
    }
    if (!metaclass) {
#if PY_MAJOR_VERSION < 3
        metaclass = &PyClass_Type;
#else
        metaclass = &PyType_Type;
#endif
    }
    Py_INCREF((PyObject*) metaclass);
    return (PyObject*) metaclass;
}

static PyObject *__Pyx_Py3MetaclassPrepare(PyObject *metaclass, PyObject *bases, PyObject *name,
                                           PyObject *qualname, PyObject *mkw, PyObject *modname, PyObject *doc) {
    PyObject *ns;
    if (metaclass) {
        PyObject *prep = __Pyx_PyObject_GetAttrStr(metaclass, __pyx_n_s_prepare);
        if (prep) {
            PyObject *pargs = PyTuple_Pack(2, name, bases);
            if (unlikely(!pargs)) {
                Py_DECREF(prep);
                return NULL;
            }
            ns = PyObject_Call(prep, pargs, mkw);
            Py_DECREF(prep);
            Py_DECREF(pargs);
        } else {
            if (unlikely(!PyErr_ExceptionMatches(PyExc_AttributeError)))
                return NULL;
            PyErr_Clear();
            ns = PyDict_New();
        }
    } else {
        ns = PyDict_New();
    }
    if (unlikely(!ns))
        return NULL;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_module, modname) < 0)) goto bad;
    if (unlikely(PyObject_SetItem(ns, __pyx_n_s_qualname, qualname) < 0)) goto bad;
    if (unlikely(doc && PyObject_SetItem(ns, __pyx_n_s_doc, doc) < 0)) goto bad;
    return ns;
bad:
    Py_DECREF(ns);
    return NULL;
}
static PyObject *__Pyx_Py3ClassCreate(PyObject *metaclass, PyObject *name, PyObject *bases,
                                      PyObject *dict, PyObject *mkw,
                                      int calculate_metaclass, int allow_py2_metaclass) {
    PyObject *result, *margs;
    PyObject *owned_metaclass = NULL;
    if (allow_py2_metaclass) {
        owned_metaclass = PyObject_GetItem(dict, __pyx_n_s_metaclass);
        if (owned_metaclass) {
            metaclass = owned_metaclass;
        } else if (likely(PyErr_ExceptionMatches(PyExc_KeyError))) {
            PyErr_Clear();
        } else {
            return NULL;
        }
    }
    if (calculate_metaclass && (!metaclass || PyType_Check(metaclass))) {
        metaclass = __Pyx_CalculateMetaclass((PyTypeObject*) metaclass, bases);
        Py_XDECREF(owned_metaclass);
        if (unlikely(!metaclass))
            return NULL;
        owned_metaclass = metaclass;
    }
    margs = PyTuple_Pack(3, name, bases, dict);
    if (unlikely(!margs)) {
        result = NULL;
    } else {
        result = PyObject_Call(metaclass, margs, mkw);
        Py_DECREF(margs);
    }
    Py_XDECREF(owned_metaclass);
    return result;
}

#if PY_MAJOR_VERSION < 3
static int __Pyx_GetBuffer(PyObject *obj, Py_buffer *view, int flags) {
    if (PyObject_CheckBuffer(obj)) return PyObject_GetBuffer(obj, view, flags);
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) return __pyx_pw_5numpy_7ndarray_1__getbuffer__(obj, view, flags);
    PyErr_Format(PyExc_TypeError, "'%.200s' does not have the buffer interface", Py_TYPE(obj)->tp_name);
    return -1;
}
static void __Pyx_ReleaseBuffer(Py_buffer *view) {
    PyObject *obj = view->obj;
    if (!obj) return;
    if (PyObject_CheckBuffer(obj)) {
        PyBuffer_Release(view);
        return;
    }
        if (PyObject_TypeCheck(obj, __pyx_ptype_5numpy_ndarray)) { __pyx_pw_5numpy_7ndarray_3__releasebuffer__(obj, view); return; }
    Py_DECREF(obj);
    view->obj = NULL;
}
#endif /*  PY_MAJOR_VERSION < 3 */


          static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0; /* try absolute import on failure */
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func)             \
    {                                                                     \
        func_type value = func(x);                                        \
        if (sizeof(target_type) < sizeof(func_type)) {                    \
            if (unlikely(value != (func_type) (target_type) value)) {     \
                func_type zero = 0;                                       \
                PyErr_SetString(PyExc_OverflowError,                      \
                    (is_unsigned && unlikely(value < zero)) ?             \
                    "can't convert negative value to " #target_type :     \
                    "value too large to convert to " #target_type);       \
                return (target_type) -1;                                  \
            }                                                             \
        }                                                                 \
        return (target_type) value;                                       \
    }

#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
 #endif
#endif

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to int");
                return (int) -1;
            }
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(int) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(int, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(int)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(int) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(int) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(int, long, PyLong_AsLong)
            } else if (sizeof(int) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(int, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE short __Pyx_PyInt_As_short(PyObject *x) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(short) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(short, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to short");
                return (short) -1;
            }
            return (short) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(short)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (short) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to short");
                return (short) -1;
            }
            if (sizeof(short) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(short, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(short) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(short, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(short)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(short) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(short) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(short) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(short, long, PyLong_AsLong)
            } else if (sizeof(short) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(short, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            short val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (short) -1;
        }
    } else {
        short val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (short) -1;
        val = __Pyx_PyInt_As_short(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static PyObject *__Pyx_GetStdout(void) {
    PyObject *f = PySys_GetObject((char *)"stdout");
    if (!f) {
        PyErr_SetString(PyExc_RuntimeError, "lost sys.stdout");
    }
    return f;
}
static int __Pyx_Print(PyObject* f, PyObject *arg_tuple, int newline) {
    int i;
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    for (i=0; i < PyTuple_GET_SIZE(arg_tuple); i++) {
        PyObject* v;
        if (PyFile_SoftSpace(f, 1)) {
            if (PyFile_WriteString(" ", f) < 0)
                goto error;
        }
        v = PyTuple_GET_ITEM(arg_tuple, i);
        if (PyFile_WriteObject(v, f, Py_PRINT_RAW) < 0)
            goto error;
        if (PyString_Check(v)) {
            char *s = PyString_AsString(v);
            Py_ssize_t len = PyString_Size(v);
            if (len > 0) {
                switch (s[len-1]) {
                    case ' ': break;
                    case '\f': case '\r': case '\n': case '\t': case '\v':
                        PyFile_SoftSpace(f, 0);
                        break;
                    default:  break;
                }
            }
        }
    }
    if (newline) {
        if (PyFile_WriteString("\n", f) < 0)
            goto error;
        PyFile_SoftSpace(f, 0);
    }
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
}
#else /* Python 3 has a print function */
static int __Pyx_Print(PyObject* stream, PyObject *arg_tuple, int newline) {
    PyObject* kwargs = 0;
    PyObject* result = 0;
    PyObject* end_string;
    if (unlikely(!__pyx_print)) {
        __pyx_print = PyObject_GetAttr(__pyx_b, __pyx_n_s_print);
        if (!__pyx_print)
            return -1;
    }
    if (stream) {
        kwargs = PyDict_New();
        if (unlikely(!kwargs))
            return -1;
        if (unlikely(PyDict_SetItem(kwargs, __pyx_n_s_file, stream) < 0))
            goto bad;
        if (!newline) {
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                goto bad;
            if (PyDict_SetItem(kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                goto bad;
            }
            Py_DECREF(end_string);
        }
    } else if (!newline) {
        if (unlikely(!__pyx_print_kwargs)) {
            __pyx_print_kwargs = PyDict_New();
            if (unlikely(!__pyx_print_kwargs))
                return -1;
            end_string = PyUnicode_FromStringAndSize(" ", 1);
            if (unlikely(!end_string))
                return -1;
            if (PyDict_SetItem(__pyx_print_kwargs, __pyx_n_s_end, end_string) < 0) {
                Py_DECREF(end_string);
                return -1;
            }
            Py_DECREF(end_string);
        }
        kwargs = __pyx_print_kwargs;
    }
    result = PyObject_Call(__pyx_print, arg_tuple, kwargs);
    if (unlikely(kwargs) && (kwargs != __pyx_print_kwargs))
        Py_DECREF(kwargs);
    if (!result)
        return -1;
    Py_DECREF(result);
    return 0;
bad:
    if (kwargs != __pyx_print_kwargs)
        Py_XDECREF(kwargs);
    return -1;
}
#endif

#if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION < 3
static int __Pyx_PrintOne(PyObject* f, PyObject *o) {
    if (!f) {
        if (!(f = __Pyx_GetStdout()))
            return -1;
    }
    Py_INCREF(f);
    if (PyFile_SoftSpace(f, 0)) {
        if (PyFile_WriteString(" ", f) < 0)
            goto error;
    }
    if (PyFile_WriteObject(o, f, Py_PRINT_RAW) < 0)
        goto error;
    if (PyFile_WriteString("\n", f) < 0)
        goto error;
    Py_DECREF(f);
    return 0;
error:
    Py_DECREF(f);
    return -1;
    /* the line below is just to avoid C compiler
     * warnings about unused functions */
    return __Pyx_Print(f, NULL, 0);
}
#else /* Python 3 has a print function */
static int __Pyx_PrintOne(PyObject* stream, PyObject *o) {
    int res;
    PyObject* arg_tuple = PyTuple_Pack(1, o);
    if (unlikely(!arg_tuple))
        return -1;
    res = __Pyx_Print(stream, arg_tuple, 1);
    Py_DECREF(arg_tuple);
    return res;
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_short(short value) {
    const short neg_one = (short) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(short) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(short) <= sizeof(unsigned long long)) {
            return PyLong_FromUnsignedLongLong((unsigned long long) value);
        }
    } else {
        if (sizeof(short) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(short) <= sizeof(long long)) {
            return PyLong_FromLongLong((long long) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(short),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to long");
                return (long) -1;
            }
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(long) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(long, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(long)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(long) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(long) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(long, long, PyLong_AsLong)
            } else if (sizeof(long) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(long, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return ::std::complex< float >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      return x + y*(__pyx_t_float_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_float_complex __pyx_t_float_complex_from_parts(float x, float y) {
      __pyx_t_float_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eqf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_sumf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_difff(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_prodf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_quotf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
        __pyx_t_float_complex z;
        float denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_negf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zerof(__pyx_t_float_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_conjf(__pyx_t_float_complex a) {
        __pyx_t_float_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE float __Pyx_c_absf(__pyx_t_float_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrtf(z.real*z.real + z.imag*z.imag);
          #else
            return hypotf(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_float_complex __Pyx_c_powf(__pyx_t_float_complex a, __pyx_t_float_complex b) {
            __pyx_t_float_complex z;
            float r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    float denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(a, a);
                    case 3:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, a);
                    case 4:
                        z = __Pyx_c_prodf(a, a);
                        return __Pyx_c_prodf(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_absf(a);
                theta = atan2f(a.imag, a.real);
            }
            lnr = logf(r);
            z_r = expf(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cosf(z_theta);
            z.imag = z_r * sinf(z_theta);
            return z;
        }
    #endif
#endif

#if CYTHON_CCOMPLEX
  #ifdef __cplusplus
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return ::std::complex< double >(x, y);
    }
  #else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      return x + y*(__pyx_t_double_complex)_Complex_I;
    }
  #endif
#else
    static CYTHON_INLINE __pyx_t_double_complex __pyx_t_double_complex_from_parts(double x, double y) {
      __pyx_t_double_complex z;
      z.real = x;
      z.imag = y;
      return z;
    }
#endif

#if CYTHON_CCOMPLEX
#else
    static CYTHON_INLINE int __Pyx_c_eq(__pyx_t_double_complex a, __pyx_t_double_complex b) {
       return (a.real == b.real) && (a.imag == b.imag);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_sum(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real + b.real;
        z.imag = a.imag + b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_diff(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real - b.real;
        z.imag = a.imag - b.imag;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_prod(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        z.real = a.real * b.real - a.imag * b.imag;
        z.imag = a.real * b.imag + a.imag * b.real;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_quot(__pyx_t_double_complex a, __pyx_t_double_complex b) {
        __pyx_t_double_complex z;
        double denom = b.real * b.real + b.imag * b.imag;
        z.real = (a.real * b.real + a.imag * b.imag) / denom;
        z.imag = (a.imag * b.real - a.real * b.imag) / denom;
        return z;
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_neg(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real = -a.real;
        z.imag = -a.imag;
        return z;
    }
    static CYTHON_INLINE int __Pyx_c_is_zero(__pyx_t_double_complex a) {
       return (a.real == 0) && (a.imag == 0);
    }
    static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_conj(__pyx_t_double_complex a) {
        __pyx_t_double_complex z;
        z.real =  a.real;
        z.imag = -a.imag;
        return z;
    }
    #if 1
        static CYTHON_INLINE double __Pyx_c_abs(__pyx_t_double_complex z) {
          #if !defined(HAVE_HYPOT) || defined(_MSC_VER)
            return sqrt(z.real*z.real + z.imag*z.imag);
          #else
            return hypot(z.real, z.imag);
          #endif
        }
        static CYTHON_INLINE __pyx_t_double_complex __Pyx_c_pow(__pyx_t_double_complex a, __pyx_t_double_complex b) {
            __pyx_t_double_complex z;
            double r, lnr, theta, z_r, z_theta;
            if (b.imag == 0 && b.real == (int)b.real) {
                if (b.real < 0) {
                    double denom = a.real * a.real + a.imag * a.imag;
                    a.real = a.real / denom;
                    a.imag = -a.imag / denom;
                    b.real = -b.real;
                }
                switch ((int)b.real) {
                    case 0:
                        z.real = 1;
                        z.imag = 0;
                        return z;
                    case 1:
                        return a;
                    case 2:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(a, a);
                    case 3:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, a);
                    case 4:
                        z = __Pyx_c_prod(a, a);
                        return __Pyx_c_prod(z, z);
                }
            }
            if (a.imag == 0) {
                if (a.real == 0) {
                    return a;
                }
                r = a.real;
                theta = 0;
            } else {
                r = __Pyx_c_abs(a);
                theta = atan2(a.imag, a.real);
            }
            lnr = log(r);
            z_r = exp(lnr * b.real - theta * b.imag);
            z_theta = theta * b.real + lnr * b.imag;
            z.real = z_r * cos(z_theta);
            z.imag = z_r * sin(z_theta);
            return z;
        }
    #endif
#endif

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG)
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return (size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (unlikely(Py_SIZE(x) < 0)) {
                PyErr_SetString(PyExc_OverflowError,
                                "can't convert negative value to size_t");
                return (size_t) -1;
            }
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long, PyLong_AsUnsignedLong)
            } else if (sizeof(size_t) <= sizeof(unsigned long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, unsigned long long, PyLong_AsUnsignedLongLong)
            }
        } else {
#if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
 #if CYTHON_USE_PYLONG_INTERNALS
            if (sizeof(digit) <= sizeof(size_t)) {
                switch (Py_SIZE(x)) {
                    case  0: return 0;
                    case  1: return +(size_t) ((PyLongObject*)x)->ob_digit[0];
                    case -1: return -(size_t) ((PyLongObject*)x)->ob_digit[0];
                }
            }
 #endif
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long, PyLong_AsLong)
            } else if (sizeof(size_t) <= sizeof(long long)) {
                __PYX_VERIFY_RETURN_INT(size_t, long long, PyLong_AsLongLong)
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_ExportVoidPtr(PyObject *name, void *p, const char *sig) {
    PyObject *d;
    PyObject *cobj = 0;
    d = PyDict_GetItem(__pyx_d, __pyx_n_s_pyx_capi);
    Py_XINCREF(d);
    if (!d) {
        d = PyDict_New();
        if (!d)
            goto bad;
        if (__Pyx_PyObject_SetAttrStr(__pyx_m, __pyx_n_s_pyx_capi, d) < 0)
            goto bad;
    }
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3 && PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItem(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

static int __Pyx_ExportFunction(const char *name, void (*f)(void), const char *sig) {
    PyObject *d = 0;
    PyObject *cobj = 0;
    union {
        void (*fp)(void);
        void *p;
    } tmp;
    d = PyObject_GetAttrString(__pyx_m, (char *)"__pyx_capi__");
    if (!d) {
        PyErr_Clear();
        d = PyDict_New();
        if (!d)
            goto bad;
        Py_INCREF(d);
        if (PyModule_AddObject(__pyx_m, (char *)"__pyx_capi__", d) < 0)
            goto bad;
    }
    tmp.fp = f;
#if PY_VERSION_HEX >= 0x02070000 && !(PY_MAJOR_VERSION==3&&PY_MINOR_VERSION==0)
    cobj = PyCapsule_New(tmp.p, sig, 0);
#else
    cobj = PyCObject_FromVoidPtrAndDesc(tmp.p, (void *)sig, 0);
#endif
    if (!cobj)
        goto bad;
    if (PyDict_SetItemString(d, name, cobj) < 0)
        goto bad;
    Py_DECREF(cobj);
    Py_DECREF(d);
    return 0;
bad:
    Py_XDECREF(cobj);
    Py_XDECREF(d);
    return -1;
}

#ifndef __PYX_HAVE_RT_ImportModule
#define __PYX_HAVE_RT_ImportModule
static PyObject *__Pyx_ImportModule(const char *name) {
    PyObject *py_name = 0;
    PyObject *py_module = 0;
    py_name = __Pyx_PyIdentifier_FromString(name);
    if (!py_name)
        goto bad;
    py_module = PyImport_Import(py_name);
    Py_DECREF(py_name);
    return py_module;
bad:
    Py_XDECREF(py_name);
    return 0;
}
#endif

#ifndef __PYX_HAVE_RT_ImportType
#define __PYX_HAVE_RT_ImportType
static PyTypeObject *__Pyx_ImportType(const char *module_name, const char *class_name,
    size_t size, int strict)
{
    PyObject *py_module = 0;
    PyObject *result = 0;
    PyObject *py_name = 0;
    char warning[200];
    Py_ssize_t basicsize;
#ifdef Py_LIMITED_API
    PyObject *py_basicsize;
#endif
    py_module = __Pyx_ImportModule(module_name);
    if (!py_module)
        goto bad;
    py_name = __Pyx_PyIdentifier_FromString(class_name);
    if (!py_name)
        goto bad;
    result = PyObject_GetAttr(py_module, py_name);
    Py_DECREF(py_name);
    py_name = 0;
    Py_DECREF(py_module);
    py_module = 0;
    if (!result)
        goto bad;
    if (!PyType_Check(result)) {
        PyErr_Format(PyExc_TypeError,
            "%.200s.%.200s is not a type object",
            module_name, class_name);
        goto bad;
    }
#ifndef Py_LIMITED_API
    basicsize = ((PyTypeObject *)result)->tp_basicsize;
#else
    py_basicsize = PyObject_GetAttrString(result, "__basicsize__");
    if (!py_basicsize)
        goto bad;
    basicsize = PyLong_AsSsize_t(py_basicsize);
    Py_DECREF(py_basicsize);
    py_basicsize = 0;
    if (basicsize == (Py_ssize_t)-1 && PyErr_Occurred())
        goto bad;
#endif
    if (!strict && (size_t)basicsize > size) {
        PyOS_snprintf(warning, sizeof(warning),
            "%s.%s size changed, may indicate binary incompatibility",
            module_name, class_name);
        if (PyErr_WarnEx(NULL, warning, 0) < 0) goto bad;
    }
    else if ((size_t)basicsize != size) {
        PyErr_Format(PyExc_ValueError,
            "%.200s.%.200s has the wrong size, try recompiling",
            module_name, class_name);
        goto bad;
    }
    return (PyTypeObject *)result;
bad:
    Py_XDECREF(py_module);
    Py_XDECREF(result);
    return NULL;
}
#endif

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = (start + end) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,            /*int argcount,*/
        0,            /*int kwonlyargcount,*/
        0,            /*int nlocals,*/
        0,            /*int stacksize,*/
        0,            /*int flags,*/
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,      /*int firstlineno,*/
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_globals = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_globals = PyModule_GetDict(__pyx_m);
    if (!py_globals) goto bad;
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        py_globals,          /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else  /* Python 3+ has unicode identifiers */
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif /*__PYX_DEFAULT_STRING_ENCODING_IS_ASCII*/
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else /* PY_VERSION_HEX < 0x03030000 */
        if (PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
        return PyUnicode_AsUTF8AndSize(o, length);
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII */
#endif /* PY_VERSION_HEX < 0x03030000 */
    } else
#endif /* __PYX_DEFAULT_STRING_ENCODING_IS_ASCII  || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT */
#if !CYTHON_COMPILING_IN_PYPY
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return Py_INCREF(x), x;
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b)))
      return PyInt_AS_LONG(b);
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
     #if CYTHON_USE_PYLONG_INTERNALS
       switch (Py_SIZE(b)) {
       case -1: return -(sdigit)((PyLongObject*)b)->ob_digit[0];
       case  0: return 0;
       case  1: return ((PyLongObject*)b)->ob_digit[0];
       }
     #endif
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
